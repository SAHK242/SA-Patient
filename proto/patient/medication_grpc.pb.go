// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: patient/medication.proto

package patient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	gcommon "patient/proto/gcommon"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MedicationService_UpsertMedication_FullMethodName = "/patient.MedicationService/UpsertMedication"
	MedicationService_ListMedication_FullMethodName   = "/patient.MedicationService/ListMedication"
)

// MedicationServiceClient is the client API for MedicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedicationServiceClient interface {
	UpsertMedication(ctx context.Context, in *UpsertMedicationRequest, opts ...grpc.CallOption) (*gcommon.EmptyResponse, error)
	ListMedication(ctx context.Context, in *ListMedicationRequest, opts ...grpc.CallOption) (*ListMedicationResponse, error)
}

type medicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMedicationServiceClient(cc grpc.ClientConnInterface) MedicationServiceClient {
	return &medicationServiceClient{cc}
}

func (c *medicationServiceClient) UpsertMedication(ctx context.Context, in *UpsertMedicationRequest, opts ...grpc.CallOption) (*gcommon.EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gcommon.EmptyResponse)
	err := c.cc.Invoke(ctx, MedicationService_UpsertMedication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicationServiceClient) ListMedication(ctx context.Context, in *ListMedicationRequest, opts ...grpc.CallOption) (*ListMedicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMedicationResponse)
	err := c.cc.Invoke(ctx, MedicationService_ListMedication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedicationServiceServer is the server API for MedicationService service.
// All implementations must embed UnimplementedMedicationServiceServer
// for forward compatibility
type MedicationServiceServer interface {
	UpsertMedication(context.Context, *UpsertMedicationRequest) (*gcommon.EmptyResponse, error)
	ListMedication(context.Context, *ListMedicationRequest) (*ListMedicationResponse, error)
	mustEmbedUnimplementedMedicationServiceServer()
}

// UnimplementedMedicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMedicationServiceServer struct {
}

func (UnimplementedMedicationServiceServer) UpsertMedication(context.Context, *UpsertMedicationRequest) (*gcommon.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMedication not implemented")
}
func (UnimplementedMedicationServiceServer) ListMedication(context.Context, *ListMedicationRequest) (*ListMedicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedication not implemented")
}
func (UnimplementedMedicationServiceServer) mustEmbedUnimplementedMedicationServiceServer() {}

// UnsafeMedicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedicationServiceServer will
// result in compilation errors.
type UnsafeMedicationServiceServer interface {
	mustEmbedUnimplementedMedicationServiceServer()
}

func RegisterMedicationServiceServer(s grpc.ServiceRegistrar, srv MedicationServiceServer) {
	s.RegisterService(&MedicationService_ServiceDesc, srv)
}

func _MedicationService_UpsertMedication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertMedicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicationServiceServer).UpsertMedication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicationService_UpsertMedication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicationServiceServer).UpsertMedication(ctx, req.(*UpsertMedicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicationService_ListMedication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicationServiceServer).ListMedication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicationService_ListMedication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicationServiceServer).ListMedication(ctx, req.(*ListMedicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedicationService_ServiceDesc is the grpc.ServiceDesc for MedicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "patient.MedicationService",
	HandlerType: (*MedicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertMedication",
			Handler:    _MedicationService_UpsertMedication_Handler,
		},
		{
			MethodName: "ListMedication",
			Handler:    _MedicationService_ListMedication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "patient/medication.proto",
}
