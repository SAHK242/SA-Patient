// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.0
// source: patient/patient.proto

package patient

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	gcommon "patient/proto/gcommon"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetMedicalHistoryDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error                *gcommon.Error         `protobuf:"bytes,1,opt,name=error,proto3" json:"error"`
	MedicalHistory       *MedicalHistory        `protobuf:"bytes,2,opt,name=medical_history,json=medicalHistory,proto3" json:"medical_history"`
	MedicalTreatments    []*MedicalTreatment    `protobuf:"bytes,3,rep,name=medical_treatments,json=medicalTreatments,proto3" json:"medical_treatments"`
	MedicalSurgeries     []*MedicalSurgery      `protobuf:"bytes,4,rep,name=medical_surgeries,json=medicalSurgeries,proto3" json:"medical_surgeries"`
	MedicalPrescriptions []*MedicalPrescription `protobuf:"bytes,5,rep,name=medical_prescriptions,json=medicalPrescriptions,proto3" json:"medical_prescriptions"`
}

func (x *GetMedicalHistoryDetailResponse) Reset() {
	*x = GetMedicalHistoryDetailResponse{}
	mi := &file_patient_patient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMedicalHistoryDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedicalHistoryDetailResponse) ProtoMessage() {}

func (x *GetMedicalHistoryDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedicalHistoryDetailResponse.ProtoReflect.Descriptor instead.
func (*GetMedicalHistoryDetailResponse) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{0}
}

func (x *GetMedicalHistoryDetailResponse) GetError() *gcommon.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetMedicalHistoryDetailResponse) GetMedicalHistory() *MedicalHistory {
	if x != nil {
		return x.MedicalHistory
	}
	return nil
}

func (x *GetMedicalHistoryDetailResponse) GetMedicalTreatments() []*MedicalTreatment {
	if x != nil {
		return x.MedicalTreatments
	}
	return nil
}

func (x *GetMedicalHistoryDetailResponse) GetMedicalSurgeries() []*MedicalSurgery {
	if x != nil {
		return x.MedicalSurgeries
	}
	return nil
}

func (x *GetMedicalHistoryDetailResponse) GetMedicalPrescriptions() []*MedicalPrescription {
	if x != nil {
		return x.MedicalPrescriptions
	}
	return nil
}

type MedicalTreatment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	MedicalHistoryId string  `protobuf:"bytes,2,opt,name=medical_history_id,json=medicalHistoryId,proto3" json:"medical_history_id"`
	StartDate        int64   `protobuf:"varint,3,opt,name=start_date,json=startDate,proto3" json:"start_date"`
	EndDate          int64   `protobuf:"varint,4,opt,name=end_date,json=endDate,proto3" json:"end_date"`
	Name             string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	Result           string  `protobuf:"bytes,6,opt,name=result,proto3" json:"result"`
	Description      string  `protobuf:"bytes,7,opt,name=description,proto3" json:"description"`
	Fee              float64 `protobuf:"fixed64,8,opt,name=fee,proto3" json:"fee"`
	MainDoctorId     string  `protobuf:"bytes,9,opt,name=main_doctor_id,json=mainDoctorId,proto3" json:"main_doctor_id"`
	SupportDoctorIds string  `protobuf:"bytes,10,opt,name=support_doctor_ids,json=supportDoctorIds,proto3" json:"support_doctor_ids"` // List of doctor ids, separated by comma
	SupportNurseIds  string  `protobuf:"bytes,11,opt,name=support_nurse_ids,json=supportNurseIds,proto3" json:"support_nurse_ids"`    // List of nurse ids, separated by comma
	CreatedAt        int64   `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt        int64   `protobuf:"varint,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	CreatedBy        *User   `protobuf:"bytes,14,opt,name=created_by,json=createdBy,proto3" json:"created_by"`
	UpdatedBy        *User   `protobuf:"bytes,15,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by"`
}

func (x *MedicalTreatment) Reset() {
	*x = MedicalTreatment{}
	mi := &file_patient_patient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedicalTreatment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalTreatment) ProtoMessage() {}

func (x *MedicalTreatment) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalTreatment.ProtoReflect.Descriptor instead.
func (*MedicalTreatment) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{1}
}

func (x *MedicalTreatment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MedicalTreatment) GetMedicalHistoryId() string {
	if x != nil {
		return x.MedicalHistoryId
	}
	return ""
}

func (x *MedicalTreatment) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *MedicalTreatment) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *MedicalTreatment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MedicalTreatment) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *MedicalTreatment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MedicalTreatment) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *MedicalTreatment) GetMainDoctorId() string {
	if x != nil {
		return x.MainDoctorId
	}
	return ""
}

func (x *MedicalTreatment) GetSupportDoctorIds() string {
	if x != nil {
		return x.SupportDoctorIds
	}
	return ""
}

func (x *MedicalTreatment) GetSupportNurseIds() string {
	if x != nil {
		return x.SupportNurseIds
	}
	return ""
}

func (x *MedicalTreatment) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MedicalTreatment) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *MedicalTreatment) GetCreatedBy() *User {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *MedicalTreatment) GetUpdatedBy() *User {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

type MedicalSurgery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	MedicalHistoryId string  `protobuf:"bytes,2,opt,name=medical_history_id,json=medicalHistoryId,proto3" json:"medical_history_id"`
	StartDate        int64   `protobuf:"varint,3,opt,name=start_date,json=startDate,proto3" json:"start_date"`
	EndDate          int64   `protobuf:"varint,4,opt,name=end_date,json=endDate,proto3" json:"end_date"`
	Name             string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	Result           string  `protobuf:"bytes,6,opt,name=result,proto3" json:"result"`
	Description      string  `protobuf:"bytes,7,opt,name=description,proto3" json:"description"`
	Fee              float64 `protobuf:"fixed64,8,opt,name=fee,proto3" json:"fee"`
	MainDoctorId     string  `protobuf:"bytes,9,opt,name=main_doctor_id,json=mainDoctorId,proto3" json:"main_doctor_id"`
	SupportDoctorIds string  `protobuf:"bytes,10,opt,name=support_doctor_ids,json=supportDoctorIds,proto3" json:"support_doctor_ids"` // List of doctor ids, separated by comma
	SupportNurseIds  string  `protobuf:"bytes,11,opt,name=support_nurse_ids,json=supportNurseIds,proto3" json:"support_nurse_ids"`    // List of nurse ids, separated by comma
	CreatedAt        int64   `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt        int64   `protobuf:"varint,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	CreatedBy        *User   `protobuf:"bytes,14,opt,name=created_by,json=createdBy,proto3" json:"created_by"`
	UpdatedBy        *User   `protobuf:"bytes,15,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by"`
}

func (x *MedicalSurgery) Reset() {
	*x = MedicalSurgery{}
	mi := &file_patient_patient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedicalSurgery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalSurgery) ProtoMessage() {}

func (x *MedicalSurgery) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalSurgery.ProtoReflect.Descriptor instead.
func (*MedicalSurgery) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{2}
}

func (x *MedicalSurgery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MedicalSurgery) GetMedicalHistoryId() string {
	if x != nil {
		return x.MedicalHistoryId
	}
	return ""
}

func (x *MedicalSurgery) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *MedicalSurgery) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *MedicalSurgery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MedicalSurgery) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *MedicalSurgery) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MedicalSurgery) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *MedicalSurgery) GetMainDoctorId() string {
	if x != nil {
		return x.MainDoctorId
	}
	return ""
}

func (x *MedicalSurgery) GetSupportDoctorIds() string {
	if x != nil {
		return x.SupportDoctorIds
	}
	return ""
}

func (x *MedicalSurgery) GetSupportNurseIds() string {
	if x != nil {
		return x.SupportNurseIds
	}
	return ""
}

func (x *MedicalSurgery) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MedicalSurgery) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *MedicalSurgery) GetCreatedBy() *User {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *MedicalSurgery) GetUpdatedBy() *User {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

type MedicalPrescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	MedicalHistoryId string               `protobuf:"bytes,2,opt,name=medical_history_id,json=medicalHistoryId,proto3" json:"medical_history_id"`
	Medications      []*MedicalMedication `protobuf:"bytes,3,rep,name=medications,proto3" json:"medications"`
	CreatedAt        int64                `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	CreatedBy        *User                `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by"`
	Fee              float64              `protobuf:"fixed64,7,opt,name=fee,proto3" json:"fee"`
	PrescriptionDate int64                `protobuf:"varint,8,opt,name=prescription_date,json=prescriptionDate,proto3" json:"prescription_date"`
}

func (x *MedicalPrescription) Reset() {
	*x = MedicalPrescription{}
	mi := &file_patient_patient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedicalPrescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalPrescription) ProtoMessage() {}

func (x *MedicalPrescription) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalPrescription.ProtoReflect.Descriptor instead.
func (*MedicalPrescription) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{3}
}

func (x *MedicalPrescription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MedicalPrescription) GetMedicalHistoryId() string {
	if x != nil {
		return x.MedicalHistoryId
	}
	return ""
}

func (x *MedicalPrescription) GetMedications() []*MedicalMedication {
	if x != nil {
		return x.Medications
	}
	return nil
}

func (x *MedicalPrescription) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MedicalPrescription) GetCreatedBy() *User {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *MedicalPrescription) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *MedicalPrescription) GetPrescriptionDate() int64 {
	if x != nil {
		return x.PrescriptionDate
	}
	return 0
}

type MedicalMedication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Medication *Medication `protobuf:"bytes,2,opt,name=medication,proto3" json:"medication"`
	Quantity   int64       `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity"`
}

func (x *MedicalMedication) Reset() {
	*x = MedicalMedication{}
	mi := &file_patient_patient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedicalMedication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalMedication) ProtoMessage() {}

func (x *MedicalMedication) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalMedication.ProtoReflect.Descriptor instead.
func (*MedicalMedication) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{4}
}

func (x *MedicalMedication) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MedicalMedication) GetMedication() *Medication {
	if x != nil {
		return x.Medication
	}
	return nil
}

func (x *MedicalMedication) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type GetMedicalHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatientId string             `protobuf:"bytes,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	DateRange *gcommon.DateRange `protobuf:"bytes,2,opt,name=date_range,json=dateRange,proto3" json:"date_range"`
	CreatedBy string             `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by"` // Search by doctor id, nurse id
	Pageable  *gcommon.Pageable  `protobuf:"bytes,4,opt,name=pageable,proto3" json:"pageable"`
}

func (x *GetMedicalHistoryRequest) Reset() {
	*x = GetMedicalHistoryRequest{}
	mi := &file_patient_patient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMedicalHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedicalHistoryRequest) ProtoMessage() {}

func (x *GetMedicalHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedicalHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetMedicalHistoryRequest) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{5}
}

func (x *GetMedicalHistoryRequest) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *GetMedicalHistoryRequest) GetDateRange() *gcommon.DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GetMedicalHistoryRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *GetMedicalHistoryRequest) GetPageable() *gcommon.Pageable {
	if x != nil {
		return x.Pageable
	}
	return nil
}

type GetMedicalHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error            *gcommon.Error        `protobuf:"bytes,1,opt,name=error,proto3" json:"error"`
	PageMetadata     *gcommon.PageMetadata `protobuf:"bytes,2,opt,name=page_metadata,json=pageMetadata,proto3" json:"page_metadata"`
	MedicalHistories []*MedicalHistory     `protobuf:"bytes,3,rep,name=medical_histories,json=medicalHistories,proto3" json:"medical_histories"`
}

func (x *GetMedicalHistoryResponse) Reset() {
	*x = GetMedicalHistoryResponse{}
	mi := &file_patient_patient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMedicalHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedicalHistoryResponse) ProtoMessage() {}

func (x *GetMedicalHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedicalHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetMedicalHistoryResponse) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{6}
}

func (x *GetMedicalHistoryResponse) GetError() *gcommon.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetMedicalHistoryResponse) GetPageMetadata() *gcommon.PageMetadata {
	if x != nil {
		return x.PageMetadata
	}
	return nil
}

func (x *GetMedicalHistoryResponse) GetMedicalHistories() []*MedicalHistory {
	if x != nil {
		return x.MedicalHistories
	}
	return nil
}

type MedicalHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	PatientId       string  `protobuf:"bytes,2,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	Reason          string  `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason"`
	Diagnosis       string  `protobuf:"bytes,4,opt,name=diagnosis,proto3" json:"diagnosis"`
	HasTreatment    bool    `protobuf:"varint,5,opt,name=has_treatment,json=hasTreatment,proto3" json:"has_treatment"`
	HasSurgery      bool    `protobuf:"varint,6,opt,name=has_surgery,json=hasSurgery,proto3" json:"has_surgery"`
	HasPrescription bool    `protobuf:"varint,7,opt,name=has_prescription,json=hasPrescription,proto3" json:"has_prescription"`
	DoctorNotes     string  `protobuf:"bytes,8,opt,name=doctor_notes,json=doctorNotes,proto3" json:"doctor_notes"`
	MedicalEndDate  int64   `protobuf:"varint,9,opt,name=medical_end_date,json=medicalEndDate,proto3" json:"medical_end_date"`
	CreatedAt       int64   `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt       int64   `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	CreatedBy       *User   `protobuf:"bytes,12,opt,name=created_by,json=createdBy,proto3" json:"created_by"`
	UpdatedBy       *User   `protobuf:"bytes,13,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by"`
	TotalFee        float64 `protobuf:"fixed64,14,opt,name=total_fee,json=totalFee,proto3" json:"total_fee"`
}

func (x *MedicalHistory) Reset() {
	*x = MedicalHistory{}
	mi := &file_patient_patient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedicalHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalHistory) ProtoMessage() {}

func (x *MedicalHistory) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalHistory.ProtoReflect.Descriptor instead.
func (*MedicalHistory) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{7}
}

func (x *MedicalHistory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MedicalHistory) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *MedicalHistory) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *MedicalHistory) GetDiagnosis() string {
	if x != nil {
		return x.Diagnosis
	}
	return ""
}

func (x *MedicalHistory) GetHasTreatment() bool {
	if x != nil {
		return x.HasTreatment
	}
	return false
}

func (x *MedicalHistory) GetHasSurgery() bool {
	if x != nil {
		return x.HasSurgery
	}
	return false
}

func (x *MedicalHistory) GetHasPrescription() bool {
	if x != nil {
		return x.HasPrescription
	}
	return false
}

func (x *MedicalHistory) GetDoctorNotes() string {
	if x != nil {
		return x.DoctorNotes
	}
	return ""
}

func (x *MedicalHistory) GetMedicalEndDate() int64 {
	if x != nil {
		return x.MedicalEndDate
	}
	return 0
}

func (x *MedicalHistory) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MedicalHistory) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *MedicalHistory) GetCreatedBy() *User {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *MedicalHistory) GetUpdatedBy() *User {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *MedicalHistory) GetTotalFee() float64 {
	if x != nil {
		return x.TotalFee
	}
	return 0
}

type UpsertMedicalPrescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicalHistoryId string                    `protobuf:"bytes,1,opt,name=medical_history_id,json=medicalHistoryId,proto3" json:"medical_history_id"`
	Medications      []*PrescriptionMedication `protobuf:"bytes,2,rep,name=medications,proto3" json:"medications"`
}

func (x *UpsertMedicalPrescriptionRequest) Reset() {
	*x = UpsertMedicalPrescriptionRequest{}
	mi := &file_patient_patient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertMedicalPrescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertMedicalPrescriptionRequest) ProtoMessage() {}

func (x *UpsertMedicalPrescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertMedicalPrescriptionRequest.ProtoReflect.Descriptor instead.
func (*UpsertMedicalPrescriptionRequest) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{8}
}

func (x *UpsertMedicalPrescriptionRequest) GetMedicalHistoryId() string {
	if x != nil {
		return x.MedicalHistoryId
	}
	return ""
}

func (x *UpsertMedicalPrescriptionRequest) GetMedications() []*PrescriptionMedication {
	if x != nil {
		return x.Medications
	}
	return nil
}

type PrescriptionMedication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicationId string `protobuf:"bytes,1,opt,name=medication_id,json=medicationId,proto3" json:"medication_id"`
	Quantity     int64  `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity"`
}

func (x *PrescriptionMedication) Reset() {
	*x = PrescriptionMedication{}
	mi := &file_patient_patient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrescriptionMedication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrescriptionMedication) ProtoMessage() {}

func (x *PrescriptionMedication) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrescriptionMedication.ProtoReflect.Descriptor instead.
func (*PrescriptionMedication) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{9}
}

func (x *PrescriptionMedication) GetMedicationId() string {
	if x != nil {
		return x.MedicationId
	}
	return ""
}

func (x *PrescriptionMedication) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type UpsertMedicalSurgeryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	MedicalHistoryId string  `protobuf:"bytes,2,opt,name=medical_history_id,json=medicalHistoryId,proto3" json:"medical_history_id"`
	StartDate        int64   `protobuf:"varint,3,opt,name=start_date,json=startDate,proto3" json:"start_date"`
	EndDate          int64   `protobuf:"varint,4,opt,name=end_date,json=endDate,proto3" json:"end_date"`
	Name             string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	Result           string  `protobuf:"bytes,6,opt,name=result,proto3" json:"result"`
	Description      string  `protobuf:"bytes,7,opt,name=description,proto3" json:"description"`
	Fee              float64 `protobuf:"fixed64,8,opt,name=fee,proto3" json:"fee"`
	MainDoctorId     string  `protobuf:"bytes,9,opt,name=main_doctor_id,json=mainDoctorId,proto3" json:"main_doctor_id"`
	SupportDoctorIds string  `protobuf:"bytes,10,opt,name=support_doctor_ids,json=supportDoctorIds,proto3" json:"support_doctor_ids"` // List of doctor ids, separated by comma
	SupportNurseIds  string  `protobuf:"bytes,11,opt,name=support_nurse_ids,json=supportNurseIds,proto3" json:"support_nurse_ids"`    // List of nurse ids, separated by comma
}

func (x *UpsertMedicalSurgeryRequest) Reset() {
	*x = UpsertMedicalSurgeryRequest{}
	mi := &file_patient_patient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertMedicalSurgeryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertMedicalSurgeryRequest) ProtoMessage() {}

func (x *UpsertMedicalSurgeryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertMedicalSurgeryRequest.ProtoReflect.Descriptor instead.
func (*UpsertMedicalSurgeryRequest) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{10}
}

func (x *UpsertMedicalSurgeryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpsertMedicalSurgeryRequest) GetMedicalHistoryId() string {
	if x != nil {
		return x.MedicalHistoryId
	}
	return ""
}

func (x *UpsertMedicalSurgeryRequest) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *UpsertMedicalSurgeryRequest) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *UpsertMedicalSurgeryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpsertMedicalSurgeryRequest) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *UpsertMedicalSurgeryRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpsertMedicalSurgeryRequest) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *UpsertMedicalSurgeryRequest) GetMainDoctorId() string {
	if x != nil {
		return x.MainDoctorId
	}
	return ""
}

func (x *UpsertMedicalSurgeryRequest) GetSupportDoctorIds() string {
	if x != nil {
		return x.SupportDoctorIds
	}
	return ""
}

func (x *UpsertMedicalSurgeryRequest) GetSupportNurseIds() string {
	if x != nil {
		return x.SupportNurseIds
	}
	return ""
}

type UpsertMedicalTreatmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	MedicalHistoryId string  `protobuf:"bytes,2,opt,name=medical_history_id,json=medicalHistoryId,proto3" json:"medical_history_id"`
	StartDate        int64   `protobuf:"varint,3,opt,name=start_date,json=startDate,proto3" json:"start_date"`
	EndDate          int64   `protobuf:"varint,4,opt,name=end_date,json=endDate,proto3" json:"end_date"`
	Name             string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	Result           string  `protobuf:"bytes,6,opt,name=result,proto3" json:"result"`
	Description      string  `protobuf:"bytes,7,opt,name=description,proto3" json:"description"`
	Fee              float64 `protobuf:"fixed64,8,opt,name=fee,proto3" json:"fee"`
	MainDoctorId     string  `protobuf:"bytes,9,opt,name=main_doctor_id,json=mainDoctorId,proto3" json:"main_doctor_id"`
	SupportDoctorIds string  `protobuf:"bytes,10,opt,name=support_doctor_ids,json=supportDoctorIds,proto3" json:"support_doctor_ids"` // List of doctor ids, separated by comma
	SupportNurseIds  string  `protobuf:"bytes,11,opt,name=support_nurse_ids,json=supportNurseIds,proto3" json:"support_nurse_ids"`    // List of nurse ids, separated by comma
}

func (x *UpsertMedicalTreatmentRequest) Reset() {
	*x = UpsertMedicalTreatmentRequest{}
	mi := &file_patient_patient_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertMedicalTreatmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertMedicalTreatmentRequest) ProtoMessage() {}

func (x *UpsertMedicalTreatmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertMedicalTreatmentRequest.ProtoReflect.Descriptor instead.
func (*UpsertMedicalTreatmentRequest) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{11}
}

func (x *UpsertMedicalTreatmentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpsertMedicalTreatmentRequest) GetMedicalHistoryId() string {
	if x != nil {
		return x.MedicalHistoryId
	}
	return ""
}

func (x *UpsertMedicalTreatmentRequest) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *UpsertMedicalTreatmentRequest) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *UpsertMedicalTreatmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpsertMedicalTreatmentRequest) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *UpsertMedicalTreatmentRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpsertMedicalTreatmentRequest) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *UpsertMedicalTreatmentRequest) GetMainDoctorId() string {
	if x != nil {
		return x.MainDoctorId
	}
	return ""
}

func (x *UpsertMedicalTreatmentRequest) GetSupportDoctorIds() string {
	if x != nil {
		return x.SupportDoctorIds
	}
	return ""
}

func (x *UpsertMedicalTreatmentRequest) GetSupportNurseIds() string {
	if x != nil {
		return x.SupportNurseIds
	}
	return ""
}

type UpsertMedicalRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	PatientId      string `protobuf:"bytes,2,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	Reason         string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason"`
	Diagnosis      string `protobuf:"bytes,4,opt,name=diagnosis,proto3" json:"diagnosis"`
	DoctorNotes    string `protobuf:"bytes,5,opt,name=doctor_notes,json=doctorNotes,proto3" json:"doctor_notes"`
	MedicalEndDate int64  `protobuf:"varint,6,opt,name=medical_end_date,json=medicalEndDate,proto3" json:"medical_end_date"`
}

func (x *UpsertMedicalRecordRequest) Reset() {
	*x = UpsertMedicalRecordRequest{}
	mi := &file_patient_patient_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertMedicalRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertMedicalRecordRequest) ProtoMessage() {}

func (x *UpsertMedicalRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertMedicalRecordRequest.ProtoReflect.Descriptor instead.
func (*UpsertMedicalRecordRequest) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{12}
}

func (x *UpsertMedicalRecordRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpsertMedicalRecordRequest) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *UpsertMedicalRecordRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UpsertMedicalRecordRequest) GetDiagnosis() string {
	if x != nil {
		return x.Diagnosis
	}
	return ""
}

func (x *UpsertMedicalRecordRequest) GetDoctorNotes() string {
	if x != nil {
		return x.DoctorNotes
	}
	return ""
}

func (x *UpsertMedicalRecordRequest) GetMedicalEndDate() int64 {
	if x != nil {
		return x.MedicalEndDate
	}
	return 0
}

type ListPatientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pageable *gcommon.Pageable `protobuf:"bytes,1,opt,name=pageable,proto3" json:"pageable"`
	Search   string            `protobuf:"bytes,2,opt,name=search,proto3" json:"search"` // Search by name
}

func (x *ListPatientRequest) Reset() {
	*x = ListPatientRequest{}
	mi := &file_patient_patient_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPatientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPatientRequest) ProtoMessage() {}

func (x *ListPatientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPatientRequest.ProtoReflect.Descriptor instead.
func (*ListPatientRequest) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{13}
}

func (x *ListPatientRequest) GetPageable() *gcommon.Pageable {
	if x != nil {
		return x.Pageable
	}
	return nil
}

func (x *ListPatientRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type ListPatientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        *gcommon.Error        `protobuf:"bytes,1,opt,name=error,proto3" json:"error"`
	PageMetadata *gcommon.PageMetadata `protobuf:"bytes,2,opt,name=page_metadata,json=pageMetadata,proto3" json:"page_metadata"`
	Patients     []*Patient            `protobuf:"bytes,3,rep,name=patients,proto3" json:"patients"`
}

func (x *ListPatientResponse) Reset() {
	*x = ListPatientResponse{}
	mi := &file_patient_patient_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPatientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPatientResponse) ProtoMessage() {}

func (x *ListPatientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPatientResponse.ProtoReflect.Descriptor instead.
func (*ListPatientResponse) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{14}
}

func (x *ListPatientResponse) GetError() *gcommon.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListPatientResponse) GetPageMetadata() *gcommon.PageMetadata {
	if x != nil {
		return x.PageMetadata
	}
	return nil
}

func (x *ListPatientResponse) GetPatients() []*Patient {
	if x != nil {
		return x.Patients
	}
	return nil
}

type GetPatientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   *gcommon.Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error"`
	Patient *Patient       `protobuf:"bytes,2,opt,name=patient,proto3" json:"patient"`
}

func (x *GetPatientResponse) Reset() {
	*x = GetPatientResponse{}
	mi := &file_patient_patient_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPatientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPatientResponse) ProtoMessage() {}

func (x *GetPatientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPatientResponse.ProtoReflect.Descriptor instead.
func (*GetPatientResponse) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{15}
}

func (x *GetPatientResponse) GetError() *gcommon.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetPatientResponse) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

type UpsertPatientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	FirstName   string         `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	LastName    string         `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	Gender      gcommon.Gender `protobuf:"varint,4,opt,name=gender,proto3,enum=common.Gender" json:"gender"`
	DateOfBirth int64          `protobuf:"varint,5,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth"`
	Address     string         `protobuf:"bytes,6,opt,name=address,proto3" json:"address"`
	Phone       string         `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone"`
}

func (x *UpsertPatientRequest) Reset() {
	*x = UpsertPatientRequest{}
	mi := &file_patient_patient_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertPatientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertPatientRequest) ProtoMessage() {}

func (x *UpsertPatientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_patient_patient_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertPatientRequest.ProtoReflect.Descriptor instead.
func (*UpsertPatientRequest) Descriptor() ([]byte, []int) {
	return file_patient_patient_proto_rawDescGZIP(), []int{16}
}

func (x *UpsertPatientRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpsertPatientRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UpsertPatientRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UpsertPatientRequest) GetGender() gcommon.Gender {
	if x != nil {
		return x.Gender
	}
	return gcommon.Gender(0)
}

func (x *UpsertPatientRequest) GetDateOfBirth() int64 {
	if x != nil {
		return x.DateOfBirth
	}
	return 0
}

func (x *UpsertPatientRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpsertPatientRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

var File_patient_patient_proto protoreflect.FileDescriptor

var file_patient_patient_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x02, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x44, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x72, 0x67,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x72,
	0x67, 0x65, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x72,
	0x67, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x84, 0x04, 0x0a, 0x10, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x69, 0x6e, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75,
	0x72, 0x73, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x2c, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x22, 0x82, 0x04, 0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x72, 0x67,
	0x65, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x72, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2c, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x9d, 0x02, 0x0a, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x74, 0x0a, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xb8, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xea, 0x03, 0x0a, 0x0e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x54, 0x72,
	0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x73,
	0x75, 0x72, 0x67, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61,
	0x73, 0x53, 0x75, 0x72, 0x67, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2c, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x59, 0x0a,
	0x16, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xf5, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x72, 0x67, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x73,
	0x22, 0xf7, 0x02, 0x0a, 0x1d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x72, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x1a, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x5a, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x2c, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x65, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x32, 0x85, 0x06, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x13, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x16, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x14, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x75,
	0x72, 0x67, 0x65, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x72,
	0x67, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x19, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0f, 0x5a,
	0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_patient_patient_proto_rawDescOnce sync.Once
	file_patient_patient_proto_rawDescData = file_patient_patient_proto_rawDesc
)

func file_patient_patient_proto_rawDescGZIP() []byte {
	file_patient_patient_proto_rawDescOnce.Do(func() {
		file_patient_patient_proto_rawDescData = protoimpl.X.CompressGZIP(file_patient_patient_proto_rawDescData)
	})
	return file_patient_patient_proto_rawDescData
}

var file_patient_patient_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_patient_patient_proto_goTypes = []any{
	(*GetMedicalHistoryDetailResponse)(nil),  // 0: patient.GetMedicalHistoryDetailResponse
	(*MedicalTreatment)(nil),                 // 1: patient.MedicalTreatment
	(*MedicalSurgery)(nil),                   // 2: patient.MedicalSurgery
	(*MedicalPrescription)(nil),              // 3: patient.MedicalPrescription
	(*MedicalMedication)(nil),                // 4: patient.MedicalMedication
	(*GetMedicalHistoryRequest)(nil),         // 5: patient.GetMedicalHistoryRequest
	(*GetMedicalHistoryResponse)(nil),        // 6: patient.GetMedicalHistoryResponse
	(*MedicalHistory)(nil),                   // 7: patient.MedicalHistory
	(*UpsertMedicalPrescriptionRequest)(nil), // 8: patient.UpsertMedicalPrescriptionRequest
	(*PrescriptionMedication)(nil),           // 9: patient.PrescriptionMedication
	(*UpsertMedicalSurgeryRequest)(nil),      // 10: patient.UpsertMedicalSurgeryRequest
	(*UpsertMedicalTreatmentRequest)(nil),    // 11: patient.UpsertMedicalTreatmentRequest
	(*UpsertMedicalRecordRequest)(nil),       // 12: patient.UpsertMedicalRecordRequest
	(*ListPatientRequest)(nil),               // 13: patient.ListPatientRequest
	(*ListPatientResponse)(nil),              // 14: patient.ListPatientResponse
	(*GetPatientResponse)(nil),               // 15: patient.GetPatientResponse
	(*UpsertPatientRequest)(nil),             // 16: patient.UpsertPatientRequest
	(*gcommon.Error)(nil),                    // 17: common.Error
	(*User)(nil),                             // 18: patient.User
	(*Medication)(nil),                       // 19: patient.Medication
	(*gcommon.DateRange)(nil),                // 20: common.DateRange
	(*gcommon.Pageable)(nil),                 // 21: common.Pageable
	(*gcommon.PageMetadata)(nil),             // 22: common.PageMetadata
	(*Patient)(nil),                          // 23: patient.Patient
	(gcommon.Gender)(0),                      // 24: common.Gender
	(*gcommon.IdRequest)(nil),                // 25: common.IdRequest
	(*gcommon.EmptyResponse)(nil),            // 26: common.EmptyResponse
}
var file_patient_patient_proto_depIdxs = []int32{
	17, // 0: patient.GetMedicalHistoryDetailResponse.error:type_name -> common.Error
	7,  // 1: patient.GetMedicalHistoryDetailResponse.medical_history:type_name -> patient.MedicalHistory
	1,  // 2: patient.GetMedicalHistoryDetailResponse.medical_treatments:type_name -> patient.MedicalTreatment
	2,  // 3: patient.GetMedicalHistoryDetailResponse.medical_surgeries:type_name -> patient.MedicalSurgery
	3,  // 4: patient.GetMedicalHistoryDetailResponse.medical_prescriptions:type_name -> patient.MedicalPrescription
	18, // 5: patient.MedicalTreatment.created_by:type_name -> patient.User
	18, // 6: patient.MedicalTreatment.updated_by:type_name -> patient.User
	18, // 7: patient.MedicalSurgery.created_by:type_name -> patient.User
	18, // 8: patient.MedicalSurgery.updated_by:type_name -> patient.User
	4,  // 9: patient.MedicalPrescription.medications:type_name -> patient.MedicalMedication
	18, // 10: patient.MedicalPrescription.created_by:type_name -> patient.User
	19, // 11: patient.MedicalMedication.medication:type_name -> patient.Medication
	20, // 12: patient.GetMedicalHistoryRequest.date_range:type_name -> common.DateRange
	21, // 13: patient.GetMedicalHistoryRequest.pageable:type_name -> common.Pageable
	17, // 14: patient.GetMedicalHistoryResponse.error:type_name -> common.Error
	22, // 15: patient.GetMedicalHistoryResponse.page_metadata:type_name -> common.PageMetadata
	7,  // 16: patient.GetMedicalHistoryResponse.medical_histories:type_name -> patient.MedicalHistory
	18, // 17: patient.MedicalHistory.created_by:type_name -> patient.User
	18, // 18: patient.MedicalHistory.updated_by:type_name -> patient.User
	9,  // 19: patient.UpsertMedicalPrescriptionRequest.medications:type_name -> patient.PrescriptionMedication
	21, // 20: patient.ListPatientRequest.pageable:type_name -> common.Pageable
	17, // 21: patient.ListPatientResponse.error:type_name -> common.Error
	22, // 22: patient.ListPatientResponse.page_metadata:type_name -> common.PageMetadata
	23, // 23: patient.ListPatientResponse.patients:type_name -> patient.Patient
	17, // 24: patient.GetPatientResponse.error:type_name -> common.Error
	23, // 25: patient.GetPatientResponse.patient:type_name -> patient.Patient
	24, // 26: patient.UpsertPatientRequest.gender:type_name -> common.Gender
	25, // 27: patient.PatientService.GetPatient:input_type -> common.IdRequest
	13, // 28: patient.PatientService.ListPatient:input_type -> patient.ListPatientRequest
	16, // 29: patient.PatientService.UpsertPatient:input_type -> patient.UpsertPatientRequest
	12, // 30: patient.PatientService.UpsertMedicalRecord:input_type -> patient.UpsertMedicalRecordRequest
	11, // 31: patient.PatientService.UpsertMedicalTreatment:input_type -> patient.UpsertMedicalTreatmentRequest
	10, // 32: patient.PatientService.UpsertMedicalSurgery:input_type -> patient.UpsertMedicalSurgeryRequest
	8,  // 33: patient.PatientService.UpsertMedicalPrescription:input_type -> patient.UpsertMedicalPrescriptionRequest
	5,  // 34: patient.PatientService.GetMedicalHistory:input_type -> patient.GetMedicalHistoryRequest
	25, // 35: patient.PatientService.GetMedicalHistoryDetail:input_type -> common.IdRequest
	15, // 36: patient.PatientService.GetPatient:output_type -> patient.GetPatientResponse
	14, // 37: patient.PatientService.ListPatient:output_type -> patient.ListPatientResponse
	26, // 38: patient.PatientService.UpsertPatient:output_type -> common.EmptyResponse
	26, // 39: patient.PatientService.UpsertMedicalRecord:output_type -> common.EmptyResponse
	26, // 40: patient.PatientService.UpsertMedicalTreatment:output_type -> common.EmptyResponse
	26, // 41: patient.PatientService.UpsertMedicalSurgery:output_type -> common.EmptyResponse
	26, // 42: patient.PatientService.UpsertMedicalPrescription:output_type -> common.EmptyResponse
	6,  // 43: patient.PatientService.GetMedicalHistory:output_type -> patient.GetMedicalHistoryResponse
	0,  // 44: patient.PatientService.GetMedicalHistoryDetail:output_type -> patient.GetMedicalHistoryDetailResponse
	36, // [36:45] is the sub-list for method output_type
	27, // [27:36] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_patient_patient_proto_init() }
func file_patient_patient_proto_init() {
	if File_patient_patient_proto != nil {
		return
	}
	file_patient_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_patient_patient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_patient_patient_proto_goTypes,
		DependencyIndexes: file_patient_patient_proto_depIdxs,
		MessageInfos:      file_patient_patient_proto_msgTypes,
	}.Build()
	File_patient_patient_proto = out.File
	file_patient_patient_proto_rawDesc = nil
	file_patient_patient_proto_goTypes = nil
	file_patient_patient_proto_depIdxs = nil
}
