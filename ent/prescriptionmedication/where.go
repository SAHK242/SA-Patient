// Code generated by ent, DO NOT EDIT.

package prescriptionmedication

import (
	"patient/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldLTE(FieldID, id))
}

// PrescriptionID applies equality check predicate on the "prescription_id" field. It's identical to PrescriptionIDEQ.
func PrescriptionID(v uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldEQ(FieldPrescriptionID, v))
}

// MedicationID applies equality check predicate on the "medication_id" field. It's identical to MedicationIDEQ.
func MedicationID(v uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldEQ(FieldMedicationID, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int64) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldEQ(FieldQuantity, v))
}

// PrescriptionIDEQ applies the EQ predicate on the "prescription_id" field.
func PrescriptionIDEQ(v uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldEQ(FieldPrescriptionID, v))
}

// PrescriptionIDNEQ applies the NEQ predicate on the "prescription_id" field.
func PrescriptionIDNEQ(v uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldNEQ(FieldPrescriptionID, v))
}

// PrescriptionIDIn applies the In predicate on the "prescription_id" field.
func PrescriptionIDIn(vs ...uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldIn(FieldPrescriptionID, vs...))
}

// PrescriptionIDNotIn applies the NotIn predicate on the "prescription_id" field.
func PrescriptionIDNotIn(vs ...uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldNotIn(FieldPrescriptionID, vs...))
}

// MedicationIDEQ applies the EQ predicate on the "medication_id" field.
func MedicationIDEQ(v uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldEQ(FieldMedicationID, v))
}

// MedicationIDNEQ applies the NEQ predicate on the "medication_id" field.
func MedicationIDNEQ(v uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldNEQ(FieldMedicationID, v))
}

// MedicationIDIn applies the In predicate on the "medication_id" field.
func MedicationIDIn(vs ...uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldIn(FieldMedicationID, vs...))
}

// MedicationIDNotIn applies the NotIn predicate on the "medication_id" field.
func MedicationIDNotIn(vs ...uuid.UUID) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldNotIn(FieldMedicationID, vs...))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int64) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int64) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int64) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int64) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int64) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int64) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int64) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int64) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.FieldLTE(FieldQuantity, v))
}

// HasMedicalPrescription applies the HasEdge predicate on the "medical_prescription" edge.
func HasMedicalPrescription() predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MedicalPrescriptionTable, MedicalPrescriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMedicalPrescriptionWith applies the HasEdge predicate on the "medical_prescription" edge with a given conditions (other predicates).
func HasMedicalPrescriptionWith(preds ...predicate.MedicalPrescription) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(func(s *sql.Selector) {
		step := newMedicalPrescriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMedication applies the HasEdge predicate on the "medication" edge.
func HasMedication() predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MedicationTable, MedicationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMedicationWith applies the HasEdge predicate on the "medication" edge with a given conditions (other predicates).
func HasMedicationWith(preds ...predicate.Medication) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(func(s *sql.Selector) {
		step := newMedicationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PrescriptionMedication) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PrescriptionMedication) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PrescriptionMedication) predicate.PrescriptionMedication {
	return predicate.PrescriptionMedication(sql.NotPredicates(p))
}
