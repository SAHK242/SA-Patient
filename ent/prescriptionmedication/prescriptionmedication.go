// Code generated by ent, DO NOT EDIT.

package prescriptionmedication

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the prescriptionmedication type in the database.
	Label = "prescription_medication"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPrescriptionID holds the string denoting the prescription_id field in the database.
	FieldPrescriptionID = "prescription_id"
	// FieldMedicationID holds the string denoting the medication_id field in the database.
	FieldMedicationID = "medication_id"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// EdgeMedicalPrescription holds the string denoting the medical_prescription edge name in mutations.
	EdgeMedicalPrescription = "medical_prescription"
	// EdgeMedication holds the string denoting the medication edge name in mutations.
	EdgeMedication = "medication"
	// Table holds the table name of the prescriptionmedication in the database.
	Table = "prescription_medication"
	// MedicalPrescriptionTable is the table that holds the medical_prescription relation/edge.
	MedicalPrescriptionTable = "prescription_medication"
	// MedicalPrescriptionInverseTable is the table name for the MedicalPrescription entity.
	// It exists in this package in order to avoid circular dependency with the "medicalprescription" package.
	MedicalPrescriptionInverseTable = "medical_prescription"
	// MedicalPrescriptionColumn is the table column denoting the medical_prescription relation/edge.
	MedicalPrescriptionColumn = "prescription_id"
	// MedicationTable is the table that holds the medication relation/edge.
	MedicationTable = "prescription_medication"
	// MedicationInverseTable is the table name for the Medication entity.
	// It exists in this package in order to avoid circular dependency with the "medication" package.
	MedicationInverseTable = "medication"
	// MedicationColumn is the table column denoting the medication relation/edge.
	MedicationColumn = "medication_id"
)

// Columns holds all SQL columns for prescriptionmedication fields.
var Columns = []string{
	FieldID,
	FieldPrescriptionID,
	FieldMedicationID,
	FieldQuantity,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultQuantity holds the default value on creation for the "quantity" field.
	DefaultQuantity int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the PrescriptionMedication queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPrescriptionID orders the results by the prescription_id field.
func ByPrescriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrescriptionID, opts...).ToFunc()
}

// ByMedicationID orders the results by the medication_id field.
func ByMedicationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMedicationID, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByMedicalPrescriptionField orders the results by medical_prescription field.
func ByMedicalPrescriptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMedicalPrescriptionStep(), sql.OrderByField(field, opts...))
	}
}

// ByMedicationField orders the results by medication field.
func ByMedicationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMedicationStep(), sql.OrderByField(field, opts...))
	}
}
func newMedicalPrescriptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MedicalPrescriptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MedicalPrescriptionTable, MedicalPrescriptionColumn),
	)
}
func newMedicationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MedicationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MedicationTable, MedicationColumn),
	)
}
