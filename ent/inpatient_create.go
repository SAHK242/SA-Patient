// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"patient/ent/inpatient"
	"patient/ent/patient"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// InpatientCreate is the builder for creating a Inpatient entity.
type InpatientCreate struct {
	config
	mutation *InpatientMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPatientID sets the "patient_id" field.
func (ic *InpatientCreate) SetPatientID(u uuid.UUID) *InpatientCreate {
	ic.mutation.SetPatientID(u)
	return ic
}

// SetRegisterDate sets the "register_date" field.
func (ic *InpatientCreate) SetRegisterDate(t time.Time) *InpatientCreate {
	ic.mutation.SetRegisterDate(t)
	return ic
}

// SetID sets the "id" field.
func (ic *InpatientCreate) SetID(u uuid.UUID) *InpatientCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *InpatientCreate) SetNillableID(u *uuid.UUID) *InpatientCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// SetPatient sets the "patient" edge to the Patient entity.
func (ic *InpatientCreate) SetPatient(p *Patient) *InpatientCreate {
	return ic.SetPatientID(p.ID)
}

// Mutation returns the InpatientMutation object of the builder.
func (ic *InpatientCreate) Mutation() *InpatientMutation {
	return ic.mutation
}

// Save creates the Inpatient in the database.
func (ic *InpatientCreate) Save(ctx context.Context) (*Inpatient, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InpatientCreate) SaveX(ctx context.Context) *Inpatient {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InpatientCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InpatientCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InpatientCreate) defaults() {
	if _, ok := ic.mutation.ID(); !ok {
		v := inpatient.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InpatientCreate) check() error {
	if _, ok := ic.mutation.PatientID(); !ok {
		return &ValidationError{Name: "patient_id", err: errors.New(`ent: missing required field "Inpatient.patient_id"`)}
	}
	if _, ok := ic.mutation.RegisterDate(); !ok {
		return &ValidationError{Name: "register_date", err: errors.New(`ent: missing required field "Inpatient.register_date"`)}
	}
	if len(ic.mutation.PatientIDs()) == 0 {
		return &ValidationError{Name: "patient", err: errors.New(`ent: missing required edge "Inpatient.patient"`)}
	}
	return nil
}

func (ic *InpatientCreate) sqlSave(ctx context.Context) (*Inpatient, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InpatientCreate) createSpec() (*Inpatient, *sqlgraph.CreateSpec) {
	var (
		_node = &Inpatient{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(inpatient.Table, sqlgraph.NewFieldSpec(inpatient.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ic.conflict
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.RegisterDate(); ok {
		_spec.SetField(inpatient.FieldRegisterDate, field.TypeTime, value)
		_node.RegisterDate = value
	}
	if nodes := ic.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inpatient.PatientTable,
			Columns: []string{inpatient.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PatientID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Inpatient.Create().
//		SetPatientID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InpatientUpsert) {
//			SetPatientID(v+v).
//		}).
//		Exec(ctx)
func (ic *InpatientCreate) OnConflict(opts ...sql.ConflictOption) *InpatientUpsertOne {
	ic.conflict = opts
	return &InpatientUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Inpatient.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *InpatientCreate) OnConflictColumns(columns ...string) *InpatientUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &InpatientUpsertOne{
		create: ic,
	}
}

type (
	// InpatientUpsertOne is the builder for "upsert"-ing
	//  one Inpatient node.
	InpatientUpsertOne struct {
		create *InpatientCreate
	}

	// InpatientUpsert is the "OnConflict" setter.
	InpatientUpsert struct {
		*sql.UpdateSet
	}
)

// SetPatientID sets the "patient_id" field.
func (u *InpatientUpsert) SetPatientID(v uuid.UUID) *InpatientUpsert {
	u.Set(inpatient.FieldPatientID, v)
	return u
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *InpatientUpsert) UpdatePatientID() *InpatientUpsert {
	u.SetExcluded(inpatient.FieldPatientID)
	return u
}

// SetRegisterDate sets the "register_date" field.
func (u *InpatientUpsert) SetRegisterDate(v time.Time) *InpatientUpsert {
	u.Set(inpatient.FieldRegisterDate, v)
	return u
}

// UpdateRegisterDate sets the "register_date" field to the value that was provided on create.
func (u *InpatientUpsert) UpdateRegisterDate() *InpatientUpsert {
	u.SetExcluded(inpatient.FieldRegisterDate)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Inpatient.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(inpatient.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InpatientUpsertOne) UpdateNewValues() *InpatientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(inpatient.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Inpatient.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InpatientUpsertOne) Ignore() *InpatientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InpatientUpsertOne) DoNothing() *InpatientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InpatientCreate.OnConflict
// documentation for more info.
func (u *InpatientUpsertOne) Update(set func(*InpatientUpsert)) *InpatientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InpatientUpsert{UpdateSet: update})
	}))
	return u
}

// SetPatientID sets the "patient_id" field.
func (u *InpatientUpsertOne) SetPatientID(v uuid.UUID) *InpatientUpsertOne {
	return u.Update(func(s *InpatientUpsert) {
		s.SetPatientID(v)
	})
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *InpatientUpsertOne) UpdatePatientID() *InpatientUpsertOne {
	return u.Update(func(s *InpatientUpsert) {
		s.UpdatePatientID()
	})
}

// SetRegisterDate sets the "register_date" field.
func (u *InpatientUpsertOne) SetRegisterDate(v time.Time) *InpatientUpsertOne {
	return u.Update(func(s *InpatientUpsert) {
		s.SetRegisterDate(v)
	})
}

// UpdateRegisterDate sets the "register_date" field to the value that was provided on create.
func (u *InpatientUpsertOne) UpdateRegisterDate() *InpatientUpsertOne {
	return u.Update(func(s *InpatientUpsert) {
		s.UpdateRegisterDate()
	})
}

// Exec executes the query.
func (u *InpatientUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InpatientCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InpatientUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InpatientUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: InpatientUpsertOne.ID is not supported by MySQL driver. Use InpatientUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InpatientUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InpatientCreateBulk is the builder for creating many Inpatient entities in bulk.
type InpatientCreateBulk struct {
	config
	err      error
	builders []*InpatientCreate
	conflict []sql.ConflictOption
}

// Save creates the Inpatient entities in the database.
func (icb *InpatientCreateBulk) Save(ctx context.Context) ([]*Inpatient, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Inpatient, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InpatientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InpatientCreateBulk) SaveX(ctx context.Context) []*Inpatient {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InpatientCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InpatientCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Inpatient.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InpatientUpsert) {
//			SetPatientID(v+v).
//		}).
//		Exec(ctx)
func (icb *InpatientCreateBulk) OnConflict(opts ...sql.ConflictOption) *InpatientUpsertBulk {
	icb.conflict = opts
	return &InpatientUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Inpatient.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *InpatientCreateBulk) OnConflictColumns(columns ...string) *InpatientUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &InpatientUpsertBulk{
		create: icb,
	}
}

// InpatientUpsertBulk is the builder for "upsert"-ing
// a bulk of Inpatient nodes.
type InpatientUpsertBulk struct {
	create *InpatientCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Inpatient.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(inpatient.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InpatientUpsertBulk) UpdateNewValues() *InpatientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(inpatient.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Inpatient.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InpatientUpsertBulk) Ignore() *InpatientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InpatientUpsertBulk) DoNothing() *InpatientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InpatientCreateBulk.OnConflict
// documentation for more info.
func (u *InpatientUpsertBulk) Update(set func(*InpatientUpsert)) *InpatientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InpatientUpsert{UpdateSet: update})
	}))
	return u
}

// SetPatientID sets the "patient_id" field.
func (u *InpatientUpsertBulk) SetPatientID(v uuid.UUID) *InpatientUpsertBulk {
	return u.Update(func(s *InpatientUpsert) {
		s.SetPatientID(v)
	})
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *InpatientUpsertBulk) UpdatePatientID() *InpatientUpsertBulk {
	return u.Update(func(s *InpatientUpsert) {
		s.UpdatePatientID()
	})
}

// SetRegisterDate sets the "register_date" field.
func (u *InpatientUpsertBulk) SetRegisterDate(v time.Time) *InpatientUpsertBulk {
	return u.Update(func(s *InpatientUpsert) {
		s.SetRegisterDate(v)
	})
}

// UpdateRegisterDate sets the "register_date" field to the value that was provided on create.
func (u *InpatientUpsertBulk) UpdateRegisterDate() *InpatientUpsertBulk {
	return u.Update(func(s *InpatientUpsert) {
		s.UpdateRegisterDate()
	})
}

// Exec executes the query.
func (u *InpatientUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InpatientCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InpatientCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InpatientUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
