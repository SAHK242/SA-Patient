// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"patient/ent/outpatient"
	"patient/ent/patient"
	"patient/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OutpatientUpdate is the builder for updating Outpatient entities.
type OutpatientUpdate struct {
	config
	hooks    []Hook
	mutation *OutpatientMutation
}

// Where appends a list predicates to the OutpatientUpdate builder.
func (ou *OutpatientUpdate) Where(ps ...predicate.Outpatient) *OutpatientUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetPatientID sets the "patient_id" field.
func (ou *OutpatientUpdate) SetPatientID(u uuid.UUID) *OutpatientUpdate {
	ou.mutation.SetPatientID(u)
	return ou
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (ou *OutpatientUpdate) SetNillablePatientID(u *uuid.UUID) *OutpatientUpdate {
	if u != nil {
		ou.SetPatientID(*u)
	}
	return ou
}

// SetRegisterDate sets the "register_date" field.
func (ou *OutpatientUpdate) SetRegisterDate(t time.Time) *OutpatientUpdate {
	ou.mutation.SetRegisterDate(t)
	return ou
}

// SetNillableRegisterDate sets the "register_date" field if the given value is not nil.
func (ou *OutpatientUpdate) SetNillableRegisterDate(t *time.Time) *OutpatientUpdate {
	if t != nil {
		ou.SetRegisterDate(*t)
	}
	return ou
}

// SetPatient sets the "patient" edge to the Patient entity.
func (ou *OutpatientUpdate) SetPatient(p *Patient) *OutpatientUpdate {
	return ou.SetPatientID(p.ID)
}

// Mutation returns the OutpatientMutation object of the builder.
func (ou *OutpatientUpdate) Mutation() *OutpatientMutation {
	return ou.mutation
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (ou *OutpatientUpdate) ClearPatient() *OutpatientUpdate {
	ou.mutation.ClearPatient()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OutpatientUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OutpatientUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OutpatientUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OutpatientUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OutpatientUpdate) check() error {
	if ou.mutation.PatientCleared() && len(ou.mutation.PatientIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Outpatient.patient"`)
	}
	return nil
}

func (ou *OutpatientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(outpatient.Table, outpatient.Columns, sqlgraph.NewFieldSpec(outpatient.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.RegisterDate(); ok {
		_spec.SetField(outpatient.FieldRegisterDate, field.TypeTime, value)
	}
	if ou.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   outpatient.PatientTable,
			Columns: []string{outpatient.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   outpatient.PatientTable,
			Columns: []string{outpatient.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outpatient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OutpatientUpdateOne is the builder for updating a single Outpatient entity.
type OutpatientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OutpatientMutation
}

// SetPatientID sets the "patient_id" field.
func (ouo *OutpatientUpdateOne) SetPatientID(u uuid.UUID) *OutpatientUpdateOne {
	ouo.mutation.SetPatientID(u)
	return ouo
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (ouo *OutpatientUpdateOne) SetNillablePatientID(u *uuid.UUID) *OutpatientUpdateOne {
	if u != nil {
		ouo.SetPatientID(*u)
	}
	return ouo
}

// SetRegisterDate sets the "register_date" field.
func (ouo *OutpatientUpdateOne) SetRegisterDate(t time.Time) *OutpatientUpdateOne {
	ouo.mutation.SetRegisterDate(t)
	return ouo
}

// SetNillableRegisterDate sets the "register_date" field if the given value is not nil.
func (ouo *OutpatientUpdateOne) SetNillableRegisterDate(t *time.Time) *OutpatientUpdateOne {
	if t != nil {
		ouo.SetRegisterDate(*t)
	}
	return ouo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (ouo *OutpatientUpdateOne) SetPatient(p *Patient) *OutpatientUpdateOne {
	return ouo.SetPatientID(p.ID)
}

// Mutation returns the OutpatientMutation object of the builder.
func (ouo *OutpatientUpdateOne) Mutation() *OutpatientMutation {
	return ouo.mutation
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (ouo *OutpatientUpdateOne) ClearPatient() *OutpatientUpdateOne {
	ouo.mutation.ClearPatient()
	return ouo
}

// Where appends a list predicates to the OutpatientUpdate builder.
func (ouo *OutpatientUpdateOne) Where(ps ...predicate.Outpatient) *OutpatientUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OutpatientUpdateOne) Select(field string, fields ...string) *OutpatientUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Outpatient entity.
func (ouo *OutpatientUpdateOne) Save(ctx context.Context) (*Outpatient, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OutpatientUpdateOne) SaveX(ctx context.Context) *Outpatient {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OutpatientUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OutpatientUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OutpatientUpdateOne) check() error {
	if ouo.mutation.PatientCleared() && len(ouo.mutation.PatientIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Outpatient.patient"`)
	}
	return nil
}

func (ouo *OutpatientUpdateOne) sqlSave(ctx context.Context) (_node *Outpatient, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(outpatient.Table, outpatient.Columns, sqlgraph.NewFieldSpec(outpatient.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Outpatient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, outpatient.FieldID)
		for _, f := range fields {
			if !outpatient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != outpatient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.RegisterDate(); ok {
		_spec.SetField(outpatient.FieldRegisterDate, field.TypeTime, value)
	}
	if ouo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   outpatient.PatientTable,
			Columns: []string{outpatient.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   outpatient.PatientTable,
			Columns: []string{outpatient.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Outpatient{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outpatient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
