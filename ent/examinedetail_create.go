// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"patient/ent/examinedetail"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamineDetailCreate is the builder for creating a ExamineDetail entity.
type ExamineDetailCreate struct {
	config
	mutation *ExamineDetailMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// Mutation returns the ExamineDetailMutation object of the builder.
func (edc *ExamineDetailCreate) Mutation() *ExamineDetailMutation {
	return edc.mutation
}

// Save creates the ExamineDetail in the database.
func (edc *ExamineDetailCreate) Save(ctx context.Context) (*ExamineDetail, error) {
	return withHooks(ctx, edc.sqlSave, edc.mutation, edc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (edc *ExamineDetailCreate) SaveX(ctx context.Context) *ExamineDetail {
	v, err := edc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (edc *ExamineDetailCreate) Exec(ctx context.Context) error {
	_, err := edc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edc *ExamineDetailCreate) ExecX(ctx context.Context) {
	if err := edc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (edc *ExamineDetailCreate) check() error {
	return nil
}

func (edc *ExamineDetailCreate) sqlSave(ctx context.Context) (*ExamineDetail, error) {
	if err := edc.check(); err != nil {
		return nil, err
	}
	_node, _spec := edc.createSpec()
	if err := sqlgraph.CreateNode(ctx, edc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	edc.mutation.id = &_node.ID
	edc.mutation.done = true
	return _node, nil
}

func (edc *ExamineDetailCreate) createSpec() (*ExamineDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &ExamineDetail{config: edc.config}
		_spec = sqlgraph.NewCreateSpec(examinedetail.Table, sqlgraph.NewFieldSpec(examinedetail.FieldID, field.TypeInt))
	)
	_spec.OnConflict = edc.conflict
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ExamineDetail.Create().
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (edc *ExamineDetailCreate) OnConflict(opts ...sql.ConflictOption) *ExamineDetailUpsertOne {
	edc.conflict = opts
	return &ExamineDetailUpsertOne{
		create: edc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ExamineDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (edc *ExamineDetailCreate) OnConflictColumns(columns ...string) *ExamineDetailUpsertOne {
	edc.conflict = append(edc.conflict, sql.ConflictColumns(columns...))
	return &ExamineDetailUpsertOne{
		create: edc,
	}
}

type (
	// ExamineDetailUpsertOne is the builder for "upsert"-ing
	//  one ExamineDetail node.
	ExamineDetailUpsertOne struct {
		create *ExamineDetailCreate
	}

	// ExamineDetailUpsert is the "OnConflict" setter.
	ExamineDetailUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ExamineDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ExamineDetailUpsertOne) UpdateNewValues() *ExamineDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ExamineDetail.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ExamineDetailUpsertOne) Ignore() *ExamineDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExamineDetailUpsertOne) DoNothing() *ExamineDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExamineDetailCreate.OnConflict
// documentation for more info.
func (u *ExamineDetailUpsertOne) Update(set func(*ExamineDetailUpsert)) *ExamineDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExamineDetailUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *ExamineDetailUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExamineDetailCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExamineDetailUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ExamineDetailUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ExamineDetailUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ExamineDetailCreateBulk is the builder for creating many ExamineDetail entities in bulk.
type ExamineDetailCreateBulk struct {
	config
	err      error
	builders []*ExamineDetailCreate
	conflict []sql.ConflictOption
}

// Save creates the ExamineDetail entities in the database.
func (edcb *ExamineDetailCreateBulk) Save(ctx context.Context) ([]*ExamineDetail, error) {
	if edcb.err != nil {
		return nil, edcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(edcb.builders))
	nodes := make([]*ExamineDetail, len(edcb.builders))
	mutators := make([]Mutator, len(edcb.builders))
	for i := range edcb.builders {
		func(i int, root context.Context) {
			builder := edcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamineDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, edcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = edcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, edcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, edcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (edcb *ExamineDetailCreateBulk) SaveX(ctx context.Context) []*ExamineDetail {
	v, err := edcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (edcb *ExamineDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := edcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edcb *ExamineDetailCreateBulk) ExecX(ctx context.Context) {
	if err := edcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ExamineDetail.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (edcb *ExamineDetailCreateBulk) OnConflict(opts ...sql.ConflictOption) *ExamineDetailUpsertBulk {
	edcb.conflict = opts
	return &ExamineDetailUpsertBulk{
		create: edcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ExamineDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (edcb *ExamineDetailCreateBulk) OnConflictColumns(columns ...string) *ExamineDetailUpsertBulk {
	edcb.conflict = append(edcb.conflict, sql.ConflictColumns(columns...))
	return &ExamineDetailUpsertBulk{
		create: edcb,
	}
}

// ExamineDetailUpsertBulk is the builder for "upsert"-ing
// a bulk of ExamineDetail nodes.
type ExamineDetailUpsertBulk struct {
	create *ExamineDetailCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ExamineDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ExamineDetailUpsertBulk) UpdateNewValues() *ExamineDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ExamineDetail.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ExamineDetailUpsertBulk) Ignore() *ExamineDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExamineDetailUpsertBulk) DoNothing() *ExamineDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExamineDetailCreateBulk.OnConflict
// documentation for more info.
func (u *ExamineDetailUpsertBulk) Update(set func(*ExamineDetailUpsert)) *ExamineDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExamineDetailUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *ExamineDetailUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ExamineDetailCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExamineDetailCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExamineDetailUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
