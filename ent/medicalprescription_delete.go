// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"patient/ent/medicalprescription"
	"patient/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MedicalPrescriptionDelete is the builder for deleting a MedicalPrescription entity.
type MedicalPrescriptionDelete struct {
	config
	hooks    []Hook
	mutation *MedicalPrescriptionMutation
}

// Where appends a list predicates to the MedicalPrescriptionDelete builder.
func (mpd *MedicalPrescriptionDelete) Where(ps ...predicate.MedicalPrescription) *MedicalPrescriptionDelete {
	mpd.mutation.Where(ps...)
	return mpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mpd *MedicalPrescriptionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mpd.sqlExec, mpd.mutation, mpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mpd *MedicalPrescriptionDelete) ExecX(ctx context.Context) int {
	n, err := mpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mpd *MedicalPrescriptionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(medicalprescription.Table, sqlgraph.NewFieldSpec(medicalprescription.FieldID, field.TypeUUID))
	if ps := mpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mpd.mutation.done = true
	return affected, err
}

// MedicalPrescriptionDeleteOne is the builder for deleting a single MedicalPrescription entity.
type MedicalPrescriptionDeleteOne struct {
	mpd *MedicalPrescriptionDelete
}

// Where appends a list predicates to the MedicalPrescriptionDelete builder.
func (mpdo *MedicalPrescriptionDeleteOne) Where(ps ...predicate.MedicalPrescription) *MedicalPrescriptionDeleteOne {
	mpdo.mpd.mutation.Where(ps...)
	return mpdo
}

// Exec executes the deletion query.
func (mpdo *MedicalPrescriptionDeleteOne) Exec(ctx context.Context) error {
	n, err := mpdo.mpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{medicalprescription.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mpdo *MedicalPrescriptionDeleteOne) ExecX(ctx context.Context) {
	if err := mpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
