// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"patient/ent/medicalhistories"
	"patient/ent/medicalprescription"
	"patient/ent/medicalsurgery"
	"patient/ent/medicaltreatment"
	"patient/ent/patient"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MedicalHistoriesCreate is the builder for creating a MedicalHistories entity.
type MedicalHistoriesCreate struct {
	config
	mutation *MedicalHistoriesMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPatientID sets the "patient_id" field.
func (mhc *MedicalHistoriesCreate) SetPatientID(u uuid.UUID) *MedicalHistoriesCreate {
	mhc.mutation.SetPatientID(u)
	return mhc
}

// SetReason sets the "reason" field.
func (mhc *MedicalHistoriesCreate) SetReason(s string) *MedicalHistoriesCreate {
	mhc.mutation.SetReason(s)
	return mhc
}

// SetDiagnosis sets the "diagnosis" field.
func (mhc *MedicalHistoriesCreate) SetDiagnosis(s string) *MedicalHistoriesCreate {
	mhc.mutation.SetDiagnosis(s)
	return mhc
}

// SetHasTreatment sets the "has_treatment" field.
func (mhc *MedicalHistoriesCreate) SetHasTreatment(b bool) *MedicalHistoriesCreate {
	mhc.mutation.SetHasTreatment(b)
	return mhc
}

// SetNillableHasTreatment sets the "has_treatment" field if the given value is not nil.
func (mhc *MedicalHistoriesCreate) SetNillableHasTreatment(b *bool) *MedicalHistoriesCreate {
	if b != nil {
		mhc.SetHasTreatment(*b)
	}
	return mhc
}

// SetHasSurgery sets the "has_surgery" field.
func (mhc *MedicalHistoriesCreate) SetHasSurgery(b bool) *MedicalHistoriesCreate {
	mhc.mutation.SetHasSurgery(b)
	return mhc
}

// SetNillableHasSurgery sets the "has_surgery" field if the given value is not nil.
func (mhc *MedicalHistoriesCreate) SetNillableHasSurgery(b *bool) *MedicalHistoriesCreate {
	if b != nil {
		mhc.SetHasSurgery(*b)
	}
	return mhc
}

// SetHasPrescription sets the "has_prescription" field.
func (mhc *MedicalHistoriesCreate) SetHasPrescription(b bool) *MedicalHistoriesCreate {
	mhc.mutation.SetHasPrescription(b)
	return mhc
}

// SetNillableHasPrescription sets the "has_prescription" field if the given value is not nil.
func (mhc *MedicalHistoriesCreate) SetNillableHasPrescription(b *bool) *MedicalHistoriesCreate {
	if b != nil {
		mhc.SetHasPrescription(*b)
	}
	return mhc
}

// SetDoctorNotes sets the "doctor_notes" field.
func (mhc *MedicalHistoriesCreate) SetDoctorNotes(s string) *MedicalHistoriesCreate {
	mhc.mutation.SetDoctorNotes(s)
	return mhc
}

// SetNillableDoctorNotes sets the "doctor_notes" field if the given value is not nil.
func (mhc *MedicalHistoriesCreate) SetNillableDoctorNotes(s *string) *MedicalHistoriesCreate {
	if s != nil {
		mhc.SetDoctorNotes(*s)
	}
	return mhc
}

// SetMedicalEndDate sets the "medical_end_date" field.
func (mhc *MedicalHistoriesCreate) SetMedicalEndDate(t time.Time) *MedicalHistoriesCreate {
	mhc.mutation.SetMedicalEndDate(t)
	return mhc
}

// SetNillableMedicalEndDate sets the "medical_end_date" field if the given value is not nil.
func (mhc *MedicalHistoriesCreate) SetNillableMedicalEndDate(t *time.Time) *MedicalHistoriesCreate {
	if t != nil {
		mhc.SetMedicalEndDate(*t)
	}
	return mhc
}

// SetCreatedAt sets the "created_at" field.
func (mhc *MedicalHistoriesCreate) SetCreatedAt(t time.Time) *MedicalHistoriesCreate {
	mhc.mutation.SetCreatedAt(t)
	return mhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mhc *MedicalHistoriesCreate) SetNillableCreatedAt(t *time.Time) *MedicalHistoriesCreate {
	if t != nil {
		mhc.SetCreatedAt(*t)
	}
	return mhc
}

// SetUpdatedAt sets the "updated_at" field.
func (mhc *MedicalHistoriesCreate) SetUpdatedAt(t time.Time) *MedicalHistoriesCreate {
	mhc.mutation.SetUpdatedAt(t)
	return mhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mhc *MedicalHistoriesCreate) SetNillableUpdatedAt(t *time.Time) *MedicalHistoriesCreate {
	if t != nil {
		mhc.SetUpdatedAt(*t)
	}
	return mhc
}

// SetCreatedBy sets the "created_by" field.
func (mhc *MedicalHistoriesCreate) SetCreatedBy(u uuid.UUID) *MedicalHistoriesCreate {
	mhc.mutation.SetCreatedBy(u)
	return mhc
}

// SetUpdatedBy sets the "updated_by" field.
func (mhc *MedicalHistoriesCreate) SetUpdatedBy(u uuid.UUID) *MedicalHistoriesCreate {
	mhc.mutation.SetUpdatedBy(u)
	return mhc
}

// SetID sets the "id" field.
func (mhc *MedicalHistoriesCreate) SetID(u uuid.UUID) *MedicalHistoriesCreate {
	mhc.mutation.SetID(u)
	return mhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mhc *MedicalHistoriesCreate) SetNillableID(u *uuid.UUID) *MedicalHistoriesCreate {
	if u != nil {
		mhc.SetID(*u)
	}
	return mhc
}

// SetPatient sets the "patient" edge to the Patient entity.
func (mhc *MedicalHistoriesCreate) SetPatient(p *Patient) *MedicalHistoriesCreate {
	return mhc.SetPatientID(p.ID)
}

// AddMedicalPrescriptionIDs adds the "medical_prescription" edge to the MedicalPrescription entity by IDs.
func (mhc *MedicalHistoriesCreate) AddMedicalPrescriptionIDs(ids ...uuid.UUID) *MedicalHistoriesCreate {
	mhc.mutation.AddMedicalPrescriptionIDs(ids...)
	return mhc
}

// AddMedicalPrescription adds the "medical_prescription" edges to the MedicalPrescription entity.
func (mhc *MedicalHistoriesCreate) AddMedicalPrescription(m ...*MedicalPrescription) *MedicalHistoriesCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mhc.AddMedicalPrescriptionIDs(ids...)
}

// AddMedicalTreatmentIDs adds the "medical_treatment" edge to the MedicalTreatment entity by IDs.
func (mhc *MedicalHistoriesCreate) AddMedicalTreatmentIDs(ids ...uuid.UUID) *MedicalHistoriesCreate {
	mhc.mutation.AddMedicalTreatmentIDs(ids...)
	return mhc
}

// AddMedicalTreatment adds the "medical_treatment" edges to the MedicalTreatment entity.
func (mhc *MedicalHistoriesCreate) AddMedicalTreatment(m ...*MedicalTreatment) *MedicalHistoriesCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mhc.AddMedicalTreatmentIDs(ids...)
}

// AddMedicalSurgeryIDs adds the "medical_surgery" edge to the MedicalSurgery entity by IDs.
func (mhc *MedicalHistoriesCreate) AddMedicalSurgeryIDs(ids ...uuid.UUID) *MedicalHistoriesCreate {
	mhc.mutation.AddMedicalSurgeryIDs(ids...)
	return mhc
}

// AddMedicalSurgery adds the "medical_surgery" edges to the MedicalSurgery entity.
func (mhc *MedicalHistoriesCreate) AddMedicalSurgery(m ...*MedicalSurgery) *MedicalHistoriesCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mhc.AddMedicalSurgeryIDs(ids...)
}

// Mutation returns the MedicalHistoriesMutation object of the builder.
func (mhc *MedicalHistoriesCreate) Mutation() *MedicalHistoriesMutation {
	return mhc.mutation
}

// Save creates the MedicalHistories in the database.
func (mhc *MedicalHistoriesCreate) Save(ctx context.Context) (*MedicalHistories, error) {
	mhc.defaults()
	return withHooks(ctx, mhc.sqlSave, mhc.mutation, mhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mhc *MedicalHistoriesCreate) SaveX(ctx context.Context) *MedicalHistories {
	v, err := mhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mhc *MedicalHistoriesCreate) Exec(ctx context.Context) error {
	_, err := mhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mhc *MedicalHistoriesCreate) ExecX(ctx context.Context) {
	if err := mhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mhc *MedicalHistoriesCreate) defaults() {
	if _, ok := mhc.mutation.HasTreatment(); !ok {
		v := medicalhistories.DefaultHasTreatment
		mhc.mutation.SetHasTreatment(v)
	}
	if _, ok := mhc.mutation.HasSurgery(); !ok {
		v := medicalhistories.DefaultHasSurgery
		mhc.mutation.SetHasSurgery(v)
	}
	if _, ok := mhc.mutation.HasPrescription(); !ok {
		v := medicalhistories.DefaultHasPrescription
		mhc.mutation.SetHasPrescription(v)
	}
	if _, ok := mhc.mutation.CreatedAt(); !ok {
		v := medicalhistories.DefaultCreatedAt()
		mhc.mutation.SetCreatedAt(v)
	}
	if _, ok := mhc.mutation.UpdatedAt(); !ok {
		v := medicalhistories.DefaultUpdatedAt()
		mhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mhc.mutation.ID(); !ok {
		v := medicalhistories.DefaultID()
		mhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mhc *MedicalHistoriesCreate) check() error {
	if _, ok := mhc.mutation.PatientID(); !ok {
		return &ValidationError{Name: "patient_id", err: errors.New(`ent: missing required field "MedicalHistories.patient_id"`)}
	}
	if _, ok := mhc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "MedicalHistories.reason"`)}
	}
	if v, ok := mhc.mutation.Reason(); ok {
		if err := medicalhistories.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "MedicalHistories.reason": %w`, err)}
		}
	}
	if _, ok := mhc.mutation.Diagnosis(); !ok {
		return &ValidationError{Name: "diagnosis", err: errors.New(`ent: missing required field "MedicalHistories.diagnosis"`)}
	}
	if v, ok := mhc.mutation.Diagnosis(); ok {
		if err := medicalhistories.DiagnosisValidator(v); err != nil {
			return &ValidationError{Name: "diagnosis", err: fmt.Errorf(`ent: validator failed for field "MedicalHistories.diagnosis": %w`, err)}
		}
	}
	if _, ok := mhc.mutation.HasTreatment(); !ok {
		return &ValidationError{Name: "has_treatment", err: errors.New(`ent: missing required field "MedicalHistories.has_treatment"`)}
	}
	if _, ok := mhc.mutation.HasSurgery(); !ok {
		return &ValidationError{Name: "has_surgery", err: errors.New(`ent: missing required field "MedicalHistories.has_surgery"`)}
	}
	if _, ok := mhc.mutation.HasPrescription(); !ok {
		return &ValidationError{Name: "has_prescription", err: errors.New(`ent: missing required field "MedicalHistories.has_prescription"`)}
	}
	if _, ok := mhc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MedicalHistories.created_at"`)}
	}
	if _, ok := mhc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MedicalHistories.updated_at"`)}
	}
	if _, ok := mhc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "MedicalHistories.created_by"`)}
	}
	if _, ok := mhc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "MedicalHistories.updated_by"`)}
	}
	if len(mhc.mutation.PatientIDs()) == 0 {
		return &ValidationError{Name: "patient", err: errors.New(`ent: missing required edge "MedicalHistories.patient"`)}
	}
	return nil
}

func (mhc *MedicalHistoriesCreate) sqlSave(ctx context.Context) (*MedicalHistories, error) {
	if err := mhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mhc.mutation.id = &_node.ID
	mhc.mutation.done = true
	return _node, nil
}

func (mhc *MedicalHistoriesCreate) createSpec() (*MedicalHistories, *sqlgraph.CreateSpec) {
	var (
		_node = &MedicalHistories{config: mhc.config}
		_spec = sqlgraph.NewCreateSpec(medicalhistories.Table, sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = mhc.conflict
	if id, ok := mhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mhc.mutation.Reason(); ok {
		_spec.SetField(medicalhistories.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := mhc.mutation.Diagnosis(); ok {
		_spec.SetField(medicalhistories.FieldDiagnosis, field.TypeString, value)
		_node.Diagnosis = value
	}
	if value, ok := mhc.mutation.HasTreatment(); ok {
		_spec.SetField(medicalhistories.FieldHasTreatment, field.TypeBool, value)
		_node.HasTreatment = value
	}
	if value, ok := mhc.mutation.HasSurgery(); ok {
		_spec.SetField(medicalhistories.FieldHasSurgery, field.TypeBool, value)
		_node.HasSurgery = value
	}
	if value, ok := mhc.mutation.HasPrescription(); ok {
		_spec.SetField(medicalhistories.FieldHasPrescription, field.TypeBool, value)
		_node.HasPrescription = value
	}
	if value, ok := mhc.mutation.DoctorNotes(); ok {
		_spec.SetField(medicalhistories.FieldDoctorNotes, field.TypeString, value)
		_node.DoctorNotes = value
	}
	if value, ok := mhc.mutation.MedicalEndDate(); ok {
		_spec.SetField(medicalhistories.FieldMedicalEndDate, field.TypeTime, value)
		_node.MedicalEndDate = value
	}
	if value, ok := mhc.mutation.CreatedAt(); ok {
		_spec.SetField(medicalhistories.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mhc.mutation.UpdatedAt(); ok {
		_spec.SetField(medicalhistories.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mhc.mutation.CreatedBy(); ok {
		_spec.SetField(medicalhistories.FieldCreatedBy, field.TypeUUID, value)
		_node.CreatedBy = value
	}
	if value, ok := mhc.mutation.UpdatedBy(); ok {
		_spec.SetField(medicalhistories.FieldUpdatedBy, field.TypeUUID, value)
		_node.UpdatedBy = value
	}
	if nodes := mhc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalhistories.PatientTable,
			Columns: []string{medicalhistories.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PatientID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mhc.mutation.MedicalPrescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalPrescriptionTable,
			Columns: []string{medicalhistories.MedicalPrescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalprescription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mhc.mutation.MedicalTreatmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalTreatmentTable,
			Columns: []string{medicalhistories.MedicalTreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicaltreatment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mhc.mutation.MedicalSurgeryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalSurgeryTable,
			Columns: []string{medicalhistories.MedicalSurgeryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalsurgery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MedicalHistories.Create().
//		SetPatientID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MedicalHistoriesUpsert) {
//			SetPatientID(v+v).
//		}).
//		Exec(ctx)
func (mhc *MedicalHistoriesCreate) OnConflict(opts ...sql.ConflictOption) *MedicalHistoriesUpsertOne {
	mhc.conflict = opts
	return &MedicalHistoriesUpsertOne{
		create: mhc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MedicalHistories.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mhc *MedicalHistoriesCreate) OnConflictColumns(columns ...string) *MedicalHistoriesUpsertOne {
	mhc.conflict = append(mhc.conflict, sql.ConflictColumns(columns...))
	return &MedicalHistoriesUpsertOne{
		create: mhc,
	}
}

type (
	// MedicalHistoriesUpsertOne is the builder for "upsert"-ing
	//  one MedicalHistories node.
	MedicalHistoriesUpsertOne struct {
		create *MedicalHistoriesCreate
	}

	// MedicalHistoriesUpsert is the "OnConflict" setter.
	MedicalHistoriesUpsert struct {
		*sql.UpdateSet
	}
)

// SetPatientID sets the "patient_id" field.
func (u *MedicalHistoriesUpsert) SetPatientID(v uuid.UUID) *MedicalHistoriesUpsert {
	u.Set(medicalhistories.FieldPatientID, v)
	return u
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *MedicalHistoriesUpsert) UpdatePatientID() *MedicalHistoriesUpsert {
	u.SetExcluded(medicalhistories.FieldPatientID)
	return u
}

// SetReason sets the "reason" field.
func (u *MedicalHistoriesUpsert) SetReason(v string) *MedicalHistoriesUpsert {
	u.Set(medicalhistories.FieldReason, v)
	return u
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *MedicalHistoriesUpsert) UpdateReason() *MedicalHistoriesUpsert {
	u.SetExcluded(medicalhistories.FieldReason)
	return u
}

// SetDiagnosis sets the "diagnosis" field.
func (u *MedicalHistoriesUpsert) SetDiagnosis(v string) *MedicalHistoriesUpsert {
	u.Set(medicalhistories.FieldDiagnosis, v)
	return u
}

// UpdateDiagnosis sets the "diagnosis" field to the value that was provided on create.
func (u *MedicalHistoriesUpsert) UpdateDiagnosis() *MedicalHistoriesUpsert {
	u.SetExcluded(medicalhistories.FieldDiagnosis)
	return u
}

// SetHasTreatment sets the "has_treatment" field.
func (u *MedicalHistoriesUpsert) SetHasTreatment(v bool) *MedicalHistoriesUpsert {
	u.Set(medicalhistories.FieldHasTreatment, v)
	return u
}

// UpdateHasTreatment sets the "has_treatment" field to the value that was provided on create.
func (u *MedicalHistoriesUpsert) UpdateHasTreatment() *MedicalHistoriesUpsert {
	u.SetExcluded(medicalhistories.FieldHasTreatment)
	return u
}

// SetHasSurgery sets the "has_surgery" field.
func (u *MedicalHistoriesUpsert) SetHasSurgery(v bool) *MedicalHistoriesUpsert {
	u.Set(medicalhistories.FieldHasSurgery, v)
	return u
}

// UpdateHasSurgery sets the "has_surgery" field to the value that was provided on create.
func (u *MedicalHistoriesUpsert) UpdateHasSurgery() *MedicalHistoriesUpsert {
	u.SetExcluded(medicalhistories.FieldHasSurgery)
	return u
}

// SetHasPrescription sets the "has_prescription" field.
func (u *MedicalHistoriesUpsert) SetHasPrescription(v bool) *MedicalHistoriesUpsert {
	u.Set(medicalhistories.FieldHasPrescription, v)
	return u
}

// UpdateHasPrescription sets the "has_prescription" field to the value that was provided on create.
func (u *MedicalHistoriesUpsert) UpdateHasPrescription() *MedicalHistoriesUpsert {
	u.SetExcluded(medicalhistories.FieldHasPrescription)
	return u
}

// SetDoctorNotes sets the "doctor_notes" field.
func (u *MedicalHistoriesUpsert) SetDoctorNotes(v string) *MedicalHistoriesUpsert {
	u.Set(medicalhistories.FieldDoctorNotes, v)
	return u
}

// UpdateDoctorNotes sets the "doctor_notes" field to the value that was provided on create.
func (u *MedicalHistoriesUpsert) UpdateDoctorNotes() *MedicalHistoriesUpsert {
	u.SetExcluded(medicalhistories.FieldDoctorNotes)
	return u
}

// ClearDoctorNotes clears the value of the "doctor_notes" field.
func (u *MedicalHistoriesUpsert) ClearDoctorNotes() *MedicalHistoriesUpsert {
	u.SetNull(medicalhistories.FieldDoctorNotes)
	return u
}

// SetMedicalEndDate sets the "medical_end_date" field.
func (u *MedicalHistoriesUpsert) SetMedicalEndDate(v time.Time) *MedicalHistoriesUpsert {
	u.Set(medicalhistories.FieldMedicalEndDate, v)
	return u
}

// UpdateMedicalEndDate sets the "medical_end_date" field to the value that was provided on create.
func (u *MedicalHistoriesUpsert) UpdateMedicalEndDate() *MedicalHistoriesUpsert {
	u.SetExcluded(medicalhistories.FieldMedicalEndDate)
	return u
}

// ClearMedicalEndDate clears the value of the "medical_end_date" field.
func (u *MedicalHistoriesUpsert) ClearMedicalEndDate() *MedicalHistoriesUpsert {
	u.SetNull(medicalhistories.FieldMedicalEndDate)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MedicalHistoriesUpsert) SetCreatedAt(v time.Time) *MedicalHistoriesUpsert {
	u.Set(medicalhistories.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MedicalHistoriesUpsert) UpdateCreatedAt() *MedicalHistoriesUpsert {
	u.SetExcluded(medicalhistories.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MedicalHistoriesUpsert) SetUpdatedAt(v time.Time) *MedicalHistoriesUpsert {
	u.Set(medicalhistories.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MedicalHistoriesUpsert) UpdateUpdatedAt() *MedicalHistoriesUpsert {
	u.SetExcluded(medicalhistories.FieldUpdatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MedicalHistoriesUpsert) SetCreatedBy(v uuid.UUID) *MedicalHistoriesUpsert {
	u.Set(medicalhistories.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MedicalHistoriesUpsert) UpdateCreatedBy() *MedicalHistoriesUpsert {
	u.SetExcluded(medicalhistories.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MedicalHistoriesUpsert) SetUpdatedBy(v uuid.UUID) *MedicalHistoriesUpsert {
	u.Set(medicalhistories.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MedicalHistoriesUpsert) UpdateUpdatedBy() *MedicalHistoriesUpsert {
	u.SetExcluded(medicalhistories.FieldUpdatedBy)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MedicalHistories.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(medicalhistories.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MedicalHistoriesUpsertOne) UpdateNewValues() *MedicalHistoriesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(medicalhistories.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MedicalHistories.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MedicalHistoriesUpsertOne) Ignore() *MedicalHistoriesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MedicalHistoriesUpsertOne) DoNothing() *MedicalHistoriesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MedicalHistoriesCreate.OnConflict
// documentation for more info.
func (u *MedicalHistoriesUpsertOne) Update(set func(*MedicalHistoriesUpsert)) *MedicalHistoriesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MedicalHistoriesUpsert{UpdateSet: update})
	}))
	return u
}

// SetPatientID sets the "patient_id" field.
func (u *MedicalHistoriesUpsertOne) SetPatientID(v uuid.UUID) *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetPatientID(v)
	})
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertOne) UpdatePatientID() *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdatePatientID()
	})
}

// SetReason sets the "reason" field.
func (u *MedicalHistoriesUpsertOne) SetReason(v string) *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertOne) UpdateReason() *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateReason()
	})
}

// SetDiagnosis sets the "diagnosis" field.
func (u *MedicalHistoriesUpsertOne) SetDiagnosis(v string) *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetDiagnosis(v)
	})
}

// UpdateDiagnosis sets the "diagnosis" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertOne) UpdateDiagnosis() *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateDiagnosis()
	})
}

// SetHasTreatment sets the "has_treatment" field.
func (u *MedicalHistoriesUpsertOne) SetHasTreatment(v bool) *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetHasTreatment(v)
	})
}

// UpdateHasTreatment sets the "has_treatment" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertOne) UpdateHasTreatment() *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateHasTreatment()
	})
}

// SetHasSurgery sets the "has_surgery" field.
func (u *MedicalHistoriesUpsertOne) SetHasSurgery(v bool) *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetHasSurgery(v)
	})
}

// UpdateHasSurgery sets the "has_surgery" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertOne) UpdateHasSurgery() *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateHasSurgery()
	})
}

// SetHasPrescription sets the "has_prescription" field.
func (u *MedicalHistoriesUpsertOne) SetHasPrescription(v bool) *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetHasPrescription(v)
	})
}

// UpdateHasPrescription sets the "has_prescription" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertOne) UpdateHasPrescription() *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateHasPrescription()
	})
}

// SetDoctorNotes sets the "doctor_notes" field.
func (u *MedicalHistoriesUpsertOne) SetDoctorNotes(v string) *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetDoctorNotes(v)
	})
}

// UpdateDoctorNotes sets the "doctor_notes" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertOne) UpdateDoctorNotes() *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateDoctorNotes()
	})
}

// ClearDoctorNotes clears the value of the "doctor_notes" field.
func (u *MedicalHistoriesUpsertOne) ClearDoctorNotes() *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.ClearDoctorNotes()
	})
}

// SetMedicalEndDate sets the "medical_end_date" field.
func (u *MedicalHistoriesUpsertOne) SetMedicalEndDate(v time.Time) *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetMedicalEndDate(v)
	})
}

// UpdateMedicalEndDate sets the "medical_end_date" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertOne) UpdateMedicalEndDate() *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateMedicalEndDate()
	})
}

// ClearMedicalEndDate clears the value of the "medical_end_date" field.
func (u *MedicalHistoriesUpsertOne) ClearMedicalEndDate() *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.ClearMedicalEndDate()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *MedicalHistoriesUpsertOne) SetCreatedAt(v time.Time) *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertOne) UpdateCreatedAt() *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MedicalHistoriesUpsertOne) SetUpdatedAt(v time.Time) *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertOne) UpdateUpdatedAt() *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *MedicalHistoriesUpsertOne) SetCreatedBy(v uuid.UUID) *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertOne) UpdateCreatedBy() *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MedicalHistoriesUpsertOne) SetUpdatedBy(v uuid.UUID) *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertOne) UpdateUpdatedBy() *MedicalHistoriesUpsertOne {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateUpdatedBy()
	})
}

// Exec executes the query.
func (u *MedicalHistoriesUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MedicalHistoriesCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MedicalHistoriesUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MedicalHistoriesUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MedicalHistoriesUpsertOne.ID is not supported by MySQL driver. Use MedicalHistoriesUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MedicalHistoriesUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MedicalHistoriesCreateBulk is the builder for creating many MedicalHistories entities in bulk.
type MedicalHistoriesCreateBulk struct {
	config
	err      error
	builders []*MedicalHistoriesCreate
	conflict []sql.ConflictOption
}

// Save creates the MedicalHistories entities in the database.
func (mhcb *MedicalHistoriesCreateBulk) Save(ctx context.Context) ([]*MedicalHistories, error) {
	if mhcb.err != nil {
		return nil, mhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mhcb.builders))
	nodes := make([]*MedicalHistories, len(mhcb.builders))
	mutators := make([]Mutator, len(mhcb.builders))
	for i := range mhcb.builders {
		func(i int, root context.Context) {
			builder := mhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MedicalHistoriesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mhcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mhcb *MedicalHistoriesCreateBulk) SaveX(ctx context.Context) []*MedicalHistories {
	v, err := mhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mhcb *MedicalHistoriesCreateBulk) Exec(ctx context.Context) error {
	_, err := mhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mhcb *MedicalHistoriesCreateBulk) ExecX(ctx context.Context) {
	if err := mhcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MedicalHistories.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MedicalHistoriesUpsert) {
//			SetPatientID(v+v).
//		}).
//		Exec(ctx)
func (mhcb *MedicalHistoriesCreateBulk) OnConflict(opts ...sql.ConflictOption) *MedicalHistoriesUpsertBulk {
	mhcb.conflict = opts
	return &MedicalHistoriesUpsertBulk{
		create: mhcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MedicalHistories.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mhcb *MedicalHistoriesCreateBulk) OnConflictColumns(columns ...string) *MedicalHistoriesUpsertBulk {
	mhcb.conflict = append(mhcb.conflict, sql.ConflictColumns(columns...))
	return &MedicalHistoriesUpsertBulk{
		create: mhcb,
	}
}

// MedicalHistoriesUpsertBulk is the builder for "upsert"-ing
// a bulk of MedicalHistories nodes.
type MedicalHistoriesUpsertBulk struct {
	create *MedicalHistoriesCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MedicalHistories.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(medicalhistories.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MedicalHistoriesUpsertBulk) UpdateNewValues() *MedicalHistoriesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(medicalhistories.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MedicalHistories.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MedicalHistoriesUpsertBulk) Ignore() *MedicalHistoriesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MedicalHistoriesUpsertBulk) DoNothing() *MedicalHistoriesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MedicalHistoriesCreateBulk.OnConflict
// documentation for more info.
func (u *MedicalHistoriesUpsertBulk) Update(set func(*MedicalHistoriesUpsert)) *MedicalHistoriesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MedicalHistoriesUpsert{UpdateSet: update})
	}))
	return u
}

// SetPatientID sets the "patient_id" field.
func (u *MedicalHistoriesUpsertBulk) SetPatientID(v uuid.UUID) *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetPatientID(v)
	})
}

// UpdatePatientID sets the "patient_id" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertBulk) UpdatePatientID() *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdatePatientID()
	})
}

// SetReason sets the "reason" field.
func (u *MedicalHistoriesUpsertBulk) SetReason(v string) *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertBulk) UpdateReason() *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateReason()
	})
}

// SetDiagnosis sets the "diagnosis" field.
func (u *MedicalHistoriesUpsertBulk) SetDiagnosis(v string) *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetDiagnosis(v)
	})
}

// UpdateDiagnosis sets the "diagnosis" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertBulk) UpdateDiagnosis() *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateDiagnosis()
	})
}

// SetHasTreatment sets the "has_treatment" field.
func (u *MedicalHistoriesUpsertBulk) SetHasTreatment(v bool) *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetHasTreatment(v)
	})
}

// UpdateHasTreatment sets the "has_treatment" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertBulk) UpdateHasTreatment() *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateHasTreatment()
	})
}

// SetHasSurgery sets the "has_surgery" field.
func (u *MedicalHistoriesUpsertBulk) SetHasSurgery(v bool) *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetHasSurgery(v)
	})
}

// UpdateHasSurgery sets the "has_surgery" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertBulk) UpdateHasSurgery() *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateHasSurgery()
	})
}

// SetHasPrescription sets the "has_prescription" field.
func (u *MedicalHistoriesUpsertBulk) SetHasPrescription(v bool) *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetHasPrescription(v)
	})
}

// UpdateHasPrescription sets the "has_prescription" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertBulk) UpdateHasPrescription() *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateHasPrescription()
	})
}

// SetDoctorNotes sets the "doctor_notes" field.
func (u *MedicalHistoriesUpsertBulk) SetDoctorNotes(v string) *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetDoctorNotes(v)
	})
}

// UpdateDoctorNotes sets the "doctor_notes" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertBulk) UpdateDoctorNotes() *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateDoctorNotes()
	})
}

// ClearDoctorNotes clears the value of the "doctor_notes" field.
func (u *MedicalHistoriesUpsertBulk) ClearDoctorNotes() *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.ClearDoctorNotes()
	})
}

// SetMedicalEndDate sets the "medical_end_date" field.
func (u *MedicalHistoriesUpsertBulk) SetMedicalEndDate(v time.Time) *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetMedicalEndDate(v)
	})
}

// UpdateMedicalEndDate sets the "medical_end_date" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertBulk) UpdateMedicalEndDate() *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateMedicalEndDate()
	})
}

// ClearMedicalEndDate clears the value of the "medical_end_date" field.
func (u *MedicalHistoriesUpsertBulk) ClearMedicalEndDate() *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.ClearMedicalEndDate()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *MedicalHistoriesUpsertBulk) SetCreatedAt(v time.Time) *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertBulk) UpdateCreatedAt() *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MedicalHistoriesUpsertBulk) SetUpdatedAt(v time.Time) *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertBulk) UpdateUpdatedAt() *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *MedicalHistoriesUpsertBulk) SetCreatedBy(v uuid.UUID) *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertBulk) UpdateCreatedBy() *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MedicalHistoriesUpsertBulk) SetUpdatedBy(v uuid.UUID) *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MedicalHistoriesUpsertBulk) UpdateUpdatedBy() *MedicalHistoriesUpsertBulk {
	return u.Update(func(s *MedicalHistoriesUpsert) {
		s.UpdateUpdatedBy()
	})
}

// Exec executes the query.
func (u *MedicalHistoriesUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MedicalHistoriesCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MedicalHistoriesCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MedicalHistoriesUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
