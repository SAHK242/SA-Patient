// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"patient/ent/medicalhistories"
	"patient/ent/medicalprescription"
	"patient/ent/predicate"
	"patient/ent/prescriptionmedication"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MedicalPrescriptionUpdate is the builder for updating MedicalPrescription entities.
type MedicalPrescriptionUpdate struct {
	config
	hooks    []Hook
	mutation *MedicalPrescriptionMutation
}

// Where appends a list predicates to the MedicalPrescriptionUpdate builder.
func (mpu *MedicalPrescriptionUpdate) Where(ps ...predicate.MedicalPrescription) *MedicalPrescriptionUpdate {
	mpu.mutation.Where(ps...)
	return mpu
}

// SetMedicalHistoryID sets the "medical_history_id" field.
func (mpu *MedicalPrescriptionUpdate) SetMedicalHistoryID(u uuid.UUID) *MedicalPrescriptionUpdate {
	mpu.mutation.SetMedicalHistoryID(u)
	return mpu
}

// SetNillableMedicalHistoryID sets the "medical_history_id" field if the given value is not nil.
func (mpu *MedicalPrescriptionUpdate) SetNillableMedicalHistoryID(u *uuid.UUID) *MedicalPrescriptionUpdate {
	if u != nil {
		mpu.SetMedicalHistoryID(*u)
	}
	return mpu
}

// SetPrescriptionDate sets the "prescription_date" field.
func (mpu *MedicalPrescriptionUpdate) SetPrescriptionDate(t time.Time) *MedicalPrescriptionUpdate {
	mpu.mutation.SetPrescriptionDate(t)
	return mpu
}

// SetNillablePrescriptionDate sets the "prescription_date" field if the given value is not nil.
func (mpu *MedicalPrescriptionUpdate) SetNillablePrescriptionDate(t *time.Time) *MedicalPrescriptionUpdate {
	if t != nil {
		mpu.SetPrescriptionDate(*t)
	}
	return mpu
}

// SetFee sets the "fee" field.
func (mpu *MedicalPrescriptionUpdate) SetFee(f float64) *MedicalPrescriptionUpdate {
	mpu.mutation.ResetFee()
	mpu.mutation.SetFee(f)
	return mpu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (mpu *MedicalPrescriptionUpdate) SetNillableFee(f *float64) *MedicalPrescriptionUpdate {
	if f != nil {
		mpu.SetFee(*f)
	}
	return mpu
}

// AddFee adds f to the "fee" field.
func (mpu *MedicalPrescriptionUpdate) AddFee(f float64) *MedicalPrescriptionUpdate {
	mpu.mutation.AddFee(f)
	return mpu
}

// SetCreatedAt sets the "created_at" field.
func (mpu *MedicalPrescriptionUpdate) SetCreatedAt(t time.Time) *MedicalPrescriptionUpdate {
	mpu.mutation.SetCreatedAt(t)
	return mpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpu *MedicalPrescriptionUpdate) SetNillableCreatedAt(t *time.Time) *MedicalPrescriptionUpdate {
	if t != nil {
		mpu.SetCreatedAt(*t)
	}
	return mpu
}

// SetCreatedBy sets the "created_by" field.
func (mpu *MedicalPrescriptionUpdate) SetCreatedBy(u uuid.UUID) *MedicalPrescriptionUpdate {
	mpu.mutation.SetCreatedBy(u)
	return mpu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mpu *MedicalPrescriptionUpdate) SetNillableCreatedBy(u *uuid.UUID) *MedicalPrescriptionUpdate {
	if u != nil {
		mpu.SetCreatedBy(*u)
	}
	return mpu
}

// SetMedicalHistoriesID sets the "medical_histories" edge to the MedicalHistories entity by ID.
func (mpu *MedicalPrescriptionUpdate) SetMedicalHistoriesID(id uuid.UUID) *MedicalPrescriptionUpdate {
	mpu.mutation.SetMedicalHistoriesID(id)
	return mpu
}

// SetMedicalHistories sets the "medical_histories" edge to the MedicalHistories entity.
func (mpu *MedicalPrescriptionUpdate) SetMedicalHistories(m *MedicalHistories) *MedicalPrescriptionUpdate {
	return mpu.SetMedicalHistoriesID(m.ID)
}

// AddPrescriptionMedicationIDs adds the "prescription_medication" edge to the PrescriptionMedication entity by IDs.
func (mpu *MedicalPrescriptionUpdate) AddPrescriptionMedicationIDs(ids ...uuid.UUID) *MedicalPrescriptionUpdate {
	mpu.mutation.AddPrescriptionMedicationIDs(ids...)
	return mpu
}

// AddPrescriptionMedication adds the "prescription_medication" edges to the PrescriptionMedication entity.
func (mpu *MedicalPrescriptionUpdate) AddPrescriptionMedication(p ...*PrescriptionMedication) *MedicalPrescriptionUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mpu.AddPrescriptionMedicationIDs(ids...)
}

// Mutation returns the MedicalPrescriptionMutation object of the builder.
func (mpu *MedicalPrescriptionUpdate) Mutation() *MedicalPrescriptionMutation {
	return mpu.mutation
}

// ClearMedicalHistories clears the "medical_histories" edge to the MedicalHistories entity.
func (mpu *MedicalPrescriptionUpdate) ClearMedicalHistories() *MedicalPrescriptionUpdate {
	mpu.mutation.ClearMedicalHistories()
	return mpu
}

// ClearPrescriptionMedication clears all "prescription_medication" edges to the PrescriptionMedication entity.
func (mpu *MedicalPrescriptionUpdate) ClearPrescriptionMedication() *MedicalPrescriptionUpdate {
	mpu.mutation.ClearPrescriptionMedication()
	return mpu
}

// RemovePrescriptionMedicationIDs removes the "prescription_medication" edge to PrescriptionMedication entities by IDs.
func (mpu *MedicalPrescriptionUpdate) RemovePrescriptionMedicationIDs(ids ...uuid.UUID) *MedicalPrescriptionUpdate {
	mpu.mutation.RemovePrescriptionMedicationIDs(ids...)
	return mpu
}

// RemovePrescriptionMedication removes "prescription_medication" edges to PrescriptionMedication entities.
func (mpu *MedicalPrescriptionUpdate) RemovePrescriptionMedication(p ...*PrescriptionMedication) *MedicalPrescriptionUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mpu.RemovePrescriptionMedicationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpu *MedicalPrescriptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mpu.sqlSave, mpu.mutation, mpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpu *MedicalPrescriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := mpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpu *MedicalPrescriptionUpdate) Exec(ctx context.Context) error {
	_, err := mpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpu *MedicalPrescriptionUpdate) ExecX(ctx context.Context) {
	if err := mpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpu *MedicalPrescriptionUpdate) check() error {
	if mpu.mutation.MedicalHistoriesCleared() && len(mpu.mutation.MedicalHistoriesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MedicalPrescription.medical_histories"`)
	}
	return nil
}

func (mpu *MedicalPrescriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(medicalprescription.Table, medicalprescription.Columns, sqlgraph.NewFieldSpec(medicalprescription.FieldID, field.TypeUUID))
	if ps := mpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpu.mutation.PrescriptionDate(); ok {
		_spec.SetField(medicalprescription.FieldPrescriptionDate, field.TypeTime, value)
	}
	if value, ok := mpu.mutation.Fee(); ok {
		_spec.SetField(medicalprescription.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := mpu.mutation.AddedFee(); ok {
		_spec.AddField(medicalprescription.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := mpu.mutation.CreatedAt(); ok {
		_spec.SetField(medicalprescription.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mpu.mutation.CreatedBy(); ok {
		_spec.SetField(medicalprescription.FieldCreatedBy, field.TypeUUID, value)
	}
	if mpu.mutation.MedicalHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprescription.MedicalHistoriesTable,
			Columns: []string{medicalprescription.MedicalHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.MedicalHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprescription.MedicalHistoriesTable,
			Columns: []string{medicalprescription.MedicalHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpu.mutation.PrescriptionMedicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalprescription.PrescriptionMedicationTable,
			Columns: []string{medicalprescription.PrescriptionMedicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionmedication.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.RemovedPrescriptionMedicationIDs(); len(nodes) > 0 && !mpu.mutation.PrescriptionMedicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalprescription.PrescriptionMedicationTable,
			Columns: []string{medicalprescription.PrescriptionMedicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionmedication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.PrescriptionMedicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalprescription.PrescriptionMedicationTable,
			Columns: []string{medicalprescription.PrescriptionMedicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionmedication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalprescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mpu.mutation.done = true
	return n, nil
}

// MedicalPrescriptionUpdateOne is the builder for updating a single MedicalPrescription entity.
type MedicalPrescriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MedicalPrescriptionMutation
}

// SetMedicalHistoryID sets the "medical_history_id" field.
func (mpuo *MedicalPrescriptionUpdateOne) SetMedicalHistoryID(u uuid.UUID) *MedicalPrescriptionUpdateOne {
	mpuo.mutation.SetMedicalHistoryID(u)
	return mpuo
}

// SetNillableMedicalHistoryID sets the "medical_history_id" field if the given value is not nil.
func (mpuo *MedicalPrescriptionUpdateOne) SetNillableMedicalHistoryID(u *uuid.UUID) *MedicalPrescriptionUpdateOne {
	if u != nil {
		mpuo.SetMedicalHistoryID(*u)
	}
	return mpuo
}

// SetPrescriptionDate sets the "prescription_date" field.
func (mpuo *MedicalPrescriptionUpdateOne) SetPrescriptionDate(t time.Time) *MedicalPrescriptionUpdateOne {
	mpuo.mutation.SetPrescriptionDate(t)
	return mpuo
}

// SetNillablePrescriptionDate sets the "prescription_date" field if the given value is not nil.
func (mpuo *MedicalPrescriptionUpdateOne) SetNillablePrescriptionDate(t *time.Time) *MedicalPrescriptionUpdateOne {
	if t != nil {
		mpuo.SetPrescriptionDate(*t)
	}
	return mpuo
}

// SetFee sets the "fee" field.
func (mpuo *MedicalPrescriptionUpdateOne) SetFee(f float64) *MedicalPrescriptionUpdateOne {
	mpuo.mutation.ResetFee()
	mpuo.mutation.SetFee(f)
	return mpuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (mpuo *MedicalPrescriptionUpdateOne) SetNillableFee(f *float64) *MedicalPrescriptionUpdateOne {
	if f != nil {
		mpuo.SetFee(*f)
	}
	return mpuo
}

// AddFee adds f to the "fee" field.
func (mpuo *MedicalPrescriptionUpdateOne) AddFee(f float64) *MedicalPrescriptionUpdateOne {
	mpuo.mutation.AddFee(f)
	return mpuo
}

// SetCreatedAt sets the "created_at" field.
func (mpuo *MedicalPrescriptionUpdateOne) SetCreatedAt(t time.Time) *MedicalPrescriptionUpdateOne {
	mpuo.mutation.SetCreatedAt(t)
	return mpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpuo *MedicalPrescriptionUpdateOne) SetNillableCreatedAt(t *time.Time) *MedicalPrescriptionUpdateOne {
	if t != nil {
		mpuo.SetCreatedAt(*t)
	}
	return mpuo
}

// SetCreatedBy sets the "created_by" field.
func (mpuo *MedicalPrescriptionUpdateOne) SetCreatedBy(u uuid.UUID) *MedicalPrescriptionUpdateOne {
	mpuo.mutation.SetCreatedBy(u)
	return mpuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mpuo *MedicalPrescriptionUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *MedicalPrescriptionUpdateOne {
	if u != nil {
		mpuo.SetCreatedBy(*u)
	}
	return mpuo
}

// SetMedicalHistoriesID sets the "medical_histories" edge to the MedicalHistories entity by ID.
func (mpuo *MedicalPrescriptionUpdateOne) SetMedicalHistoriesID(id uuid.UUID) *MedicalPrescriptionUpdateOne {
	mpuo.mutation.SetMedicalHistoriesID(id)
	return mpuo
}

// SetMedicalHistories sets the "medical_histories" edge to the MedicalHistories entity.
func (mpuo *MedicalPrescriptionUpdateOne) SetMedicalHistories(m *MedicalHistories) *MedicalPrescriptionUpdateOne {
	return mpuo.SetMedicalHistoriesID(m.ID)
}

// AddPrescriptionMedicationIDs adds the "prescription_medication" edge to the PrescriptionMedication entity by IDs.
func (mpuo *MedicalPrescriptionUpdateOne) AddPrescriptionMedicationIDs(ids ...uuid.UUID) *MedicalPrescriptionUpdateOne {
	mpuo.mutation.AddPrescriptionMedicationIDs(ids...)
	return mpuo
}

// AddPrescriptionMedication adds the "prescription_medication" edges to the PrescriptionMedication entity.
func (mpuo *MedicalPrescriptionUpdateOne) AddPrescriptionMedication(p ...*PrescriptionMedication) *MedicalPrescriptionUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mpuo.AddPrescriptionMedicationIDs(ids...)
}

// Mutation returns the MedicalPrescriptionMutation object of the builder.
func (mpuo *MedicalPrescriptionUpdateOne) Mutation() *MedicalPrescriptionMutation {
	return mpuo.mutation
}

// ClearMedicalHistories clears the "medical_histories" edge to the MedicalHistories entity.
func (mpuo *MedicalPrescriptionUpdateOne) ClearMedicalHistories() *MedicalPrescriptionUpdateOne {
	mpuo.mutation.ClearMedicalHistories()
	return mpuo
}

// ClearPrescriptionMedication clears all "prescription_medication" edges to the PrescriptionMedication entity.
func (mpuo *MedicalPrescriptionUpdateOne) ClearPrescriptionMedication() *MedicalPrescriptionUpdateOne {
	mpuo.mutation.ClearPrescriptionMedication()
	return mpuo
}

// RemovePrescriptionMedicationIDs removes the "prescription_medication" edge to PrescriptionMedication entities by IDs.
func (mpuo *MedicalPrescriptionUpdateOne) RemovePrescriptionMedicationIDs(ids ...uuid.UUID) *MedicalPrescriptionUpdateOne {
	mpuo.mutation.RemovePrescriptionMedicationIDs(ids...)
	return mpuo
}

// RemovePrescriptionMedication removes "prescription_medication" edges to PrescriptionMedication entities.
func (mpuo *MedicalPrescriptionUpdateOne) RemovePrescriptionMedication(p ...*PrescriptionMedication) *MedicalPrescriptionUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mpuo.RemovePrescriptionMedicationIDs(ids...)
}

// Where appends a list predicates to the MedicalPrescriptionUpdate builder.
func (mpuo *MedicalPrescriptionUpdateOne) Where(ps ...predicate.MedicalPrescription) *MedicalPrescriptionUpdateOne {
	mpuo.mutation.Where(ps...)
	return mpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpuo *MedicalPrescriptionUpdateOne) Select(field string, fields ...string) *MedicalPrescriptionUpdateOne {
	mpuo.fields = append([]string{field}, fields...)
	return mpuo
}

// Save executes the query and returns the updated MedicalPrescription entity.
func (mpuo *MedicalPrescriptionUpdateOne) Save(ctx context.Context) (*MedicalPrescription, error) {
	return withHooks(ctx, mpuo.sqlSave, mpuo.mutation, mpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpuo *MedicalPrescriptionUpdateOne) SaveX(ctx context.Context) *MedicalPrescription {
	node, err := mpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpuo *MedicalPrescriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := mpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuo *MedicalPrescriptionUpdateOne) ExecX(ctx context.Context) {
	if err := mpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpuo *MedicalPrescriptionUpdateOne) check() error {
	if mpuo.mutation.MedicalHistoriesCleared() && len(mpuo.mutation.MedicalHistoriesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MedicalPrescription.medical_histories"`)
	}
	return nil
}

func (mpuo *MedicalPrescriptionUpdateOne) sqlSave(ctx context.Context) (_node *MedicalPrescription, err error) {
	if err := mpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(medicalprescription.Table, medicalprescription.Columns, sqlgraph.NewFieldSpec(medicalprescription.FieldID, field.TypeUUID))
	id, ok := mpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MedicalPrescription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, medicalprescription.FieldID)
		for _, f := range fields {
			if !medicalprescription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != medicalprescription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpuo.mutation.PrescriptionDate(); ok {
		_spec.SetField(medicalprescription.FieldPrescriptionDate, field.TypeTime, value)
	}
	if value, ok := mpuo.mutation.Fee(); ok {
		_spec.SetField(medicalprescription.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := mpuo.mutation.AddedFee(); ok {
		_spec.AddField(medicalprescription.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := mpuo.mutation.CreatedAt(); ok {
		_spec.SetField(medicalprescription.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mpuo.mutation.CreatedBy(); ok {
		_spec.SetField(medicalprescription.FieldCreatedBy, field.TypeUUID, value)
	}
	if mpuo.mutation.MedicalHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprescription.MedicalHistoriesTable,
			Columns: []string{medicalprescription.MedicalHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.MedicalHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprescription.MedicalHistoriesTable,
			Columns: []string{medicalprescription.MedicalHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpuo.mutation.PrescriptionMedicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalprescription.PrescriptionMedicationTable,
			Columns: []string{medicalprescription.PrescriptionMedicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionmedication.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.RemovedPrescriptionMedicationIDs(); len(nodes) > 0 && !mpuo.mutation.PrescriptionMedicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalprescription.PrescriptionMedicationTable,
			Columns: []string{medicalprescription.PrescriptionMedicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionmedication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.PrescriptionMedicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalprescription.PrescriptionMedicationTable,
			Columns: []string{medicalprescription.PrescriptionMedicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionmedication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MedicalPrescription{config: mpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalprescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mpuo.mutation.done = true
	return _node, nil
}
