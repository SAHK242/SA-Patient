// Code generated by ent, DO NOT EDIT.

package medicaltreatment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the medicaltreatment type in the database.
	Label = "medical_treatment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMedicalHistoryID holds the string denoting the medical_history_id field in the database.
	FieldMedicalHistoryID = "medical_history_id"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldFee holds the string denoting the fee field in the database.
	FieldFee = "fee"
	// FieldMainDoctorID holds the string denoting the main_doctor_id field in the database.
	FieldMainDoctorID = "main_doctor_id"
	// FieldSupportDoctorIds holds the string denoting the support_doctor_ids field in the database.
	FieldSupportDoctorIds = "support_doctor_ids"
	// FieldSupportNurseIds holds the string denoting the support_nurse_ids field in the database.
	FieldSupportNurseIds = "support_nurse_ids"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeMedicalHistories holds the string denoting the medical_histories edge name in mutations.
	EdgeMedicalHistories = "medical_histories"
	// Table holds the table name of the medicaltreatment in the database.
	Table = "medical_treatment"
	// MedicalHistoriesTable is the table that holds the medical_histories relation/edge.
	MedicalHistoriesTable = "medical_treatment"
	// MedicalHistoriesInverseTable is the table name for the MedicalHistories entity.
	// It exists in this package in order to avoid circular dependency with the "medicalhistories" package.
	MedicalHistoriesInverseTable = "medical_histories"
	// MedicalHistoriesColumn is the table column denoting the medical_histories relation/edge.
	MedicalHistoriesColumn = "medical_history_id"
)

// Columns holds all SQL columns for medicaltreatment fields.
var Columns = []string{
	FieldID,
	FieldMedicalHistoryID,
	FieldStartDate,
	FieldEndDate,
	FieldName,
	FieldResult,
	FieldDescription,
	FieldFee,
	FieldMainDoctorID,
	FieldSupportDoctorIds,
	FieldSupportNurseIds,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStartDate holds the default value on creation for the "start_date" field.
	DefaultStartDate func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultFee holds the default value on creation for the "fee" field.
	DefaultFee float64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the MedicalTreatment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMedicalHistoryID orders the results by the medical_history_id field.
func ByMedicalHistoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMedicalHistoryID, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByResult orders the results by the result field.
func ByResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResult, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByFee orders the results by the fee field.
func ByFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFee, opts...).ToFunc()
}

// ByMainDoctorID orders the results by the main_doctor_id field.
func ByMainDoctorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMainDoctorID, opts...).ToFunc()
}

// BySupportDoctorIds orders the results by the support_doctor_ids field.
func BySupportDoctorIds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSupportDoctorIds, opts...).ToFunc()
}

// BySupportNurseIds orders the results by the support_nurse_ids field.
func BySupportNurseIds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSupportNurseIds, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMedicalHistoriesField orders the results by medical_histories field.
func ByMedicalHistoriesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMedicalHistoriesStep(), sql.OrderByField(field, opts...))
	}
}
func newMedicalHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MedicalHistoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MedicalHistoriesTable, MedicalHistoriesColumn),
	)
}
