// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"patient/ent/medicalhistories"
	"patient/ent/medicaltreatment"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MedicalTreatmentCreate is the builder for creating a MedicalTreatment entity.
type MedicalTreatmentCreate struct {
	config
	mutation *MedicalTreatmentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMedicalHistoryID sets the "medical_history_id" field.
func (mtc *MedicalTreatmentCreate) SetMedicalHistoryID(u uuid.UUID) *MedicalTreatmentCreate {
	mtc.mutation.SetMedicalHistoryID(u)
	return mtc
}

// SetStartDate sets the "start_date" field.
func (mtc *MedicalTreatmentCreate) SetStartDate(t time.Time) *MedicalTreatmentCreate {
	mtc.mutation.SetStartDate(t)
	return mtc
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (mtc *MedicalTreatmentCreate) SetNillableStartDate(t *time.Time) *MedicalTreatmentCreate {
	if t != nil {
		mtc.SetStartDate(*t)
	}
	return mtc
}

// SetEndDate sets the "end_date" field.
func (mtc *MedicalTreatmentCreate) SetEndDate(t time.Time) *MedicalTreatmentCreate {
	mtc.mutation.SetEndDate(t)
	return mtc
}

// SetName sets the "name" field.
func (mtc *MedicalTreatmentCreate) SetName(s string) *MedicalTreatmentCreate {
	mtc.mutation.SetName(s)
	return mtc
}

// SetResult sets the "result" field.
func (mtc *MedicalTreatmentCreate) SetResult(s string) *MedicalTreatmentCreate {
	mtc.mutation.SetResult(s)
	return mtc
}

// SetDescription sets the "description" field.
func (mtc *MedicalTreatmentCreate) SetDescription(s string) *MedicalTreatmentCreate {
	mtc.mutation.SetDescription(s)
	return mtc
}

// SetFee sets the "fee" field.
func (mtc *MedicalTreatmentCreate) SetFee(f float64) *MedicalTreatmentCreate {
	mtc.mutation.SetFee(f)
	return mtc
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (mtc *MedicalTreatmentCreate) SetNillableFee(f *float64) *MedicalTreatmentCreate {
	if f != nil {
		mtc.SetFee(*f)
	}
	return mtc
}

// SetMainDoctorID sets the "main_doctor_id" field.
func (mtc *MedicalTreatmentCreate) SetMainDoctorID(u uuid.UUID) *MedicalTreatmentCreate {
	mtc.mutation.SetMainDoctorID(u)
	return mtc
}

// SetSupportDoctorIds sets the "support_doctor_ids" field.
func (mtc *MedicalTreatmentCreate) SetSupportDoctorIds(s string) *MedicalTreatmentCreate {
	mtc.mutation.SetSupportDoctorIds(s)
	return mtc
}

// SetSupportNurseIds sets the "support_nurse_ids" field.
func (mtc *MedicalTreatmentCreate) SetSupportNurseIds(s string) *MedicalTreatmentCreate {
	mtc.mutation.SetSupportNurseIds(s)
	return mtc
}

// SetCreatedAt sets the "created_at" field.
func (mtc *MedicalTreatmentCreate) SetCreatedAt(t time.Time) *MedicalTreatmentCreate {
	mtc.mutation.SetCreatedAt(t)
	return mtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mtc *MedicalTreatmentCreate) SetNillableCreatedAt(t *time.Time) *MedicalTreatmentCreate {
	if t != nil {
		mtc.SetCreatedAt(*t)
	}
	return mtc
}

// SetCreatedBy sets the "created_by" field.
func (mtc *MedicalTreatmentCreate) SetCreatedBy(u uuid.UUID) *MedicalTreatmentCreate {
	mtc.mutation.SetCreatedBy(u)
	return mtc
}

// SetUpdatedBy sets the "updated_by" field.
func (mtc *MedicalTreatmentCreate) SetUpdatedBy(u uuid.UUID) *MedicalTreatmentCreate {
	mtc.mutation.SetUpdatedBy(u)
	return mtc
}

// SetUpdatedAt sets the "updated_at" field.
func (mtc *MedicalTreatmentCreate) SetUpdatedAt(t time.Time) *MedicalTreatmentCreate {
	mtc.mutation.SetUpdatedAt(t)
	return mtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mtc *MedicalTreatmentCreate) SetNillableUpdatedAt(t *time.Time) *MedicalTreatmentCreate {
	if t != nil {
		mtc.SetUpdatedAt(*t)
	}
	return mtc
}

// SetID sets the "id" field.
func (mtc *MedicalTreatmentCreate) SetID(u uuid.UUID) *MedicalTreatmentCreate {
	mtc.mutation.SetID(u)
	return mtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mtc *MedicalTreatmentCreate) SetNillableID(u *uuid.UUID) *MedicalTreatmentCreate {
	if u != nil {
		mtc.SetID(*u)
	}
	return mtc
}

// SetMedicalHistoriesID sets the "medical_histories" edge to the MedicalHistories entity by ID.
func (mtc *MedicalTreatmentCreate) SetMedicalHistoriesID(id uuid.UUID) *MedicalTreatmentCreate {
	mtc.mutation.SetMedicalHistoriesID(id)
	return mtc
}

// SetMedicalHistories sets the "medical_histories" edge to the MedicalHistories entity.
func (mtc *MedicalTreatmentCreate) SetMedicalHistories(m *MedicalHistories) *MedicalTreatmentCreate {
	return mtc.SetMedicalHistoriesID(m.ID)
}

// Mutation returns the MedicalTreatmentMutation object of the builder.
func (mtc *MedicalTreatmentCreate) Mutation() *MedicalTreatmentMutation {
	return mtc.mutation
}

// Save creates the MedicalTreatment in the database.
func (mtc *MedicalTreatmentCreate) Save(ctx context.Context) (*MedicalTreatment, error) {
	mtc.defaults()
	return withHooks(ctx, mtc.sqlSave, mtc.mutation, mtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mtc *MedicalTreatmentCreate) SaveX(ctx context.Context) *MedicalTreatment {
	v, err := mtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtc *MedicalTreatmentCreate) Exec(ctx context.Context) error {
	_, err := mtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtc *MedicalTreatmentCreate) ExecX(ctx context.Context) {
	if err := mtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtc *MedicalTreatmentCreate) defaults() {
	if _, ok := mtc.mutation.StartDate(); !ok {
		v := medicaltreatment.DefaultStartDate()
		mtc.mutation.SetStartDate(v)
	}
	if _, ok := mtc.mutation.Fee(); !ok {
		v := medicaltreatment.DefaultFee
		mtc.mutation.SetFee(v)
	}
	if _, ok := mtc.mutation.CreatedAt(); !ok {
		v := medicaltreatment.DefaultCreatedAt()
		mtc.mutation.SetCreatedAt(v)
	}
	if _, ok := mtc.mutation.UpdatedAt(); !ok {
		v := medicaltreatment.DefaultUpdatedAt()
		mtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mtc.mutation.ID(); !ok {
		v := medicaltreatment.DefaultID()
		mtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtc *MedicalTreatmentCreate) check() error {
	if _, ok := mtc.mutation.MedicalHistoryID(); !ok {
		return &ValidationError{Name: "medical_history_id", err: errors.New(`ent: missing required field "MedicalTreatment.medical_history_id"`)}
	}
	if _, ok := mtc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "MedicalTreatment.start_date"`)}
	}
	if _, ok := mtc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`ent: missing required field "MedicalTreatment.end_date"`)}
	}
	if _, ok := mtc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MedicalTreatment.name"`)}
	}
	if v, ok := mtc.mutation.Name(); ok {
		if err := medicaltreatment.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MedicalTreatment.name": %w`, err)}
		}
	}
	if _, ok := mtc.mutation.Result(); !ok {
		return &ValidationError{Name: "result", err: errors.New(`ent: missing required field "MedicalTreatment.result"`)}
	}
	if _, ok := mtc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "MedicalTreatment.description"`)}
	}
	if _, ok := mtc.mutation.Fee(); !ok {
		return &ValidationError{Name: "fee", err: errors.New(`ent: missing required field "MedicalTreatment.fee"`)}
	}
	if _, ok := mtc.mutation.MainDoctorID(); !ok {
		return &ValidationError{Name: "main_doctor_id", err: errors.New(`ent: missing required field "MedicalTreatment.main_doctor_id"`)}
	}
	if _, ok := mtc.mutation.SupportDoctorIds(); !ok {
		return &ValidationError{Name: "support_doctor_ids", err: errors.New(`ent: missing required field "MedicalTreatment.support_doctor_ids"`)}
	}
	if _, ok := mtc.mutation.SupportNurseIds(); !ok {
		return &ValidationError{Name: "support_nurse_ids", err: errors.New(`ent: missing required field "MedicalTreatment.support_nurse_ids"`)}
	}
	if _, ok := mtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MedicalTreatment.created_at"`)}
	}
	if _, ok := mtc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "MedicalTreatment.created_by"`)}
	}
	if _, ok := mtc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "MedicalTreatment.updated_by"`)}
	}
	if _, ok := mtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MedicalTreatment.updated_at"`)}
	}
	if len(mtc.mutation.MedicalHistoriesIDs()) == 0 {
		return &ValidationError{Name: "medical_histories", err: errors.New(`ent: missing required edge "MedicalTreatment.medical_histories"`)}
	}
	return nil
}

func (mtc *MedicalTreatmentCreate) sqlSave(ctx context.Context) (*MedicalTreatment, error) {
	if err := mtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mtc.mutation.id = &_node.ID
	mtc.mutation.done = true
	return _node, nil
}

func (mtc *MedicalTreatmentCreate) createSpec() (*MedicalTreatment, *sqlgraph.CreateSpec) {
	var (
		_node = &MedicalTreatment{config: mtc.config}
		_spec = sqlgraph.NewCreateSpec(medicaltreatment.Table, sqlgraph.NewFieldSpec(medicaltreatment.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = mtc.conflict
	if id, ok := mtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mtc.mutation.StartDate(); ok {
		_spec.SetField(medicaltreatment.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := mtc.mutation.EndDate(); ok {
		_spec.SetField(medicaltreatment.FieldEndDate, field.TypeTime, value)
		_node.EndDate = &value
	}
	if value, ok := mtc.mutation.Name(); ok {
		_spec.SetField(medicaltreatment.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mtc.mutation.Result(); ok {
		_spec.SetField(medicaltreatment.FieldResult, field.TypeString, value)
		_node.Result = value
	}
	if value, ok := mtc.mutation.Description(); ok {
		_spec.SetField(medicaltreatment.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := mtc.mutation.Fee(); ok {
		_spec.SetField(medicaltreatment.FieldFee, field.TypeFloat64, value)
		_node.Fee = value
	}
	if value, ok := mtc.mutation.MainDoctorID(); ok {
		_spec.SetField(medicaltreatment.FieldMainDoctorID, field.TypeUUID, value)
		_node.MainDoctorID = value
	}
	if value, ok := mtc.mutation.SupportDoctorIds(); ok {
		_spec.SetField(medicaltreatment.FieldSupportDoctorIds, field.TypeString, value)
		_node.SupportDoctorIds = &value
	}
	if value, ok := mtc.mutation.SupportNurseIds(); ok {
		_spec.SetField(medicaltreatment.FieldSupportNurseIds, field.TypeString, value)
		_node.SupportNurseIds = &value
	}
	if value, ok := mtc.mutation.CreatedAt(); ok {
		_spec.SetField(medicaltreatment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mtc.mutation.CreatedBy(); ok {
		_spec.SetField(medicaltreatment.FieldCreatedBy, field.TypeUUID, value)
		_node.CreatedBy = value
	}
	if value, ok := mtc.mutation.UpdatedBy(); ok {
		_spec.SetField(medicaltreatment.FieldUpdatedBy, field.TypeUUID, value)
		_node.UpdatedBy = value
	}
	if value, ok := mtc.mutation.UpdatedAt(); ok {
		_spec.SetField(medicaltreatment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := mtc.mutation.MedicalHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicaltreatment.MedicalHistoriesTable,
			Columns: []string{medicaltreatment.MedicalHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MedicalHistoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MedicalTreatment.Create().
//		SetMedicalHistoryID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MedicalTreatmentUpsert) {
//			SetMedicalHistoryID(v+v).
//		}).
//		Exec(ctx)
func (mtc *MedicalTreatmentCreate) OnConflict(opts ...sql.ConflictOption) *MedicalTreatmentUpsertOne {
	mtc.conflict = opts
	return &MedicalTreatmentUpsertOne{
		create: mtc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MedicalTreatment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mtc *MedicalTreatmentCreate) OnConflictColumns(columns ...string) *MedicalTreatmentUpsertOne {
	mtc.conflict = append(mtc.conflict, sql.ConflictColumns(columns...))
	return &MedicalTreatmentUpsertOne{
		create: mtc,
	}
}

type (
	// MedicalTreatmentUpsertOne is the builder for "upsert"-ing
	//  one MedicalTreatment node.
	MedicalTreatmentUpsertOne struct {
		create *MedicalTreatmentCreate
	}

	// MedicalTreatmentUpsert is the "OnConflict" setter.
	MedicalTreatmentUpsert struct {
		*sql.UpdateSet
	}
)

// SetMedicalHistoryID sets the "medical_history_id" field.
func (u *MedicalTreatmentUpsert) SetMedicalHistoryID(v uuid.UUID) *MedicalTreatmentUpsert {
	u.Set(medicaltreatment.FieldMedicalHistoryID, v)
	return u
}

// UpdateMedicalHistoryID sets the "medical_history_id" field to the value that was provided on create.
func (u *MedicalTreatmentUpsert) UpdateMedicalHistoryID() *MedicalTreatmentUpsert {
	u.SetExcluded(medicaltreatment.FieldMedicalHistoryID)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *MedicalTreatmentUpsert) SetStartDate(v time.Time) *MedicalTreatmentUpsert {
	u.Set(medicaltreatment.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *MedicalTreatmentUpsert) UpdateStartDate() *MedicalTreatmentUpsert {
	u.SetExcluded(medicaltreatment.FieldStartDate)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *MedicalTreatmentUpsert) SetEndDate(v time.Time) *MedicalTreatmentUpsert {
	u.Set(medicaltreatment.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *MedicalTreatmentUpsert) UpdateEndDate() *MedicalTreatmentUpsert {
	u.SetExcluded(medicaltreatment.FieldEndDate)
	return u
}

// SetName sets the "name" field.
func (u *MedicalTreatmentUpsert) SetName(v string) *MedicalTreatmentUpsert {
	u.Set(medicaltreatment.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MedicalTreatmentUpsert) UpdateName() *MedicalTreatmentUpsert {
	u.SetExcluded(medicaltreatment.FieldName)
	return u
}

// SetResult sets the "result" field.
func (u *MedicalTreatmentUpsert) SetResult(v string) *MedicalTreatmentUpsert {
	u.Set(medicaltreatment.FieldResult, v)
	return u
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *MedicalTreatmentUpsert) UpdateResult() *MedicalTreatmentUpsert {
	u.SetExcluded(medicaltreatment.FieldResult)
	return u
}

// SetDescription sets the "description" field.
func (u *MedicalTreatmentUpsert) SetDescription(v string) *MedicalTreatmentUpsert {
	u.Set(medicaltreatment.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MedicalTreatmentUpsert) UpdateDescription() *MedicalTreatmentUpsert {
	u.SetExcluded(medicaltreatment.FieldDescription)
	return u
}

// SetFee sets the "fee" field.
func (u *MedicalTreatmentUpsert) SetFee(v float64) *MedicalTreatmentUpsert {
	u.Set(medicaltreatment.FieldFee, v)
	return u
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *MedicalTreatmentUpsert) UpdateFee() *MedicalTreatmentUpsert {
	u.SetExcluded(medicaltreatment.FieldFee)
	return u
}

// AddFee adds v to the "fee" field.
func (u *MedicalTreatmentUpsert) AddFee(v float64) *MedicalTreatmentUpsert {
	u.Add(medicaltreatment.FieldFee, v)
	return u
}

// SetMainDoctorID sets the "main_doctor_id" field.
func (u *MedicalTreatmentUpsert) SetMainDoctorID(v uuid.UUID) *MedicalTreatmentUpsert {
	u.Set(medicaltreatment.FieldMainDoctorID, v)
	return u
}

// UpdateMainDoctorID sets the "main_doctor_id" field to the value that was provided on create.
func (u *MedicalTreatmentUpsert) UpdateMainDoctorID() *MedicalTreatmentUpsert {
	u.SetExcluded(medicaltreatment.FieldMainDoctorID)
	return u
}

// SetSupportDoctorIds sets the "support_doctor_ids" field.
func (u *MedicalTreatmentUpsert) SetSupportDoctorIds(v string) *MedicalTreatmentUpsert {
	u.Set(medicaltreatment.FieldSupportDoctorIds, v)
	return u
}

// UpdateSupportDoctorIds sets the "support_doctor_ids" field to the value that was provided on create.
func (u *MedicalTreatmentUpsert) UpdateSupportDoctorIds() *MedicalTreatmentUpsert {
	u.SetExcluded(medicaltreatment.FieldSupportDoctorIds)
	return u
}

// SetSupportNurseIds sets the "support_nurse_ids" field.
func (u *MedicalTreatmentUpsert) SetSupportNurseIds(v string) *MedicalTreatmentUpsert {
	u.Set(medicaltreatment.FieldSupportNurseIds, v)
	return u
}

// UpdateSupportNurseIds sets the "support_nurse_ids" field to the value that was provided on create.
func (u *MedicalTreatmentUpsert) UpdateSupportNurseIds() *MedicalTreatmentUpsert {
	u.SetExcluded(medicaltreatment.FieldSupportNurseIds)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MedicalTreatmentUpsert) SetCreatedAt(v time.Time) *MedicalTreatmentUpsert {
	u.Set(medicaltreatment.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MedicalTreatmentUpsert) UpdateCreatedAt() *MedicalTreatmentUpsert {
	u.SetExcluded(medicaltreatment.FieldCreatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MedicalTreatmentUpsert) SetCreatedBy(v uuid.UUID) *MedicalTreatmentUpsert {
	u.Set(medicaltreatment.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MedicalTreatmentUpsert) UpdateCreatedBy() *MedicalTreatmentUpsert {
	u.SetExcluded(medicaltreatment.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MedicalTreatmentUpsert) SetUpdatedBy(v uuid.UUID) *MedicalTreatmentUpsert {
	u.Set(medicaltreatment.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MedicalTreatmentUpsert) UpdateUpdatedBy() *MedicalTreatmentUpsert {
	u.SetExcluded(medicaltreatment.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MedicalTreatmentUpsert) SetUpdatedAt(v time.Time) *MedicalTreatmentUpsert {
	u.Set(medicaltreatment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MedicalTreatmentUpsert) UpdateUpdatedAt() *MedicalTreatmentUpsert {
	u.SetExcluded(medicaltreatment.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MedicalTreatment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(medicaltreatment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MedicalTreatmentUpsertOne) UpdateNewValues() *MedicalTreatmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(medicaltreatment.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MedicalTreatment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MedicalTreatmentUpsertOne) Ignore() *MedicalTreatmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MedicalTreatmentUpsertOne) DoNothing() *MedicalTreatmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MedicalTreatmentCreate.OnConflict
// documentation for more info.
func (u *MedicalTreatmentUpsertOne) Update(set func(*MedicalTreatmentUpsert)) *MedicalTreatmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MedicalTreatmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetMedicalHistoryID sets the "medical_history_id" field.
func (u *MedicalTreatmentUpsertOne) SetMedicalHistoryID(v uuid.UUID) *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetMedicalHistoryID(v)
	})
}

// UpdateMedicalHistoryID sets the "medical_history_id" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertOne) UpdateMedicalHistoryID() *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateMedicalHistoryID()
	})
}

// SetStartDate sets the "start_date" field.
func (u *MedicalTreatmentUpsertOne) SetStartDate(v time.Time) *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertOne) UpdateStartDate() *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *MedicalTreatmentUpsertOne) SetEndDate(v time.Time) *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertOne) UpdateEndDate() *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateEndDate()
	})
}

// SetName sets the "name" field.
func (u *MedicalTreatmentUpsertOne) SetName(v string) *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertOne) UpdateName() *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateName()
	})
}

// SetResult sets the "result" field.
func (u *MedicalTreatmentUpsertOne) SetResult(v string) *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertOne) UpdateResult() *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateResult()
	})
}

// SetDescription sets the "description" field.
func (u *MedicalTreatmentUpsertOne) SetDescription(v string) *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertOne) UpdateDescription() *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateDescription()
	})
}

// SetFee sets the "fee" field.
func (u *MedicalTreatmentUpsertOne) SetFee(v float64) *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *MedicalTreatmentUpsertOne) AddFee(v float64) *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertOne) UpdateFee() *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateFee()
	})
}

// SetMainDoctorID sets the "main_doctor_id" field.
func (u *MedicalTreatmentUpsertOne) SetMainDoctorID(v uuid.UUID) *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetMainDoctorID(v)
	})
}

// UpdateMainDoctorID sets the "main_doctor_id" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertOne) UpdateMainDoctorID() *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateMainDoctorID()
	})
}

// SetSupportDoctorIds sets the "support_doctor_ids" field.
func (u *MedicalTreatmentUpsertOne) SetSupportDoctorIds(v string) *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetSupportDoctorIds(v)
	})
}

// UpdateSupportDoctorIds sets the "support_doctor_ids" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertOne) UpdateSupportDoctorIds() *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateSupportDoctorIds()
	})
}

// SetSupportNurseIds sets the "support_nurse_ids" field.
func (u *MedicalTreatmentUpsertOne) SetSupportNurseIds(v string) *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetSupportNurseIds(v)
	})
}

// UpdateSupportNurseIds sets the "support_nurse_ids" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertOne) UpdateSupportNurseIds() *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateSupportNurseIds()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *MedicalTreatmentUpsertOne) SetCreatedAt(v time.Time) *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertOne) UpdateCreatedAt() *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *MedicalTreatmentUpsertOne) SetCreatedBy(v uuid.UUID) *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertOne) UpdateCreatedBy() *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MedicalTreatmentUpsertOne) SetUpdatedBy(v uuid.UUID) *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertOne) UpdateUpdatedBy() *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MedicalTreatmentUpsertOne) SetUpdatedAt(v time.Time) *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertOne) UpdateUpdatedAt() *MedicalTreatmentUpsertOne {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *MedicalTreatmentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MedicalTreatmentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MedicalTreatmentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MedicalTreatmentUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MedicalTreatmentUpsertOne.ID is not supported by MySQL driver. Use MedicalTreatmentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MedicalTreatmentUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MedicalTreatmentCreateBulk is the builder for creating many MedicalTreatment entities in bulk.
type MedicalTreatmentCreateBulk struct {
	config
	err      error
	builders []*MedicalTreatmentCreate
	conflict []sql.ConflictOption
}

// Save creates the MedicalTreatment entities in the database.
func (mtcb *MedicalTreatmentCreateBulk) Save(ctx context.Context) ([]*MedicalTreatment, error) {
	if mtcb.err != nil {
		return nil, mtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mtcb.builders))
	nodes := make([]*MedicalTreatment, len(mtcb.builders))
	mutators := make([]Mutator, len(mtcb.builders))
	for i := range mtcb.builders {
		func(i int, root context.Context) {
			builder := mtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MedicalTreatmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mtcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mtcb *MedicalTreatmentCreateBulk) SaveX(ctx context.Context) []*MedicalTreatment {
	v, err := mtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtcb *MedicalTreatmentCreateBulk) Exec(ctx context.Context) error {
	_, err := mtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtcb *MedicalTreatmentCreateBulk) ExecX(ctx context.Context) {
	if err := mtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MedicalTreatment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MedicalTreatmentUpsert) {
//			SetMedicalHistoryID(v+v).
//		}).
//		Exec(ctx)
func (mtcb *MedicalTreatmentCreateBulk) OnConflict(opts ...sql.ConflictOption) *MedicalTreatmentUpsertBulk {
	mtcb.conflict = opts
	return &MedicalTreatmentUpsertBulk{
		create: mtcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MedicalTreatment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mtcb *MedicalTreatmentCreateBulk) OnConflictColumns(columns ...string) *MedicalTreatmentUpsertBulk {
	mtcb.conflict = append(mtcb.conflict, sql.ConflictColumns(columns...))
	return &MedicalTreatmentUpsertBulk{
		create: mtcb,
	}
}

// MedicalTreatmentUpsertBulk is the builder for "upsert"-ing
// a bulk of MedicalTreatment nodes.
type MedicalTreatmentUpsertBulk struct {
	create *MedicalTreatmentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MedicalTreatment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(medicaltreatment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MedicalTreatmentUpsertBulk) UpdateNewValues() *MedicalTreatmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(medicaltreatment.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MedicalTreatment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MedicalTreatmentUpsertBulk) Ignore() *MedicalTreatmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MedicalTreatmentUpsertBulk) DoNothing() *MedicalTreatmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MedicalTreatmentCreateBulk.OnConflict
// documentation for more info.
func (u *MedicalTreatmentUpsertBulk) Update(set func(*MedicalTreatmentUpsert)) *MedicalTreatmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MedicalTreatmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetMedicalHistoryID sets the "medical_history_id" field.
func (u *MedicalTreatmentUpsertBulk) SetMedicalHistoryID(v uuid.UUID) *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetMedicalHistoryID(v)
	})
}

// UpdateMedicalHistoryID sets the "medical_history_id" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertBulk) UpdateMedicalHistoryID() *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateMedicalHistoryID()
	})
}

// SetStartDate sets the "start_date" field.
func (u *MedicalTreatmentUpsertBulk) SetStartDate(v time.Time) *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertBulk) UpdateStartDate() *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *MedicalTreatmentUpsertBulk) SetEndDate(v time.Time) *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertBulk) UpdateEndDate() *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateEndDate()
	})
}

// SetName sets the "name" field.
func (u *MedicalTreatmentUpsertBulk) SetName(v string) *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertBulk) UpdateName() *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateName()
	})
}

// SetResult sets the "result" field.
func (u *MedicalTreatmentUpsertBulk) SetResult(v string) *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertBulk) UpdateResult() *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateResult()
	})
}

// SetDescription sets the "description" field.
func (u *MedicalTreatmentUpsertBulk) SetDescription(v string) *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertBulk) UpdateDescription() *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateDescription()
	})
}

// SetFee sets the "fee" field.
func (u *MedicalTreatmentUpsertBulk) SetFee(v float64) *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *MedicalTreatmentUpsertBulk) AddFee(v float64) *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertBulk) UpdateFee() *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateFee()
	})
}

// SetMainDoctorID sets the "main_doctor_id" field.
func (u *MedicalTreatmentUpsertBulk) SetMainDoctorID(v uuid.UUID) *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetMainDoctorID(v)
	})
}

// UpdateMainDoctorID sets the "main_doctor_id" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertBulk) UpdateMainDoctorID() *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateMainDoctorID()
	})
}

// SetSupportDoctorIds sets the "support_doctor_ids" field.
func (u *MedicalTreatmentUpsertBulk) SetSupportDoctorIds(v string) *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetSupportDoctorIds(v)
	})
}

// UpdateSupportDoctorIds sets the "support_doctor_ids" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertBulk) UpdateSupportDoctorIds() *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateSupportDoctorIds()
	})
}

// SetSupportNurseIds sets the "support_nurse_ids" field.
func (u *MedicalTreatmentUpsertBulk) SetSupportNurseIds(v string) *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetSupportNurseIds(v)
	})
}

// UpdateSupportNurseIds sets the "support_nurse_ids" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertBulk) UpdateSupportNurseIds() *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateSupportNurseIds()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *MedicalTreatmentUpsertBulk) SetCreatedAt(v time.Time) *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertBulk) UpdateCreatedAt() *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *MedicalTreatmentUpsertBulk) SetCreatedBy(v uuid.UUID) *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertBulk) UpdateCreatedBy() *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MedicalTreatmentUpsertBulk) SetUpdatedBy(v uuid.UUID) *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertBulk) UpdateUpdatedBy() *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MedicalTreatmentUpsertBulk) SetUpdatedAt(v time.Time) *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MedicalTreatmentUpsertBulk) UpdateUpdatedAt() *MedicalTreatmentUpsertBulk {
	return u.Update(func(s *MedicalTreatmentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *MedicalTreatmentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MedicalTreatmentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MedicalTreatmentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MedicalTreatmentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
