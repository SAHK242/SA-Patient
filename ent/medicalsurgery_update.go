// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"patient/ent/medicalhistories"
	"patient/ent/medicalsurgery"
	"patient/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MedicalSurgeryUpdate is the builder for updating MedicalSurgery entities.
type MedicalSurgeryUpdate struct {
	config
	hooks    []Hook
	mutation *MedicalSurgeryMutation
}

// Where appends a list predicates to the MedicalSurgeryUpdate builder.
func (msu *MedicalSurgeryUpdate) Where(ps ...predicate.MedicalSurgery) *MedicalSurgeryUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetMedicalHistoryID sets the "medical_history_id" field.
func (msu *MedicalSurgeryUpdate) SetMedicalHistoryID(u uuid.UUID) *MedicalSurgeryUpdate {
	msu.mutation.SetMedicalHistoryID(u)
	return msu
}

// SetNillableMedicalHistoryID sets the "medical_history_id" field if the given value is not nil.
func (msu *MedicalSurgeryUpdate) SetNillableMedicalHistoryID(u *uuid.UUID) *MedicalSurgeryUpdate {
	if u != nil {
		msu.SetMedicalHistoryID(*u)
	}
	return msu
}

// SetStartDate sets the "start_date" field.
func (msu *MedicalSurgeryUpdate) SetStartDate(t time.Time) *MedicalSurgeryUpdate {
	msu.mutation.SetStartDate(t)
	return msu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (msu *MedicalSurgeryUpdate) SetNillableStartDate(t *time.Time) *MedicalSurgeryUpdate {
	if t != nil {
		msu.SetStartDate(*t)
	}
	return msu
}

// SetEndDate sets the "end_date" field.
func (msu *MedicalSurgeryUpdate) SetEndDate(t time.Time) *MedicalSurgeryUpdate {
	msu.mutation.SetEndDate(t)
	return msu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (msu *MedicalSurgeryUpdate) SetNillableEndDate(t *time.Time) *MedicalSurgeryUpdate {
	if t != nil {
		msu.SetEndDate(*t)
	}
	return msu
}

// SetName sets the "name" field.
func (msu *MedicalSurgeryUpdate) SetName(s string) *MedicalSurgeryUpdate {
	msu.mutation.SetName(s)
	return msu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (msu *MedicalSurgeryUpdate) SetNillableName(s *string) *MedicalSurgeryUpdate {
	if s != nil {
		msu.SetName(*s)
	}
	return msu
}

// SetResult sets the "result" field.
func (msu *MedicalSurgeryUpdate) SetResult(s string) *MedicalSurgeryUpdate {
	msu.mutation.SetResult(s)
	return msu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (msu *MedicalSurgeryUpdate) SetNillableResult(s *string) *MedicalSurgeryUpdate {
	if s != nil {
		msu.SetResult(*s)
	}
	return msu
}

// SetDescription sets the "description" field.
func (msu *MedicalSurgeryUpdate) SetDescription(s string) *MedicalSurgeryUpdate {
	msu.mutation.SetDescription(s)
	return msu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (msu *MedicalSurgeryUpdate) SetNillableDescription(s *string) *MedicalSurgeryUpdate {
	if s != nil {
		msu.SetDescription(*s)
	}
	return msu
}

// SetFee sets the "fee" field.
func (msu *MedicalSurgeryUpdate) SetFee(f float64) *MedicalSurgeryUpdate {
	msu.mutation.ResetFee()
	msu.mutation.SetFee(f)
	return msu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (msu *MedicalSurgeryUpdate) SetNillableFee(f *float64) *MedicalSurgeryUpdate {
	if f != nil {
		msu.SetFee(*f)
	}
	return msu
}

// AddFee adds f to the "fee" field.
func (msu *MedicalSurgeryUpdate) AddFee(f float64) *MedicalSurgeryUpdate {
	msu.mutation.AddFee(f)
	return msu
}

// SetMainDoctorID sets the "main_doctor_id" field.
func (msu *MedicalSurgeryUpdate) SetMainDoctorID(u uuid.UUID) *MedicalSurgeryUpdate {
	msu.mutation.SetMainDoctorID(u)
	return msu
}

// SetNillableMainDoctorID sets the "main_doctor_id" field if the given value is not nil.
func (msu *MedicalSurgeryUpdate) SetNillableMainDoctorID(u *uuid.UUID) *MedicalSurgeryUpdate {
	if u != nil {
		msu.SetMainDoctorID(*u)
	}
	return msu
}

// SetSupportDoctorIds sets the "support_doctor_ids" field.
func (msu *MedicalSurgeryUpdate) SetSupportDoctorIds(s string) *MedicalSurgeryUpdate {
	msu.mutation.SetSupportDoctorIds(s)
	return msu
}

// SetNillableSupportDoctorIds sets the "support_doctor_ids" field if the given value is not nil.
func (msu *MedicalSurgeryUpdate) SetNillableSupportDoctorIds(s *string) *MedicalSurgeryUpdate {
	if s != nil {
		msu.SetSupportDoctorIds(*s)
	}
	return msu
}

// SetSupportNurseIds sets the "support_nurse_ids" field.
func (msu *MedicalSurgeryUpdate) SetSupportNurseIds(s string) *MedicalSurgeryUpdate {
	msu.mutation.SetSupportNurseIds(s)
	return msu
}

// SetNillableSupportNurseIds sets the "support_nurse_ids" field if the given value is not nil.
func (msu *MedicalSurgeryUpdate) SetNillableSupportNurseIds(s *string) *MedicalSurgeryUpdate {
	if s != nil {
		msu.SetSupportNurseIds(*s)
	}
	return msu
}

// SetCreatedAt sets the "created_at" field.
func (msu *MedicalSurgeryUpdate) SetCreatedAt(t time.Time) *MedicalSurgeryUpdate {
	msu.mutation.SetCreatedAt(t)
	return msu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (msu *MedicalSurgeryUpdate) SetNillableCreatedAt(t *time.Time) *MedicalSurgeryUpdate {
	if t != nil {
		msu.SetCreatedAt(*t)
	}
	return msu
}

// SetCreatedBy sets the "created_by" field.
func (msu *MedicalSurgeryUpdate) SetCreatedBy(u uuid.UUID) *MedicalSurgeryUpdate {
	msu.mutation.SetCreatedBy(u)
	return msu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (msu *MedicalSurgeryUpdate) SetNillableCreatedBy(u *uuid.UUID) *MedicalSurgeryUpdate {
	if u != nil {
		msu.SetCreatedBy(*u)
	}
	return msu
}

// SetUpdatedBy sets the "updated_by" field.
func (msu *MedicalSurgeryUpdate) SetUpdatedBy(u uuid.UUID) *MedicalSurgeryUpdate {
	msu.mutation.SetUpdatedBy(u)
	return msu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (msu *MedicalSurgeryUpdate) SetNillableUpdatedBy(u *uuid.UUID) *MedicalSurgeryUpdate {
	if u != nil {
		msu.SetUpdatedBy(*u)
	}
	return msu
}

// SetUpdatedAt sets the "updated_at" field.
func (msu *MedicalSurgeryUpdate) SetUpdatedAt(t time.Time) *MedicalSurgeryUpdate {
	msu.mutation.SetUpdatedAt(t)
	return msu
}

// SetMedicalHistoriesID sets the "medical_histories" edge to the MedicalHistories entity by ID.
func (msu *MedicalSurgeryUpdate) SetMedicalHistoriesID(id uuid.UUID) *MedicalSurgeryUpdate {
	msu.mutation.SetMedicalHistoriesID(id)
	return msu
}

// SetMedicalHistories sets the "medical_histories" edge to the MedicalHistories entity.
func (msu *MedicalSurgeryUpdate) SetMedicalHistories(m *MedicalHistories) *MedicalSurgeryUpdate {
	return msu.SetMedicalHistoriesID(m.ID)
}

// Mutation returns the MedicalSurgeryMutation object of the builder.
func (msu *MedicalSurgeryUpdate) Mutation() *MedicalSurgeryMutation {
	return msu.mutation
}

// ClearMedicalHistories clears the "medical_histories" edge to the MedicalHistories entity.
func (msu *MedicalSurgeryUpdate) ClearMedicalHistories() *MedicalSurgeryUpdate {
	msu.mutation.ClearMedicalHistories()
	return msu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MedicalSurgeryUpdate) Save(ctx context.Context) (int, error) {
	msu.defaults()
	return withHooks(ctx, msu.sqlSave, msu.mutation, msu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MedicalSurgeryUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MedicalSurgeryUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MedicalSurgeryUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msu *MedicalSurgeryUpdate) defaults() {
	if _, ok := msu.mutation.UpdatedAt(); !ok {
		v := medicalsurgery.UpdateDefaultUpdatedAt()
		msu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msu *MedicalSurgeryUpdate) check() error {
	if v, ok := msu.mutation.Name(); ok {
		if err := medicalsurgery.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MedicalSurgery.name": %w`, err)}
		}
	}
	if msu.mutation.MedicalHistoriesCleared() && len(msu.mutation.MedicalHistoriesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MedicalSurgery.medical_histories"`)
	}
	return nil
}

func (msu *MedicalSurgeryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := msu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(medicalsurgery.Table, medicalsurgery.Columns, sqlgraph.NewFieldSpec(medicalsurgery.FieldID, field.TypeUUID))
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.StartDate(); ok {
		_spec.SetField(medicalsurgery.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := msu.mutation.EndDate(); ok {
		_spec.SetField(medicalsurgery.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := msu.mutation.Name(); ok {
		_spec.SetField(medicalsurgery.FieldName, field.TypeString, value)
	}
	if value, ok := msu.mutation.Result(); ok {
		_spec.SetField(medicalsurgery.FieldResult, field.TypeString, value)
	}
	if value, ok := msu.mutation.Description(); ok {
		_spec.SetField(medicalsurgery.FieldDescription, field.TypeString, value)
	}
	if value, ok := msu.mutation.Fee(); ok {
		_spec.SetField(medicalsurgery.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := msu.mutation.AddedFee(); ok {
		_spec.AddField(medicalsurgery.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := msu.mutation.MainDoctorID(); ok {
		_spec.SetField(medicalsurgery.FieldMainDoctorID, field.TypeUUID, value)
	}
	if value, ok := msu.mutation.SupportDoctorIds(); ok {
		_spec.SetField(medicalsurgery.FieldSupportDoctorIds, field.TypeString, value)
	}
	if value, ok := msu.mutation.SupportNurseIds(); ok {
		_spec.SetField(medicalsurgery.FieldSupportNurseIds, field.TypeString, value)
	}
	if value, ok := msu.mutation.CreatedAt(); ok {
		_spec.SetField(medicalsurgery.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := msu.mutation.CreatedBy(); ok {
		_spec.SetField(medicalsurgery.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := msu.mutation.UpdatedBy(); ok {
		_spec.SetField(medicalsurgery.FieldUpdatedBy, field.TypeUUID, value)
	}
	if value, ok := msu.mutation.UpdatedAt(); ok {
		_spec.SetField(medicalsurgery.FieldUpdatedAt, field.TypeTime, value)
	}
	if msu.mutation.MedicalHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalsurgery.MedicalHistoriesTable,
			Columns: []string{medicalsurgery.MedicalHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msu.mutation.MedicalHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalsurgery.MedicalHistoriesTable,
			Columns: []string{medicalsurgery.MedicalHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalsurgery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	msu.mutation.done = true
	return n, nil
}

// MedicalSurgeryUpdateOne is the builder for updating a single MedicalSurgery entity.
type MedicalSurgeryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MedicalSurgeryMutation
}

// SetMedicalHistoryID sets the "medical_history_id" field.
func (msuo *MedicalSurgeryUpdateOne) SetMedicalHistoryID(u uuid.UUID) *MedicalSurgeryUpdateOne {
	msuo.mutation.SetMedicalHistoryID(u)
	return msuo
}

// SetNillableMedicalHistoryID sets the "medical_history_id" field if the given value is not nil.
func (msuo *MedicalSurgeryUpdateOne) SetNillableMedicalHistoryID(u *uuid.UUID) *MedicalSurgeryUpdateOne {
	if u != nil {
		msuo.SetMedicalHistoryID(*u)
	}
	return msuo
}

// SetStartDate sets the "start_date" field.
func (msuo *MedicalSurgeryUpdateOne) SetStartDate(t time.Time) *MedicalSurgeryUpdateOne {
	msuo.mutation.SetStartDate(t)
	return msuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (msuo *MedicalSurgeryUpdateOne) SetNillableStartDate(t *time.Time) *MedicalSurgeryUpdateOne {
	if t != nil {
		msuo.SetStartDate(*t)
	}
	return msuo
}

// SetEndDate sets the "end_date" field.
func (msuo *MedicalSurgeryUpdateOne) SetEndDate(t time.Time) *MedicalSurgeryUpdateOne {
	msuo.mutation.SetEndDate(t)
	return msuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (msuo *MedicalSurgeryUpdateOne) SetNillableEndDate(t *time.Time) *MedicalSurgeryUpdateOne {
	if t != nil {
		msuo.SetEndDate(*t)
	}
	return msuo
}

// SetName sets the "name" field.
func (msuo *MedicalSurgeryUpdateOne) SetName(s string) *MedicalSurgeryUpdateOne {
	msuo.mutation.SetName(s)
	return msuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (msuo *MedicalSurgeryUpdateOne) SetNillableName(s *string) *MedicalSurgeryUpdateOne {
	if s != nil {
		msuo.SetName(*s)
	}
	return msuo
}

// SetResult sets the "result" field.
func (msuo *MedicalSurgeryUpdateOne) SetResult(s string) *MedicalSurgeryUpdateOne {
	msuo.mutation.SetResult(s)
	return msuo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (msuo *MedicalSurgeryUpdateOne) SetNillableResult(s *string) *MedicalSurgeryUpdateOne {
	if s != nil {
		msuo.SetResult(*s)
	}
	return msuo
}

// SetDescription sets the "description" field.
func (msuo *MedicalSurgeryUpdateOne) SetDescription(s string) *MedicalSurgeryUpdateOne {
	msuo.mutation.SetDescription(s)
	return msuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (msuo *MedicalSurgeryUpdateOne) SetNillableDescription(s *string) *MedicalSurgeryUpdateOne {
	if s != nil {
		msuo.SetDescription(*s)
	}
	return msuo
}

// SetFee sets the "fee" field.
func (msuo *MedicalSurgeryUpdateOne) SetFee(f float64) *MedicalSurgeryUpdateOne {
	msuo.mutation.ResetFee()
	msuo.mutation.SetFee(f)
	return msuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (msuo *MedicalSurgeryUpdateOne) SetNillableFee(f *float64) *MedicalSurgeryUpdateOne {
	if f != nil {
		msuo.SetFee(*f)
	}
	return msuo
}

// AddFee adds f to the "fee" field.
func (msuo *MedicalSurgeryUpdateOne) AddFee(f float64) *MedicalSurgeryUpdateOne {
	msuo.mutation.AddFee(f)
	return msuo
}

// SetMainDoctorID sets the "main_doctor_id" field.
func (msuo *MedicalSurgeryUpdateOne) SetMainDoctorID(u uuid.UUID) *MedicalSurgeryUpdateOne {
	msuo.mutation.SetMainDoctorID(u)
	return msuo
}

// SetNillableMainDoctorID sets the "main_doctor_id" field if the given value is not nil.
func (msuo *MedicalSurgeryUpdateOne) SetNillableMainDoctorID(u *uuid.UUID) *MedicalSurgeryUpdateOne {
	if u != nil {
		msuo.SetMainDoctorID(*u)
	}
	return msuo
}

// SetSupportDoctorIds sets the "support_doctor_ids" field.
func (msuo *MedicalSurgeryUpdateOne) SetSupportDoctorIds(s string) *MedicalSurgeryUpdateOne {
	msuo.mutation.SetSupportDoctorIds(s)
	return msuo
}

// SetNillableSupportDoctorIds sets the "support_doctor_ids" field if the given value is not nil.
func (msuo *MedicalSurgeryUpdateOne) SetNillableSupportDoctorIds(s *string) *MedicalSurgeryUpdateOne {
	if s != nil {
		msuo.SetSupportDoctorIds(*s)
	}
	return msuo
}

// SetSupportNurseIds sets the "support_nurse_ids" field.
func (msuo *MedicalSurgeryUpdateOne) SetSupportNurseIds(s string) *MedicalSurgeryUpdateOne {
	msuo.mutation.SetSupportNurseIds(s)
	return msuo
}

// SetNillableSupportNurseIds sets the "support_nurse_ids" field if the given value is not nil.
func (msuo *MedicalSurgeryUpdateOne) SetNillableSupportNurseIds(s *string) *MedicalSurgeryUpdateOne {
	if s != nil {
		msuo.SetSupportNurseIds(*s)
	}
	return msuo
}

// SetCreatedAt sets the "created_at" field.
func (msuo *MedicalSurgeryUpdateOne) SetCreatedAt(t time.Time) *MedicalSurgeryUpdateOne {
	msuo.mutation.SetCreatedAt(t)
	return msuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (msuo *MedicalSurgeryUpdateOne) SetNillableCreatedAt(t *time.Time) *MedicalSurgeryUpdateOne {
	if t != nil {
		msuo.SetCreatedAt(*t)
	}
	return msuo
}

// SetCreatedBy sets the "created_by" field.
func (msuo *MedicalSurgeryUpdateOne) SetCreatedBy(u uuid.UUID) *MedicalSurgeryUpdateOne {
	msuo.mutation.SetCreatedBy(u)
	return msuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (msuo *MedicalSurgeryUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *MedicalSurgeryUpdateOne {
	if u != nil {
		msuo.SetCreatedBy(*u)
	}
	return msuo
}

// SetUpdatedBy sets the "updated_by" field.
func (msuo *MedicalSurgeryUpdateOne) SetUpdatedBy(u uuid.UUID) *MedicalSurgeryUpdateOne {
	msuo.mutation.SetUpdatedBy(u)
	return msuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (msuo *MedicalSurgeryUpdateOne) SetNillableUpdatedBy(u *uuid.UUID) *MedicalSurgeryUpdateOne {
	if u != nil {
		msuo.SetUpdatedBy(*u)
	}
	return msuo
}

// SetUpdatedAt sets the "updated_at" field.
func (msuo *MedicalSurgeryUpdateOne) SetUpdatedAt(t time.Time) *MedicalSurgeryUpdateOne {
	msuo.mutation.SetUpdatedAt(t)
	return msuo
}

// SetMedicalHistoriesID sets the "medical_histories" edge to the MedicalHistories entity by ID.
func (msuo *MedicalSurgeryUpdateOne) SetMedicalHistoriesID(id uuid.UUID) *MedicalSurgeryUpdateOne {
	msuo.mutation.SetMedicalHistoriesID(id)
	return msuo
}

// SetMedicalHistories sets the "medical_histories" edge to the MedicalHistories entity.
func (msuo *MedicalSurgeryUpdateOne) SetMedicalHistories(m *MedicalHistories) *MedicalSurgeryUpdateOne {
	return msuo.SetMedicalHistoriesID(m.ID)
}

// Mutation returns the MedicalSurgeryMutation object of the builder.
func (msuo *MedicalSurgeryUpdateOne) Mutation() *MedicalSurgeryMutation {
	return msuo.mutation
}

// ClearMedicalHistories clears the "medical_histories" edge to the MedicalHistories entity.
func (msuo *MedicalSurgeryUpdateOne) ClearMedicalHistories() *MedicalSurgeryUpdateOne {
	msuo.mutation.ClearMedicalHistories()
	return msuo
}

// Where appends a list predicates to the MedicalSurgeryUpdate builder.
func (msuo *MedicalSurgeryUpdateOne) Where(ps ...predicate.MedicalSurgery) *MedicalSurgeryUpdateOne {
	msuo.mutation.Where(ps...)
	return msuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MedicalSurgeryUpdateOne) Select(field string, fields ...string) *MedicalSurgeryUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MedicalSurgery entity.
func (msuo *MedicalSurgeryUpdateOne) Save(ctx context.Context) (*MedicalSurgery, error) {
	msuo.defaults()
	return withHooks(ctx, msuo.sqlSave, msuo.mutation, msuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MedicalSurgeryUpdateOne) SaveX(ctx context.Context) *MedicalSurgery {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MedicalSurgeryUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MedicalSurgeryUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msuo *MedicalSurgeryUpdateOne) defaults() {
	if _, ok := msuo.mutation.UpdatedAt(); !ok {
		v := medicalsurgery.UpdateDefaultUpdatedAt()
		msuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msuo *MedicalSurgeryUpdateOne) check() error {
	if v, ok := msuo.mutation.Name(); ok {
		if err := medicalsurgery.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MedicalSurgery.name": %w`, err)}
		}
	}
	if msuo.mutation.MedicalHistoriesCleared() && len(msuo.mutation.MedicalHistoriesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MedicalSurgery.medical_histories"`)
	}
	return nil
}

func (msuo *MedicalSurgeryUpdateOne) sqlSave(ctx context.Context) (_node *MedicalSurgery, err error) {
	if err := msuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(medicalsurgery.Table, medicalsurgery.Columns, sqlgraph.NewFieldSpec(medicalsurgery.FieldID, field.TypeUUID))
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MedicalSurgery.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, medicalsurgery.FieldID)
		for _, f := range fields {
			if !medicalsurgery.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != medicalsurgery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.StartDate(); ok {
		_spec.SetField(medicalsurgery.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := msuo.mutation.EndDate(); ok {
		_spec.SetField(medicalsurgery.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := msuo.mutation.Name(); ok {
		_spec.SetField(medicalsurgery.FieldName, field.TypeString, value)
	}
	if value, ok := msuo.mutation.Result(); ok {
		_spec.SetField(medicalsurgery.FieldResult, field.TypeString, value)
	}
	if value, ok := msuo.mutation.Description(); ok {
		_spec.SetField(medicalsurgery.FieldDescription, field.TypeString, value)
	}
	if value, ok := msuo.mutation.Fee(); ok {
		_spec.SetField(medicalsurgery.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := msuo.mutation.AddedFee(); ok {
		_spec.AddField(medicalsurgery.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := msuo.mutation.MainDoctorID(); ok {
		_spec.SetField(medicalsurgery.FieldMainDoctorID, field.TypeUUID, value)
	}
	if value, ok := msuo.mutation.SupportDoctorIds(); ok {
		_spec.SetField(medicalsurgery.FieldSupportDoctorIds, field.TypeString, value)
	}
	if value, ok := msuo.mutation.SupportNurseIds(); ok {
		_spec.SetField(medicalsurgery.FieldSupportNurseIds, field.TypeString, value)
	}
	if value, ok := msuo.mutation.CreatedAt(); ok {
		_spec.SetField(medicalsurgery.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := msuo.mutation.CreatedBy(); ok {
		_spec.SetField(medicalsurgery.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := msuo.mutation.UpdatedBy(); ok {
		_spec.SetField(medicalsurgery.FieldUpdatedBy, field.TypeUUID, value)
	}
	if value, ok := msuo.mutation.UpdatedAt(); ok {
		_spec.SetField(medicalsurgery.FieldUpdatedAt, field.TypeTime, value)
	}
	if msuo.mutation.MedicalHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalsurgery.MedicalHistoriesTable,
			Columns: []string{medicalsurgery.MedicalHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msuo.mutation.MedicalHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalsurgery.MedicalHistoriesTable,
			Columns: []string{medicalsurgery.MedicalHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MedicalSurgery{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalsurgery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	msuo.mutation.done = true
	return _node, nil
}
