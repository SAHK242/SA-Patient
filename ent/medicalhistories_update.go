// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"patient/ent/medicalhistories"
	"patient/ent/medicalprescription"
	"patient/ent/medicalsurgery"
	"patient/ent/medicaltreatment"
	"patient/ent/patient"
	"patient/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MedicalHistoriesUpdate is the builder for updating MedicalHistories entities.
type MedicalHistoriesUpdate struct {
	config
	hooks    []Hook
	mutation *MedicalHistoriesMutation
}

// Where appends a list predicates to the MedicalHistoriesUpdate builder.
func (mhu *MedicalHistoriesUpdate) Where(ps ...predicate.MedicalHistories) *MedicalHistoriesUpdate {
	mhu.mutation.Where(ps...)
	return mhu
}

// SetPatientID sets the "patient_id" field.
func (mhu *MedicalHistoriesUpdate) SetPatientID(u uuid.UUID) *MedicalHistoriesUpdate {
	mhu.mutation.SetPatientID(u)
	return mhu
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (mhu *MedicalHistoriesUpdate) SetNillablePatientID(u *uuid.UUID) *MedicalHistoriesUpdate {
	if u != nil {
		mhu.SetPatientID(*u)
	}
	return mhu
}

// SetReason sets the "reason" field.
func (mhu *MedicalHistoriesUpdate) SetReason(s string) *MedicalHistoriesUpdate {
	mhu.mutation.SetReason(s)
	return mhu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (mhu *MedicalHistoriesUpdate) SetNillableReason(s *string) *MedicalHistoriesUpdate {
	if s != nil {
		mhu.SetReason(*s)
	}
	return mhu
}

// SetDiagnosis sets the "diagnosis" field.
func (mhu *MedicalHistoriesUpdate) SetDiagnosis(s string) *MedicalHistoriesUpdate {
	mhu.mutation.SetDiagnosis(s)
	return mhu
}

// SetNillableDiagnosis sets the "diagnosis" field if the given value is not nil.
func (mhu *MedicalHistoriesUpdate) SetNillableDiagnosis(s *string) *MedicalHistoriesUpdate {
	if s != nil {
		mhu.SetDiagnosis(*s)
	}
	return mhu
}

// SetHasTreatment sets the "has_treatment" field.
func (mhu *MedicalHistoriesUpdate) SetHasTreatment(b bool) *MedicalHistoriesUpdate {
	mhu.mutation.SetHasTreatment(b)
	return mhu
}

// SetNillableHasTreatment sets the "has_treatment" field if the given value is not nil.
func (mhu *MedicalHistoriesUpdate) SetNillableHasTreatment(b *bool) *MedicalHistoriesUpdate {
	if b != nil {
		mhu.SetHasTreatment(*b)
	}
	return mhu
}

// SetHasSurgery sets the "has_surgery" field.
func (mhu *MedicalHistoriesUpdate) SetHasSurgery(b bool) *MedicalHistoriesUpdate {
	mhu.mutation.SetHasSurgery(b)
	return mhu
}

// SetNillableHasSurgery sets the "has_surgery" field if the given value is not nil.
func (mhu *MedicalHistoriesUpdate) SetNillableHasSurgery(b *bool) *MedicalHistoriesUpdate {
	if b != nil {
		mhu.SetHasSurgery(*b)
	}
	return mhu
}

// SetHasPrescription sets the "has_prescription" field.
func (mhu *MedicalHistoriesUpdate) SetHasPrescription(b bool) *MedicalHistoriesUpdate {
	mhu.mutation.SetHasPrescription(b)
	return mhu
}

// SetNillableHasPrescription sets the "has_prescription" field if the given value is not nil.
func (mhu *MedicalHistoriesUpdate) SetNillableHasPrescription(b *bool) *MedicalHistoriesUpdate {
	if b != nil {
		mhu.SetHasPrescription(*b)
	}
	return mhu
}

// SetDoctorNotes sets the "doctor_notes" field.
func (mhu *MedicalHistoriesUpdate) SetDoctorNotes(s string) *MedicalHistoriesUpdate {
	mhu.mutation.SetDoctorNotes(s)
	return mhu
}

// SetNillableDoctorNotes sets the "doctor_notes" field if the given value is not nil.
func (mhu *MedicalHistoriesUpdate) SetNillableDoctorNotes(s *string) *MedicalHistoriesUpdate {
	if s != nil {
		mhu.SetDoctorNotes(*s)
	}
	return mhu
}

// ClearDoctorNotes clears the value of the "doctor_notes" field.
func (mhu *MedicalHistoriesUpdate) ClearDoctorNotes() *MedicalHistoriesUpdate {
	mhu.mutation.ClearDoctorNotes()
	return mhu
}

// SetMedicalEndDate sets the "medical_end_date" field.
func (mhu *MedicalHistoriesUpdate) SetMedicalEndDate(t time.Time) *MedicalHistoriesUpdate {
	mhu.mutation.SetMedicalEndDate(t)
	return mhu
}

// SetNillableMedicalEndDate sets the "medical_end_date" field if the given value is not nil.
func (mhu *MedicalHistoriesUpdate) SetNillableMedicalEndDate(t *time.Time) *MedicalHistoriesUpdate {
	if t != nil {
		mhu.SetMedicalEndDate(*t)
	}
	return mhu
}

// ClearMedicalEndDate clears the value of the "medical_end_date" field.
func (mhu *MedicalHistoriesUpdate) ClearMedicalEndDate() *MedicalHistoriesUpdate {
	mhu.mutation.ClearMedicalEndDate()
	return mhu
}

// SetCreatedAt sets the "created_at" field.
func (mhu *MedicalHistoriesUpdate) SetCreatedAt(t time.Time) *MedicalHistoriesUpdate {
	mhu.mutation.SetCreatedAt(t)
	return mhu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mhu *MedicalHistoriesUpdate) SetNillableCreatedAt(t *time.Time) *MedicalHistoriesUpdate {
	if t != nil {
		mhu.SetCreatedAt(*t)
	}
	return mhu
}

// SetUpdatedAt sets the "updated_at" field.
func (mhu *MedicalHistoriesUpdate) SetUpdatedAt(t time.Time) *MedicalHistoriesUpdate {
	mhu.mutation.SetUpdatedAt(t)
	return mhu
}

// SetCreatedBy sets the "created_by" field.
func (mhu *MedicalHistoriesUpdate) SetCreatedBy(u uuid.UUID) *MedicalHistoriesUpdate {
	mhu.mutation.SetCreatedBy(u)
	return mhu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mhu *MedicalHistoriesUpdate) SetNillableCreatedBy(u *uuid.UUID) *MedicalHistoriesUpdate {
	if u != nil {
		mhu.SetCreatedBy(*u)
	}
	return mhu
}

// SetUpdatedBy sets the "updated_by" field.
func (mhu *MedicalHistoriesUpdate) SetUpdatedBy(u uuid.UUID) *MedicalHistoriesUpdate {
	mhu.mutation.SetUpdatedBy(u)
	return mhu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mhu *MedicalHistoriesUpdate) SetNillableUpdatedBy(u *uuid.UUID) *MedicalHistoriesUpdate {
	if u != nil {
		mhu.SetUpdatedBy(*u)
	}
	return mhu
}

// SetPatient sets the "patient" edge to the Patient entity.
func (mhu *MedicalHistoriesUpdate) SetPatient(p *Patient) *MedicalHistoriesUpdate {
	return mhu.SetPatientID(p.ID)
}

// AddMedicalPrescriptionIDs adds the "medical_prescription" edge to the MedicalPrescription entity by IDs.
func (mhu *MedicalHistoriesUpdate) AddMedicalPrescriptionIDs(ids ...uuid.UUID) *MedicalHistoriesUpdate {
	mhu.mutation.AddMedicalPrescriptionIDs(ids...)
	return mhu
}

// AddMedicalPrescription adds the "medical_prescription" edges to the MedicalPrescription entity.
func (mhu *MedicalHistoriesUpdate) AddMedicalPrescription(m ...*MedicalPrescription) *MedicalHistoriesUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mhu.AddMedicalPrescriptionIDs(ids...)
}

// AddMedicalTreatmentIDs adds the "medical_treatment" edge to the MedicalTreatment entity by IDs.
func (mhu *MedicalHistoriesUpdate) AddMedicalTreatmentIDs(ids ...uuid.UUID) *MedicalHistoriesUpdate {
	mhu.mutation.AddMedicalTreatmentIDs(ids...)
	return mhu
}

// AddMedicalTreatment adds the "medical_treatment" edges to the MedicalTreatment entity.
func (mhu *MedicalHistoriesUpdate) AddMedicalTreatment(m ...*MedicalTreatment) *MedicalHistoriesUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mhu.AddMedicalTreatmentIDs(ids...)
}

// AddMedicalSurgeryIDs adds the "medical_surgery" edge to the MedicalSurgery entity by IDs.
func (mhu *MedicalHistoriesUpdate) AddMedicalSurgeryIDs(ids ...uuid.UUID) *MedicalHistoriesUpdate {
	mhu.mutation.AddMedicalSurgeryIDs(ids...)
	return mhu
}

// AddMedicalSurgery adds the "medical_surgery" edges to the MedicalSurgery entity.
func (mhu *MedicalHistoriesUpdate) AddMedicalSurgery(m ...*MedicalSurgery) *MedicalHistoriesUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mhu.AddMedicalSurgeryIDs(ids...)
}

// Mutation returns the MedicalHistoriesMutation object of the builder.
func (mhu *MedicalHistoriesUpdate) Mutation() *MedicalHistoriesMutation {
	return mhu.mutation
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (mhu *MedicalHistoriesUpdate) ClearPatient() *MedicalHistoriesUpdate {
	mhu.mutation.ClearPatient()
	return mhu
}

// ClearMedicalPrescription clears all "medical_prescription" edges to the MedicalPrescription entity.
func (mhu *MedicalHistoriesUpdate) ClearMedicalPrescription() *MedicalHistoriesUpdate {
	mhu.mutation.ClearMedicalPrescription()
	return mhu
}

// RemoveMedicalPrescriptionIDs removes the "medical_prescription" edge to MedicalPrescription entities by IDs.
func (mhu *MedicalHistoriesUpdate) RemoveMedicalPrescriptionIDs(ids ...uuid.UUID) *MedicalHistoriesUpdate {
	mhu.mutation.RemoveMedicalPrescriptionIDs(ids...)
	return mhu
}

// RemoveMedicalPrescription removes "medical_prescription" edges to MedicalPrescription entities.
func (mhu *MedicalHistoriesUpdate) RemoveMedicalPrescription(m ...*MedicalPrescription) *MedicalHistoriesUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mhu.RemoveMedicalPrescriptionIDs(ids...)
}

// ClearMedicalTreatment clears all "medical_treatment" edges to the MedicalTreatment entity.
func (mhu *MedicalHistoriesUpdate) ClearMedicalTreatment() *MedicalHistoriesUpdate {
	mhu.mutation.ClearMedicalTreatment()
	return mhu
}

// RemoveMedicalTreatmentIDs removes the "medical_treatment" edge to MedicalTreatment entities by IDs.
func (mhu *MedicalHistoriesUpdate) RemoveMedicalTreatmentIDs(ids ...uuid.UUID) *MedicalHistoriesUpdate {
	mhu.mutation.RemoveMedicalTreatmentIDs(ids...)
	return mhu
}

// RemoveMedicalTreatment removes "medical_treatment" edges to MedicalTreatment entities.
func (mhu *MedicalHistoriesUpdate) RemoveMedicalTreatment(m ...*MedicalTreatment) *MedicalHistoriesUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mhu.RemoveMedicalTreatmentIDs(ids...)
}

// ClearMedicalSurgery clears all "medical_surgery" edges to the MedicalSurgery entity.
func (mhu *MedicalHistoriesUpdate) ClearMedicalSurgery() *MedicalHistoriesUpdate {
	mhu.mutation.ClearMedicalSurgery()
	return mhu
}

// RemoveMedicalSurgeryIDs removes the "medical_surgery" edge to MedicalSurgery entities by IDs.
func (mhu *MedicalHistoriesUpdate) RemoveMedicalSurgeryIDs(ids ...uuid.UUID) *MedicalHistoriesUpdate {
	mhu.mutation.RemoveMedicalSurgeryIDs(ids...)
	return mhu
}

// RemoveMedicalSurgery removes "medical_surgery" edges to MedicalSurgery entities.
func (mhu *MedicalHistoriesUpdate) RemoveMedicalSurgery(m ...*MedicalSurgery) *MedicalHistoriesUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mhu.RemoveMedicalSurgeryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mhu *MedicalHistoriesUpdate) Save(ctx context.Context) (int, error) {
	mhu.defaults()
	return withHooks(ctx, mhu.sqlSave, mhu.mutation, mhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mhu *MedicalHistoriesUpdate) SaveX(ctx context.Context) int {
	affected, err := mhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mhu *MedicalHistoriesUpdate) Exec(ctx context.Context) error {
	_, err := mhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mhu *MedicalHistoriesUpdate) ExecX(ctx context.Context) {
	if err := mhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mhu *MedicalHistoriesUpdate) defaults() {
	if _, ok := mhu.mutation.UpdatedAt(); !ok {
		v := medicalhistories.UpdateDefaultUpdatedAt()
		mhu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mhu *MedicalHistoriesUpdate) check() error {
	if v, ok := mhu.mutation.Reason(); ok {
		if err := medicalhistories.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "MedicalHistories.reason": %w`, err)}
		}
	}
	if v, ok := mhu.mutation.Diagnosis(); ok {
		if err := medicalhistories.DiagnosisValidator(v); err != nil {
			return &ValidationError{Name: "diagnosis", err: fmt.Errorf(`ent: validator failed for field "MedicalHistories.diagnosis": %w`, err)}
		}
	}
	if mhu.mutation.PatientCleared() && len(mhu.mutation.PatientIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MedicalHistories.patient"`)
	}
	return nil
}

func (mhu *MedicalHistoriesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(medicalhistories.Table, medicalhistories.Columns, sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID))
	if ps := mhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mhu.mutation.Reason(); ok {
		_spec.SetField(medicalhistories.FieldReason, field.TypeString, value)
	}
	if value, ok := mhu.mutation.Diagnosis(); ok {
		_spec.SetField(medicalhistories.FieldDiagnosis, field.TypeString, value)
	}
	if value, ok := mhu.mutation.HasTreatment(); ok {
		_spec.SetField(medicalhistories.FieldHasTreatment, field.TypeBool, value)
	}
	if value, ok := mhu.mutation.HasSurgery(); ok {
		_spec.SetField(medicalhistories.FieldHasSurgery, field.TypeBool, value)
	}
	if value, ok := mhu.mutation.HasPrescription(); ok {
		_spec.SetField(medicalhistories.FieldHasPrescription, field.TypeBool, value)
	}
	if value, ok := mhu.mutation.DoctorNotes(); ok {
		_spec.SetField(medicalhistories.FieldDoctorNotes, field.TypeString, value)
	}
	if mhu.mutation.DoctorNotesCleared() {
		_spec.ClearField(medicalhistories.FieldDoctorNotes, field.TypeString)
	}
	if value, ok := mhu.mutation.MedicalEndDate(); ok {
		_spec.SetField(medicalhistories.FieldMedicalEndDate, field.TypeTime, value)
	}
	if mhu.mutation.MedicalEndDateCleared() {
		_spec.ClearField(medicalhistories.FieldMedicalEndDate, field.TypeTime)
	}
	if value, ok := mhu.mutation.CreatedAt(); ok {
		_spec.SetField(medicalhistories.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mhu.mutation.UpdatedAt(); ok {
		_spec.SetField(medicalhistories.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mhu.mutation.CreatedBy(); ok {
		_spec.SetField(medicalhistories.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := mhu.mutation.UpdatedBy(); ok {
		_spec.SetField(medicalhistories.FieldUpdatedBy, field.TypeUUID, value)
	}
	if mhu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalhistories.PatientTable,
			Columns: []string{medicalhistories.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mhu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalhistories.PatientTable,
			Columns: []string{medicalhistories.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mhu.mutation.MedicalPrescriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalPrescriptionTable,
			Columns: []string{medicalhistories.MedicalPrescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalprescription.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mhu.mutation.RemovedMedicalPrescriptionIDs(); len(nodes) > 0 && !mhu.mutation.MedicalPrescriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalPrescriptionTable,
			Columns: []string{medicalhistories.MedicalPrescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalprescription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mhu.mutation.MedicalPrescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalPrescriptionTable,
			Columns: []string{medicalhistories.MedicalPrescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalprescription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mhu.mutation.MedicalTreatmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalTreatmentTable,
			Columns: []string{medicalhistories.MedicalTreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicaltreatment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mhu.mutation.RemovedMedicalTreatmentIDs(); len(nodes) > 0 && !mhu.mutation.MedicalTreatmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalTreatmentTable,
			Columns: []string{medicalhistories.MedicalTreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicaltreatment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mhu.mutation.MedicalTreatmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalTreatmentTable,
			Columns: []string{medicalhistories.MedicalTreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicaltreatment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mhu.mutation.MedicalSurgeryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalSurgeryTable,
			Columns: []string{medicalhistories.MedicalSurgeryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalsurgery.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mhu.mutation.RemovedMedicalSurgeryIDs(); len(nodes) > 0 && !mhu.mutation.MedicalSurgeryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalSurgeryTable,
			Columns: []string{medicalhistories.MedicalSurgeryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalsurgery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mhu.mutation.MedicalSurgeryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalSurgeryTable,
			Columns: []string{medicalhistories.MedicalSurgeryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalsurgery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalhistories.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mhu.mutation.done = true
	return n, nil
}

// MedicalHistoriesUpdateOne is the builder for updating a single MedicalHistories entity.
type MedicalHistoriesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MedicalHistoriesMutation
}

// SetPatientID sets the "patient_id" field.
func (mhuo *MedicalHistoriesUpdateOne) SetPatientID(u uuid.UUID) *MedicalHistoriesUpdateOne {
	mhuo.mutation.SetPatientID(u)
	return mhuo
}

// SetNillablePatientID sets the "patient_id" field if the given value is not nil.
func (mhuo *MedicalHistoriesUpdateOne) SetNillablePatientID(u *uuid.UUID) *MedicalHistoriesUpdateOne {
	if u != nil {
		mhuo.SetPatientID(*u)
	}
	return mhuo
}

// SetReason sets the "reason" field.
func (mhuo *MedicalHistoriesUpdateOne) SetReason(s string) *MedicalHistoriesUpdateOne {
	mhuo.mutation.SetReason(s)
	return mhuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (mhuo *MedicalHistoriesUpdateOne) SetNillableReason(s *string) *MedicalHistoriesUpdateOne {
	if s != nil {
		mhuo.SetReason(*s)
	}
	return mhuo
}

// SetDiagnosis sets the "diagnosis" field.
func (mhuo *MedicalHistoriesUpdateOne) SetDiagnosis(s string) *MedicalHistoriesUpdateOne {
	mhuo.mutation.SetDiagnosis(s)
	return mhuo
}

// SetNillableDiagnosis sets the "diagnosis" field if the given value is not nil.
func (mhuo *MedicalHistoriesUpdateOne) SetNillableDiagnosis(s *string) *MedicalHistoriesUpdateOne {
	if s != nil {
		mhuo.SetDiagnosis(*s)
	}
	return mhuo
}

// SetHasTreatment sets the "has_treatment" field.
func (mhuo *MedicalHistoriesUpdateOne) SetHasTreatment(b bool) *MedicalHistoriesUpdateOne {
	mhuo.mutation.SetHasTreatment(b)
	return mhuo
}

// SetNillableHasTreatment sets the "has_treatment" field if the given value is not nil.
func (mhuo *MedicalHistoriesUpdateOne) SetNillableHasTreatment(b *bool) *MedicalHistoriesUpdateOne {
	if b != nil {
		mhuo.SetHasTreatment(*b)
	}
	return mhuo
}

// SetHasSurgery sets the "has_surgery" field.
func (mhuo *MedicalHistoriesUpdateOne) SetHasSurgery(b bool) *MedicalHistoriesUpdateOne {
	mhuo.mutation.SetHasSurgery(b)
	return mhuo
}

// SetNillableHasSurgery sets the "has_surgery" field if the given value is not nil.
func (mhuo *MedicalHistoriesUpdateOne) SetNillableHasSurgery(b *bool) *MedicalHistoriesUpdateOne {
	if b != nil {
		mhuo.SetHasSurgery(*b)
	}
	return mhuo
}

// SetHasPrescription sets the "has_prescription" field.
func (mhuo *MedicalHistoriesUpdateOne) SetHasPrescription(b bool) *MedicalHistoriesUpdateOne {
	mhuo.mutation.SetHasPrescription(b)
	return mhuo
}

// SetNillableHasPrescription sets the "has_prescription" field if the given value is not nil.
func (mhuo *MedicalHistoriesUpdateOne) SetNillableHasPrescription(b *bool) *MedicalHistoriesUpdateOne {
	if b != nil {
		mhuo.SetHasPrescription(*b)
	}
	return mhuo
}

// SetDoctorNotes sets the "doctor_notes" field.
func (mhuo *MedicalHistoriesUpdateOne) SetDoctorNotes(s string) *MedicalHistoriesUpdateOne {
	mhuo.mutation.SetDoctorNotes(s)
	return mhuo
}

// SetNillableDoctorNotes sets the "doctor_notes" field if the given value is not nil.
func (mhuo *MedicalHistoriesUpdateOne) SetNillableDoctorNotes(s *string) *MedicalHistoriesUpdateOne {
	if s != nil {
		mhuo.SetDoctorNotes(*s)
	}
	return mhuo
}

// ClearDoctorNotes clears the value of the "doctor_notes" field.
func (mhuo *MedicalHistoriesUpdateOne) ClearDoctorNotes() *MedicalHistoriesUpdateOne {
	mhuo.mutation.ClearDoctorNotes()
	return mhuo
}

// SetMedicalEndDate sets the "medical_end_date" field.
func (mhuo *MedicalHistoriesUpdateOne) SetMedicalEndDate(t time.Time) *MedicalHistoriesUpdateOne {
	mhuo.mutation.SetMedicalEndDate(t)
	return mhuo
}

// SetNillableMedicalEndDate sets the "medical_end_date" field if the given value is not nil.
func (mhuo *MedicalHistoriesUpdateOne) SetNillableMedicalEndDate(t *time.Time) *MedicalHistoriesUpdateOne {
	if t != nil {
		mhuo.SetMedicalEndDate(*t)
	}
	return mhuo
}

// ClearMedicalEndDate clears the value of the "medical_end_date" field.
func (mhuo *MedicalHistoriesUpdateOne) ClearMedicalEndDate() *MedicalHistoriesUpdateOne {
	mhuo.mutation.ClearMedicalEndDate()
	return mhuo
}

// SetCreatedAt sets the "created_at" field.
func (mhuo *MedicalHistoriesUpdateOne) SetCreatedAt(t time.Time) *MedicalHistoriesUpdateOne {
	mhuo.mutation.SetCreatedAt(t)
	return mhuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mhuo *MedicalHistoriesUpdateOne) SetNillableCreatedAt(t *time.Time) *MedicalHistoriesUpdateOne {
	if t != nil {
		mhuo.SetCreatedAt(*t)
	}
	return mhuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mhuo *MedicalHistoriesUpdateOne) SetUpdatedAt(t time.Time) *MedicalHistoriesUpdateOne {
	mhuo.mutation.SetUpdatedAt(t)
	return mhuo
}

// SetCreatedBy sets the "created_by" field.
func (mhuo *MedicalHistoriesUpdateOne) SetCreatedBy(u uuid.UUID) *MedicalHistoriesUpdateOne {
	mhuo.mutation.SetCreatedBy(u)
	return mhuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mhuo *MedicalHistoriesUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *MedicalHistoriesUpdateOne {
	if u != nil {
		mhuo.SetCreatedBy(*u)
	}
	return mhuo
}

// SetUpdatedBy sets the "updated_by" field.
func (mhuo *MedicalHistoriesUpdateOne) SetUpdatedBy(u uuid.UUID) *MedicalHistoriesUpdateOne {
	mhuo.mutation.SetUpdatedBy(u)
	return mhuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mhuo *MedicalHistoriesUpdateOne) SetNillableUpdatedBy(u *uuid.UUID) *MedicalHistoriesUpdateOne {
	if u != nil {
		mhuo.SetUpdatedBy(*u)
	}
	return mhuo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (mhuo *MedicalHistoriesUpdateOne) SetPatient(p *Patient) *MedicalHistoriesUpdateOne {
	return mhuo.SetPatientID(p.ID)
}

// AddMedicalPrescriptionIDs adds the "medical_prescription" edge to the MedicalPrescription entity by IDs.
func (mhuo *MedicalHistoriesUpdateOne) AddMedicalPrescriptionIDs(ids ...uuid.UUID) *MedicalHistoriesUpdateOne {
	mhuo.mutation.AddMedicalPrescriptionIDs(ids...)
	return mhuo
}

// AddMedicalPrescription adds the "medical_prescription" edges to the MedicalPrescription entity.
func (mhuo *MedicalHistoriesUpdateOne) AddMedicalPrescription(m ...*MedicalPrescription) *MedicalHistoriesUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mhuo.AddMedicalPrescriptionIDs(ids...)
}

// AddMedicalTreatmentIDs adds the "medical_treatment" edge to the MedicalTreatment entity by IDs.
func (mhuo *MedicalHistoriesUpdateOne) AddMedicalTreatmentIDs(ids ...uuid.UUID) *MedicalHistoriesUpdateOne {
	mhuo.mutation.AddMedicalTreatmentIDs(ids...)
	return mhuo
}

// AddMedicalTreatment adds the "medical_treatment" edges to the MedicalTreatment entity.
func (mhuo *MedicalHistoriesUpdateOne) AddMedicalTreatment(m ...*MedicalTreatment) *MedicalHistoriesUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mhuo.AddMedicalTreatmentIDs(ids...)
}

// AddMedicalSurgeryIDs adds the "medical_surgery" edge to the MedicalSurgery entity by IDs.
func (mhuo *MedicalHistoriesUpdateOne) AddMedicalSurgeryIDs(ids ...uuid.UUID) *MedicalHistoriesUpdateOne {
	mhuo.mutation.AddMedicalSurgeryIDs(ids...)
	return mhuo
}

// AddMedicalSurgery adds the "medical_surgery" edges to the MedicalSurgery entity.
func (mhuo *MedicalHistoriesUpdateOne) AddMedicalSurgery(m ...*MedicalSurgery) *MedicalHistoriesUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mhuo.AddMedicalSurgeryIDs(ids...)
}

// Mutation returns the MedicalHistoriesMutation object of the builder.
func (mhuo *MedicalHistoriesUpdateOne) Mutation() *MedicalHistoriesMutation {
	return mhuo.mutation
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (mhuo *MedicalHistoriesUpdateOne) ClearPatient() *MedicalHistoriesUpdateOne {
	mhuo.mutation.ClearPatient()
	return mhuo
}

// ClearMedicalPrescription clears all "medical_prescription" edges to the MedicalPrescription entity.
func (mhuo *MedicalHistoriesUpdateOne) ClearMedicalPrescription() *MedicalHistoriesUpdateOne {
	mhuo.mutation.ClearMedicalPrescription()
	return mhuo
}

// RemoveMedicalPrescriptionIDs removes the "medical_prescription" edge to MedicalPrescription entities by IDs.
func (mhuo *MedicalHistoriesUpdateOne) RemoveMedicalPrescriptionIDs(ids ...uuid.UUID) *MedicalHistoriesUpdateOne {
	mhuo.mutation.RemoveMedicalPrescriptionIDs(ids...)
	return mhuo
}

// RemoveMedicalPrescription removes "medical_prescription" edges to MedicalPrescription entities.
func (mhuo *MedicalHistoriesUpdateOne) RemoveMedicalPrescription(m ...*MedicalPrescription) *MedicalHistoriesUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mhuo.RemoveMedicalPrescriptionIDs(ids...)
}

// ClearMedicalTreatment clears all "medical_treatment" edges to the MedicalTreatment entity.
func (mhuo *MedicalHistoriesUpdateOne) ClearMedicalTreatment() *MedicalHistoriesUpdateOne {
	mhuo.mutation.ClearMedicalTreatment()
	return mhuo
}

// RemoveMedicalTreatmentIDs removes the "medical_treatment" edge to MedicalTreatment entities by IDs.
func (mhuo *MedicalHistoriesUpdateOne) RemoveMedicalTreatmentIDs(ids ...uuid.UUID) *MedicalHistoriesUpdateOne {
	mhuo.mutation.RemoveMedicalTreatmentIDs(ids...)
	return mhuo
}

// RemoveMedicalTreatment removes "medical_treatment" edges to MedicalTreatment entities.
func (mhuo *MedicalHistoriesUpdateOne) RemoveMedicalTreatment(m ...*MedicalTreatment) *MedicalHistoriesUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mhuo.RemoveMedicalTreatmentIDs(ids...)
}

// ClearMedicalSurgery clears all "medical_surgery" edges to the MedicalSurgery entity.
func (mhuo *MedicalHistoriesUpdateOne) ClearMedicalSurgery() *MedicalHistoriesUpdateOne {
	mhuo.mutation.ClearMedicalSurgery()
	return mhuo
}

// RemoveMedicalSurgeryIDs removes the "medical_surgery" edge to MedicalSurgery entities by IDs.
func (mhuo *MedicalHistoriesUpdateOne) RemoveMedicalSurgeryIDs(ids ...uuid.UUID) *MedicalHistoriesUpdateOne {
	mhuo.mutation.RemoveMedicalSurgeryIDs(ids...)
	return mhuo
}

// RemoveMedicalSurgery removes "medical_surgery" edges to MedicalSurgery entities.
func (mhuo *MedicalHistoriesUpdateOne) RemoveMedicalSurgery(m ...*MedicalSurgery) *MedicalHistoriesUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mhuo.RemoveMedicalSurgeryIDs(ids...)
}

// Where appends a list predicates to the MedicalHistoriesUpdate builder.
func (mhuo *MedicalHistoriesUpdateOne) Where(ps ...predicate.MedicalHistories) *MedicalHistoriesUpdateOne {
	mhuo.mutation.Where(ps...)
	return mhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mhuo *MedicalHistoriesUpdateOne) Select(field string, fields ...string) *MedicalHistoriesUpdateOne {
	mhuo.fields = append([]string{field}, fields...)
	return mhuo
}

// Save executes the query and returns the updated MedicalHistories entity.
func (mhuo *MedicalHistoriesUpdateOne) Save(ctx context.Context) (*MedicalHistories, error) {
	mhuo.defaults()
	return withHooks(ctx, mhuo.sqlSave, mhuo.mutation, mhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mhuo *MedicalHistoriesUpdateOne) SaveX(ctx context.Context) *MedicalHistories {
	node, err := mhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mhuo *MedicalHistoriesUpdateOne) Exec(ctx context.Context) error {
	_, err := mhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mhuo *MedicalHistoriesUpdateOne) ExecX(ctx context.Context) {
	if err := mhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mhuo *MedicalHistoriesUpdateOne) defaults() {
	if _, ok := mhuo.mutation.UpdatedAt(); !ok {
		v := medicalhistories.UpdateDefaultUpdatedAt()
		mhuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mhuo *MedicalHistoriesUpdateOne) check() error {
	if v, ok := mhuo.mutation.Reason(); ok {
		if err := medicalhistories.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "MedicalHistories.reason": %w`, err)}
		}
	}
	if v, ok := mhuo.mutation.Diagnosis(); ok {
		if err := medicalhistories.DiagnosisValidator(v); err != nil {
			return &ValidationError{Name: "diagnosis", err: fmt.Errorf(`ent: validator failed for field "MedicalHistories.diagnosis": %w`, err)}
		}
	}
	if mhuo.mutation.PatientCleared() && len(mhuo.mutation.PatientIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MedicalHistories.patient"`)
	}
	return nil
}

func (mhuo *MedicalHistoriesUpdateOne) sqlSave(ctx context.Context) (_node *MedicalHistories, err error) {
	if err := mhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(medicalhistories.Table, medicalhistories.Columns, sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID))
	id, ok := mhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MedicalHistories.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, medicalhistories.FieldID)
		for _, f := range fields {
			if !medicalhistories.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != medicalhistories.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mhuo.mutation.Reason(); ok {
		_spec.SetField(medicalhistories.FieldReason, field.TypeString, value)
	}
	if value, ok := mhuo.mutation.Diagnosis(); ok {
		_spec.SetField(medicalhistories.FieldDiagnosis, field.TypeString, value)
	}
	if value, ok := mhuo.mutation.HasTreatment(); ok {
		_spec.SetField(medicalhistories.FieldHasTreatment, field.TypeBool, value)
	}
	if value, ok := mhuo.mutation.HasSurgery(); ok {
		_spec.SetField(medicalhistories.FieldHasSurgery, field.TypeBool, value)
	}
	if value, ok := mhuo.mutation.HasPrescription(); ok {
		_spec.SetField(medicalhistories.FieldHasPrescription, field.TypeBool, value)
	}
	if value, ok := mhuo.mutation.DoctorNotes(); ok {
		_spec.SetField(medicalhistories.FieldDoctorNotes, field.TypeString, value)
	}
	if mhuo.mutation.DoctorNotesCleared() {
		_spec.ClearField(medicalhistories.FieldDoctorNotes, field.TypeString)
	}
	if value, ok := mhuo.mutation.MedicalEndDate(); ok {
		_spec.SetField(medicalhistories.FieldMedicalEndDate, field.TypeTime, value)
	}
	if mhuo.mutation.MedicalEndDateCleared() {
		_spec.ClearField(medicalhistories.FieldMedicalEndDate, field.TypeTime)
	}
	if value, ok := mhuo.mutation.CreatedAt(); ok {
		_spec.SetField(medicalhistories.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(medicalhistories.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mhuo.mutation.CreatedBy(); ok {
		_spec.SetField(medicalhistories.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := mhuo.mutation.UpdatedBy(); ok {
		_spec.SetField(medicalhistories.FieldUpdatedBy, field.TypeUUID, value)
	}
	if mhuo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalhistories.PatientTable,
			Columns: []string{medicalhistories.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mhuo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalhistories.PatientTable,
			Columns: []string{medicalhistories.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mhuo.mutation.MedicalPrescriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalPrescriptionTable,
			Columns: []string{medicalhistories.MedicalPrescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalprescription.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mhuo.mutation.RemovedMedicalPrescriptionIDs(); len(nodes) > 0 && !mhuo.mutation.MedicalPrescriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalPrescriptionTable,
			Columns: []string{medicalhistories.MedicalPrescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalprescription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mhuo.mutation.MedicalPrescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalPrescriptionTable,
			Columns: []string{medicalhistories.MedicalPrescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalprescription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mhuo.mutation.MedicalTreatmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalTreatmentTable,
			Columns: []string{medicalhistories.MedicalTreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicaltreatment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mhuo.mutation.RemovedMedicalTreatmentIDs(); len(nodes) > 0 && !mhuo.mutation.MedicalTreatmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalTreatmentTable,
			Columns: []string{medicalhistories.MedicalTreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicaltreatment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mhuo.mutation.MedicalTreatmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalTreatmentTable,
			Columns: []string{medicalhistories.MedicalTreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicaltreatment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mhuo.mutation.MedicalSurgeryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalSurgeryTable,
			Columns: []string{medicalhistories.MedicalSurgeryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalsurgery.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mhuo.mutation.RemovedMedicalSurgeryIDs(); len(nodes) > 0 && !mhuo.mutation.MedicalSurgeryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalSurgeryTable,
			Columns: []string{medicalhistories.MedicalSurgeryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalsurgery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mhuo.mutation.MedicalSurgeryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalhistories.MedicalSurgeryTable,
			Columns: []string{medicalhistories.MedicalSurgeryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalsurgery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MedicalHistories{config: mhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalhistories.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mhuo.mutation.done = true
	return _node, nil
}
