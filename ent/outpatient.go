// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"patient/ent/outpatient"
	"patient/ent/patient"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Outpatient is the model entity for the Outpatient schema.
type Outpatient struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PatientID holds the value of the "patient_id" field.
	PatientID uuid.UUID `json:"patient_id,omitempty"`
	// RegisterDate holds the value of the "register_date" field.
	RegisterDate time.Time `json:"register_date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OutpatientQuery when eager-loading is set.
	Edges        OutpatientEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OutpatientEdges holds the relations/edges for other nodes in the graph.
type OutpatientEdges struct {
	// Patient holds the value of the patient edge.
	Patient *Patient `json:"patient,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OutpatientEdges) PatientOrErr() (*Patient, error) {
	if e.Patient != nil {
		return e.Patient, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: patient.Label}
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Outpatient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case outpatient.FieldRegisterDate:
			values[i] = new(sql.NullTime)
		case outpatient.FieldID, outpatient.FieldPatientID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Outpatient fields.
func (o *Outpatient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case outpatient.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case outpatient.FieldPatientID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field patient_id", values[i])
			} else if value != nil {
				o.PatientID = *value
			}
		case outpatient.FieldRegisterDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field register_date", values[i])
			} else if value.Valid {
				o.RegisterDate = value.Time
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Outpatient.
// This includes values selected through modifiers, order, etc.
func (o *Outpatient) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryPatient queries the "patient" edge of the Outpatient entity.
func (o *Outpatient) QueryPatient() *PatientQuery {
	return NewOutpatientClient(o.config).QueryPatient(o)
}

// Update returns a builder for updating this Outpatient.
// Note that you need to call Outpatient.Unwrap() before calling this method if this Outpatient
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Outpatient) Update() *OutpatientUpdateOne {
	return NewOutpatientClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Outpatient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Outpatient) Unwrap() *Outpatient {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Outpatient is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Outpatient) String() string {
	var builder strings.Builder
	builder.WriteString("Outpatient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("patient_id=")
	builder.WriteString(fmt.Sprintf("%v", o.PatientID))
	builder.WriteString(", ")
	builder.WriteString("register_date=")
	builder.WriteString(o.RegisterDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Outpatients is a parsable slice of Outpatient.
type Outpatients []*Outpatient
