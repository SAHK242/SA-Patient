// Code generated by ent, DO NOT EDIT.

package medicalsurgery

import (
	"patient/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLTE(FieldID, id))
}

// MedicalHistoryID applies equality check predicate on the "medical_history_id" field. It's identical to MedicalHistoryIDEQ.
func MedicalHistoryID(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldMedicalHistoryID, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldEndDate, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldName, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldResult, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldDescription, v))
}

// Fee applies equality check predicate on the "fee" field. It's identical to FeeEQ.
func Fee(v float64) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldFee, v))
}

// MainDoctorID applies equality check predicate on the "main_doctor_id" field. It's identical to MainDoctorIDEQ.
func MainDoctorID(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldMainDoctorID, v))
}

// SupportDoctorIds applies equality check predicate on the "support_doctor_ids" field. It's identical to SupportDoctorIdsEQ.
func SupportDoctorIds(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldSupportDoctorIds, v))
}

// SupportNurseIds applies equality check predicate on the "support_nurse_ids" field. It's identical to SupportNurseIdsEQ.
func SupportNurseIds(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldSupportNurseIds, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldUpdatedAt, v))
}

// MedicalHistoryIDEQ applies the EQ predicate on the "medical_history_id" field.
func MedicalHistoryIDEQ(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldMedicalHistoryID, v))
}

// MedicalHistoryIDNEQ applies the NEQ predicate on the "medical_history_id" field.
func MedicalHistoryIDNEQ(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNEQ(FieldMedicalHistoryID, v))
}

// MedicalHistoryIDIn applies the In predicate on the "medical_history_id" field.
func MedicalHistoryIDIn(vs ...uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldIn(FieldMedicalHistoryID, vs...))
}

// MedicalHistoryIDNotIn applies the NotIn predicate on the "medical_history_id" field.
func MedicalHistoryIDNotIn(vs ...uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNotIn(FieldMedicalHistoryID, vs...))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLTE(FieldEndDate, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldContainsFold(FieldName, v))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNEQ(FieldResult, v))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldIn(FieldResult, vs...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNotIn(FieldResult, vs...))
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGT(FieldResult, v))
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGTE(FieldResult, v))
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLT(FieldResult, v))
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLTE(FieldResult, v))
}

// ResultContains applies the Contains predicate on the "result" field.
func ResultContains(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldContains(FieldResult, v))
}

// ResultHasPrefix applies the HasPrefix predicate on the "result" field.
func ResultHasPrefix(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldHasPrefix(FieldResult, v))
}

// ResultHasSuffix applies the HasSuffix predicate on the "result" field.
func ResultHasSuffix(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldHasSuffix(FieldResult, v))
}

// ResultEqualFold applies the EqualFold predicate on the "result" field.
func ResultEqualFold(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEqualFold(FieldResult, v))
}

// ResultContainsFold applies the ContainsFold predicate on the "result" field.
func ResultContainsFold(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldContainsFold(FieldResult, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldContainsFold(FieldDescription, v))
}

// FeeEQ applies the EQ predicate on the "fee" field.
func FeeEQ(v float64) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldFee, v))
}

// FeeNEQ applies the NEQ predicate on the "fee" field.
func FeeNEQ(v float64) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNEQ(FieldFee, v))
}

// FeeIn applies the In predicate on the "fee" field.
func FeeIn(vs ...float64) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldIn(FieldFee, vs...))
}

// FeeNotIn applies the NotIn predicate on the "fee" field.
func FeeNotIn(vs ...float64) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNotIn(FieldFee, vs...))
}

// FeeGT applies the GT predicate on the "fee" field.
func FeeGT(v float64) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGT(FieldFee, v))
}

// FeeGTE applies the GTE predicate on the "fee" field.
func FeeGTE(v float64) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGTE(FieldFee, v))
}

// FeeLT applies the LT predicate on the "fee" field.
func FeeLT(v float64) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLT(FieldFee, v))
}

// FeeLTE applies the LTE predicate on the "fee" field.
func FeeLTE(v float64) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLTE(FieldFee, v))
}

// MainDoctorIDEQ applies the EQ predicate on the "main_doctor_id" field.
func MainDoctorIDEQ(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldMainDoctorID, v))
}

// MainDoctorIDNEQ applies the NEQ predicate on the "main_doctor_id" field.
func MainDoctorIDNEQ(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNEQ(FieldMainDoctorID, v))
}

// MainDoctorIDIn applies the In predicate on the "main_doctor_id" field.
func MainDoctorIDIn(vs ...uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldIn(FieldMainDoctorID, vs...))
}

// MainDoctorIDNotIn applies the NotIn predicate on the "main_doctor_id" field.
func MainDoctorIDNotIn(vs ...uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNotIn(FieldMainDoctorID, vs...))
}

// MainDoctorIDGT applies the GT predicate on the "main_doctor_id" field.
func MainDoctorIDGT(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGT(FieldMainDoctorID, v))
}

// MainDoctorIDGTE applies the GTE predicate on the "main_doctor_id" field.
func MainDoctorIDGTE(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGTE(FieldMainDoctorID, v))
}

// MainDoctorIDLT applies the LT predicate on the "main_doctor_id" field.
func MainDoctorIDLT(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLT(FieldMainDoctorID, v))
}

// MainDoctorIDLTE applies the LTE predicate on the "main_doctor_id" field.
func MainDoctorIDLTE(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLTE(FieldMainDoctorID, v))
}

// SupportDoctorIdsEQ applies the EQ predicate on the "support_doctor_ids" field.
func SupportDoctorIdsEQ(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldSupportDoctorIds, v))
}

// SupportDoctorIdsNEQ applies the NEQ predicate on the "support_doctor_ids" field.
func SupportDoctorIdsNEQ(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNEQ(FieldSupportDoctorIds, v))
}

// SupportDoctorIdsIn applies the In predicate on the "support_doctor_ids" field.
func SupportDoctorIdsIn(vs ...string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldIn(FieldSupportDoctorIds, vs...))
}

// SupportDoctorIdsNotIn applies the NotIn predicate on the "support_doctor_ids" field.
func SupportDoctorIdsNotIn(vs ...string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNotIn(FieldSupportDoctorIds, vs...))
}

// SupportDoctorIdsGT applies the GT predicate on the "support_doctor_ids" field.
func SupportDoctorIdsGT(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGT(FieldSupportDoctorIds, v))
}

// SupportDoctorIdsGTE applies the GTE predicate on the "support_doctor_ids" field.
func SupportDoctorIdsGTE(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGTE(FieldSupportDoctorIds, v))
}

// SupportDoctorIdsLT applies the LT predicate on the "support_doctor_ids" field.
func SupportDoctorIdsLT(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLT(FieldSupportDoctorIds, v))
}

// SupportDoctorIdsLTE applies the LTE predicate on the "support_doctor_ids" field.
func SupportDoctorIdsLTE(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLTE(FieldSupportDoctorIds, v))
}

// SupportDoctorIdsContains applies the Contains predicate on the "support_doctor_ids" field.
func SupportDoctorIdsContains(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldContains(FieldSupportDoctorIds, v))
}

// SupportDoctorIdsHasPrefix applies the HasPrefix predicate on the "support_doctor_ids" field.
func SupportDoctorIdsHasPrefix(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldHasPrefix(FieldSupportDoctorIds, v))
}

// SupportDoctorIdsHasSuffix applies the HasSuffix predicate on the "support_doctor_ids" field.
func SupportDoctorIdsHasSuffix(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldHasSuffix(FieldSupportDoctorIds, v))
}

// SupportDoctorIdsEqualFold applies the EqualFold predicate on the "support_doctor_ids" field.
func SupportDoctorIdsEqualFold(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEqualFold(FieldSupportDoctorIds, v))
}

// SupportDoctorIdsContainsFold applies the ContainsFold predicate on the "support_doctor_ids" field.
func SupportDoctorIdsContainsFold(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldContainsFold(FieldSupportDoctorIds, v))
}

// SupportNurseIdsEQ applies the EQ predicate on the "support_nurse_ids" field.
func SupportNurseIdsEQ(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldSupportNurseIds, v))
}

// SupportNurseIdsNEQ applies the NEQ predicate on the "support_nurse_ids" field.
func SupportNurseIdsNEQ(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNEQ(FieldSupportNurseIds, v))
}

// SupportNurseIdsIn applies the In predicate on the "support_nurse_ids" field.
func SupportNurseIdsIn(vs ...string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldIn(FieldSupportNurseIds, vs...))
}

// SupportNurseIdsNotIn applies the NotIn predicate on the "support_nurse_ids" field.
func SupportNurseIdsNotIn(vs ...string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNotIn(FieldSupportNurseIds, vs...))
}

// SupportNurseIdsGT applies the GT predicate on the "support_nurse_ids" field.
func SupportNurseIdsGT(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGT(FieldSupportNurseIds, v))
}

// SupportNurseIdsGTE applies the GTE predicate on the "support_nurse_ids" field.
func SupportNurseIdsGTE(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGTE(FieldSupportNurseIds, v))
}

// SupportNurseIdsLT applies the LT predicate on the "support_nurse_ids" field.
func SupportNurseIdsLT(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLT(FieldSupportNurseIds, v))
}

// SupportNurseIdsLTE applies the LTE predicate on the "support_nurse_ids" field.
func SupportNurseIdsLTE(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLTE(FieldSupportNurseIds, v))
}

// SupportNurseIdsContains applies the Contains predicate on the "support_nurse_ids" field.
func SupportNurseIdsContains(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldContains(FieldSupportNurseIds, v))
}

// SupportNurseIdsHasPrefix applies the HasPrefix predicate on the "support_nurse_ids" field.
func SupportNurseIdsHasPrefix(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldHasPrefix(FieldSupportNurseIds, v))
}

// SupportNurseIdsHasSuffix applies the HasSuffix predicate on the "support_nurse_ids" field.
func SupportNurseIdsHasSuffix(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldHasSuffix(FieldSupportNurseIds, v))
}

// SupportNurseIdsEqualFold applies the EqualFold predicate on the "support_nurse_ids" field.
func SupportNurseIdsEqualFold(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEqualFold(FieldSupportNurseIds, v))
}

// SupportNurseIdsContainsFold applies the ContainsFold predicate on the "support_nurse_ids" field.
func SupportNurseIdsContainsFold(v string) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldContainsFold(FieldSupportNurseIds, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v uuid.UUID) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasMedicalHistories applies the HasEdge predicate on the "medical_histories" edge.
func HasMedicalHistories() predicate.MedicalSurgery {
	return predicate.MedicalSurgery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MedicalHistoriesTable, MedicalHistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMedicalHistoriesWith applies the HasEdge predicate on the "medical_histories" edge with a given conditions (other predicates).
func HasMedicalHistoriesWith(preds ...predicate.MedicalHistories) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(func(s *sql.Selector) {
		step := newMedicalHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MedicalSurgery) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MedicalSurgery) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MedicalSurgery) predicate.MedicalSurgery {
	return predicate.MedicalSurgery(sql.NotPredicates(p))
}
