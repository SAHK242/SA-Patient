// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"patient/ent/medicalprescription"
	"patient/ent/medication"
	"patient/ent/prescriptionmedication"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// PrescriptionMedication is the model entity for the PrescriptionMedication schema.
type PrescriptionMedication struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PrescriptionID holds the value of the "prescription_id" field.
	PrescriptionID uuid.UUID `json:"prescription_id,omitempty"`
	// MedicationID holds the value of the "medication_id" field.
	MedicationID uuid.UUID `json:"medication_id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int64 `json:"quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrescriptionMedicationQuery when eager-loading is set.
	Edges        PrescriptionMedicationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PrescriptionMedicationEdges holds the relations/edges for other nodes in the graph.
type PrescriptionMedicationEdges struct {
	// MedicalPrescription holds the value of the medical_prescription edge.
	MedicalPrescription *MedicalPrescription `json:"medical_prescription,omitempty"`
	// Medication holds the value of the medication edge.
	Medication *Medication `json:"medication,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MedicalPrescriptionOrErr returns the MedicalPrescription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrescriptionMedicationEdges) MedicalPrescriptionOrErr() (*MedicalPrescription, error) {
	if e.MedicalPrescription != nil {
		return e.MedicalPrescription, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: medicalprescription.Label}
	}
	return nil, &NotLoadedError{edge: "medical_prescription"}
}

// MedicationOrErr returns the Medication value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrescriptionMedicationEdges) MedicationOrErr() (*Medication, error) {
	if e.Medication != nil {
		return e.Medication, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: medication.Label}
	}
	return nil, &NotLoadedError{edge: "medication"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PrescriptionMedication) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case prescriptionmedication.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case prescriptionmedication.FieldID, prescriptionmedication.FieldPrescriptionID, prescriptionmedication.FieldMedicationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PrescriptionMedication fields.
func (pm *PrescriptionMedication) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case prescriptionmedication.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pm.ID = *value
			}
		case prescriptionmedication.FieldPrescriptionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field prescription_id", values[i])
			} else if value != nil {
				pm.PrescriptionID = *value
			}
		case prescriptionmedication.FieldMedicationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field medication_id", values[i])
			} else if value != nil {
				pm.MedicationID = *value
			}
		case prescriptionmedication.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				pm.Quantity = value.Int64
			}
		default:
			pm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PrescriptionMedication.
// This includes values selected through modifiers, order, etc.
func (pm *PrescriptionMedication) Value(name string) (ent.Value, error) {
	return pm.selectValues.Get(name)
}

// QueryMedicalPrescription queries the "medical_prescription" edge of the PrescriptionMedication entity.
func (pm *PrescriptionMedication) QueryMedicalPrescription() *MedicalPrescriptionQuery {
	return NewPrescriptionMedicationClient(pm.config).QueryMedicalPrescription(pm)
}

// QueryMedication queries the "medication" edge of the PrescriptionMedication entity.
func (pm *PrescriptionMedication) QueryMedication() *MedicationQuery {
	return NewPrescriptionMedicationClient(pm.config).QueryMedication(pm)
}

// Update returns a builder for updating this PrescriptionMedication.
// Note that you need to call PrescriptionMedication.Unwrap() before calling this method if this PrescriptionMedication
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *PrescriptionMedication) Update() *PrescriptionMedicationUpdateOne {
	return NewPrescriptionMedicationClient(pm.config).UpdateOne(pm)
}

// Unwrap unwraps the PrescriptionMedication entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *PrescriptionMedication) Unwrap() *PrescriptionMedication {
	_tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("ent: PrescriptionMedication is not a transactional entity")
	}
	pm.config.driver = _tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *PrescriptionMedication) String() string {
	var builder strings.Builder
	builder.WriteString("PrescriptionMedication(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pm.ID))
	builder.WriteString("prescription_id=")
	builder.WriteString(fmt.Sprintf("%v", pm.PrescriptionID))
	builder.WriteString(", ")
	builder.WriteString("medication_id=")
	builder.WriteString(fmt.Sprintf("%v", pm.MedicationID))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", pm.Quantity))
	builder.WriteByte(')')
	return builder.String()
}

// PrescriptionMedications is a parsable slice of PrescriptionMedication.
type PrescriptionMedications []*PrescriptionMedication
