// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"patient/ent/inpatient"
	"patient/ent/outpatient"
	"patient/ent/patient"
	"patient/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeExamineDetail     = "ExamineDetail"
	TypeExamineMedication = "ExamineMedication"
	TypeInpatient         = "Inpatient"
	TypeInpatientDetail   = "InpatientDetail"
	TypeInvoice           = "Invoice"
	TypeMedication        = "Medication"
	TypeMedicationEffect  = "MedicationEffect"
	TypeOutpatient        = "Outpatient"
	TypeOutpatientDetail  = "OutpatientDetail"
	TypePatient           = "Patient"
	TypeTreatDetail       = "TreatDetail"
	TypeTreatMedication   = "TreatMedication"
)

// ExamineDetailMutation represents an operation that mutates the ExamineDetail nodes in the graph.
type ExamineDetailMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ExamineDetail, error)
	predicates    []predicate.ExamineDetail
}

var _ ent.Mutation = (*ExamineDetailMutation)(nil)

// examinedetailOption allows management of the mutation configuration using functional options.
type examinedetailOption func(*ExamineDetailMutation)

// newExamineDetailMutation creates new mutation for the ExamineDetail entity.
func newExamineDetailMutation(c config, op Op, opts ...examinedetailOption) *ExamineDetailMutation {
	m := &ExamineDetailMutation{
		config:        c,
		op:            op,
		typ:           TypeExamineDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExamineDetailID sets the ID field of the mutation.
func withExamineDetailID(id int) examinedetailOption {
	return func(m *ExamineDetailMutation) {
		var (
			err   error
			once  sync.Once
			value *ExamineDetail
		)
		m.oldValue = func(ctx context.Context) (*ExamineDetail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExamineDetail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExamineDetail sets the old ExamineDetail of the mutation.
func withExamineDetail(node *ExamineDetail) examinedetailOption {
	return func(m *ExamineDetailMutation) {
		m.oldValue = func(context.Context) (*ExamineDetail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExamineDetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExamineDetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExamineDetailMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExamineDetailMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExamineDetail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the ExamineDetailMutation builder.
func (m *ExamineDetailMutation) Where(ps ...predicate.ExamineDetail) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExamineDetailMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExamineDetailMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExamineDetail, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExamineDetailMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExamineDetailMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExamineDetail).
func (m *ExamineDetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExamineDetailMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExamineDetailMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExamineDetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown ExamineDetail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamineDetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ExamineDetail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExamineDetailMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExamineDetailMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamineDetailMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown ExamineDetail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExamineDetailMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExamineDetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExamineDetailMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ExamineDetail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExamineDetailMutation) ResetField(name string) error {
	return fmt.Errorf("unknown ExamineDetail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExamineDetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExamineDetailMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExamineDetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExamineDetailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExamineDetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExamineDetailMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExamineDetailMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ExamineDetail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExamineDetailMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ExamineDetail edge %s", name)
}

// ExamineMedicationMutation represents an operation that mutates the ExamineMedication nodes in the graph.
type ExamineMedicationMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ExamineMedication, error)
	predicates    []predicate.ExamineMedication
}

var _ ent.Mutation = (*ExamineMedicationMutation)(nil)

// examinemedicationOption allows management of the mutation configuration using functional options.
type examinemedicationOption func(*ExamineMedicationMutation)

// newExamineMedicationMutation creates new mutation for the ExamineMedication entity.
func newExamineMedicationMutation(c config, op Op, opts ...examinemedicationOption) *ExamineMedicationMutation {
	m := &ExamineMedicationMutation{
		config:        c,
		op:            op,
		typ:           TypeExamineMedication,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExamineMedicationID sets the ID field of the mutation.
func withExamineMedicationID(id int) examinemedicationOption {
	return func(m *ExamineMedicationMutation) {
		var (
			err   error
			once  sync.Once
			value *ExamineMedication
		)
		m.oldValue = func(ctx context.Context) (*ExamineMedication, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExamineMedication.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExamineMedication sets the old ExamineMedication of the mutation.
func withExamineMedication(node *ExamineMedication) examinemedicationOption {
	return func(m *ExamineMedicationMutation) {
		m.oldValue = func(context.Context) (*ExamineMedication, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExamineMedicationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExamineMedicationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExamineMedicationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExamineMedicationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExamineMedication.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the ExamineMedicationMutation builder.
func (m *ExamineMedicationMutation) Where(ps ...predicate.ExamineMedication) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExamineMedicationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExamineMedicationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExamineMedication, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExamineMedicationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExamineMedicationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExamineMedication).
func (m *ExamineMedicationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExamineMedicationMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExamineMedicationMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExamineMedicationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown ExamineMedication field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamineMedicationMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ExamineMedication field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExamineMedicationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExamineMedicationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamineMedicationMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown ExamineMedication numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExamineMedicationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExamineMedicationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExamineMedicationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ExamineMedication nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExamineMedicationMutation) ResetField(name string) error {
	return fmt.Errorf("unknown ExamineMedication field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExamineMedicationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExamineMedicationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExamineMedicationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExamineMedicationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExamineMedicationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExamineMedicationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExamineMedicationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ExamineMedication unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExamineMedicationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ExamineMedication edge %s", name)
}

// InpatientMutation represents an operation that mutates the Inpatient nodes in the graph.
type InpatientMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	register_date  *time.Time
	clearedFields  map[string]struct{}
	patient        *uuid.UUID
	clearedpatient bool
	done           bool
	oldValue       func(context.Context) (*Inpatient, error)
	predicates     []predicate.Inpatient
}

var _ ent.Mutation = (*InpatientMutation)(nil)

// inpatientOption allows management of the mutation configuration using functional options.
type inpatientOption func(*InpatientMutation)

// newInpatientMutation creates new mutation for the Inpatient entity.
func newInpatientMutation(c config, op Op, opts ...inpatientOption) *InpatientMutation {
	m := &InpatientMutation{
		config:        c,
		op:            op,
		typ:           TypeInpatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInpatientID sets the ID field of the mutation.
func withInpatientID(id uuid.UUID) inpatientOption {
	return func(m *InpatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Inpatient
		)
		m.oldValue = func(ctx context.Context) (*Inpatient, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Inpatient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInpatient sets the old Inpatient of the mutation.
func withInpatient(node *Inpatient) inpatientOption {
	return func(m *InpatientMutation) {
		m.oldValue = func(context.Context) (*Inpatient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InpatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InpatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Inpatient entities.
func (m *InpatientMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InpatientMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InpatientMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Inpatient.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPatientID sets the "patient_id" field.
func (m *InpatientMutation) SetPatientID(u uuid.UUID) {
	m.patient = &u
}

// PatientID returns the value of the "patient_id" field in the mutation.
func (m *InpatientMutation) PatientID() (r uuid.UUID, exists bool) {
	v := m.patient
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientID returns the old "patient_id" field's value of the Inpatient entity.
// If the Inpatient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InpatientMutation) OldPatientID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPatientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPatientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientID: %w", err)
	}
	return oldValue.PatientID, nil
}

// ResetPatientID resets all changes to the "patient_id" field.
func (m *InpatientMutation) ResetPatientID() {
	m.patient = nil
}

// SetRegisterDate sets the "register_date" field.
func (m *InpatientMutation) SetRegisterDate(t time.Time) {
	m.register_date = &t
}

// RegisterDate returns the value of the "register_date" field in the mutation.
func (m *InpatientMutation) RegisterDate() (r time.Time, exists bool) {
	v := m.register_date
	if v == nil {
		return
	}
	return *v, true
}

// OldRegisterDate returns the old "register_date" field's value of the Inpatient entity.
// If the Inpatient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InpatientMutation) OldRegisterDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegisterDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegisterDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegisterDate: %w", err)
	}
	return oldValue.RegisterDate, nil
}

// ResetRegisterDate resets all changes to the "register_date" field.
func (m *InpatientMutation) ResetRegisterDate() {
	m.register_date = nil
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (m *InpatientMutation) ClearPatient() {
	m.clearedpatient = true
	m.clearedFields[inpatient.FieldPatientID] = struct{}{}
}

// PatientCleared reports if the "patient" edge to the Patient entity was cleared.
func (m *InpatientMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientIDs returns the "patient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *InpatientMutation) PatientIDs() (ids []uuid.UUID) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient resets all changes to the "patient" edge.
func (m *InpatientMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// Where appends a list predicates to the InpatientMutation builder.
func (m *InpatientMutation) Where(ps ...predicate.Inpatient) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InpatientMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InpatientMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Inpatient, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InpatientMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InpatientMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Inpatient).
func (m *InpatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InpatientMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.patient != nil {
		fields = append(fields, inpatient.FieldPatientID)
	}
	if m.register_date != nil {
		fields = append(fields, inpatient.FieldRegisterDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InpatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case inpatient.FieldPatientID:
		return m.PatientID()
	case inpatient.FieldRegisterDate:
		return m.RegisterDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InpatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case inpatient.FieldPatientID:
		return m.OldPatientID(ctx)
	case inpatient.FieldRegisterDate:
		return m.OldRegisterDate(ctx)
	}
	return nil, fmt.Errorf("unknown Inpatient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InpatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case inpatient.FieldPatientID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientID(v)
		return nil
	case inpatient.FieldRegisterDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegisterDate(v)
		return nil
	}
	return fmt.Errorf("unknown Inpatient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InpatientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InpatientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InpatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Inpatient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InpatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InpatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InpatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Inpatient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InpatientMutation) ResetField(name string) error {
	switch name {
	case inpatient.FieldPatientID:
		m.ResetPatientID()
		return nil
	case inpatient.FieldRegisterDate:
		m.ResetRegisterDate()
		return nil
	}
	return fmt.Errorf("unknown Inpatient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InpatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patient != nil {
		edges = append(edges, inpatient.EdgePatient)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InpatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case inpatient.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InpatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InpatientMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InpatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpatient {
		edges = append(edges, inpatient.EdgePatient)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InpatientMutation) EdgeCleared(name string) bool {
	switch name {
	case inpatient.EdgePatient:
		return m.clearedpatient
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InpatientMutation) ClearEdge(name string) error {
	switch name {
	case inpatient.EdgePatient:
		m.ClearPatient()
		return nil
	}
	return fmt.Errorf("unknown Inpatient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InpatientMutation) ResetEdge(name string) error {
	switch name {
	case inpatient.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown Inpatient edge %s", name)
}

// InpatientDetailMutation represents an operation that mutates the InpatientDetail nodes in the graph.
type InpatientDetailMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*InpatientDetail, error)
	predicates    []predicate.InpatientDetail
}

var _ ent.Mutation = (*InpatientDetailMutation)(nil)

// inpatientdetailOption allows management of the mutation configuration using functional options.
type inpatientdetailOption func(*InpatientDetailMutation)

// newInpatientDetailMutation creates new mutation for the InpatientDetail entity.
func newInpatientDetailMutation(c config, op Op, opts ...inpatientdetailOption) *InpatientDetailMutation {
	m := &InpatientDetailMutation{
		config:        c,
		op:            op,
		typ:           TypeInpatientDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInpatientDetailID sets the ID field of the mutation.
func withInpatientDetailID(id int) inpatientdetailOption {
	return func(m *InpatientDetailMutation) {
		var (
			err   error
			once  sync.Once
			value *InpatientDetail
		)
		m.oldValue = func(ctx context.Context) (*InpatientDetail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().InpatientDetail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInpatientDetail sets the old InpatientDetail of the mutation.
func withInpatientDetail(node *InpatientDetail) inpatientdetailOption {
	return func(m *InpatientDetailMutation) {
		m.oldValue = func(context.Context) (*InpatientDetail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InpatientDetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InpatientDetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InpatientDetailMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InpatientDetailMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().InpatientDetail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the InpatientDetailMutation builder.
func (m *InpatientDetailMutation) Where(ps ...predicate.InpatientDetail) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InpatientDetailMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InpatientDetailMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.InpatientDetail, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InpatientDetailMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InpatientDetailMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (InpatientDetail).
func (m *InpatientDetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InpatientDetailMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InpatientDetailMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InpatientDetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown InpatientDetail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InpatientDetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown InpatientDetail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InpatientDetailMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InpatientDetailMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InpatientDetailMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown InpatientDetail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InpatientDetailMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InpatientDetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InpatientDetailMutation) ClearField(name string) error {
	return fmt.Errorf("unknown InpatientDetail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InpatientDetailMutation) ResetField(name string) error {
	return fmt.Errorf("unknown InpatientDetail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InpatientDetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InpatientDetailMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InpatientDetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InpatientDetailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InpatientDetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InpatientDetailMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InpatientDetailMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown InpatientDetail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InpatientDetailMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown InpatientDetail edge %s", name)
}

// InvoiceMutation represents an operation that mutates the Invoice nodes in the graph.
type InvoiceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Invoice, error)
	predicates    []predicate.Invoice
}

var _ ent.Mutation = (*InvoiceMutation)(nil)

// invoiceOption allows management of the mutation configuration using functional options.
type invoiceOption func(*InvoiceMutation)

// newInvoiceMutation creates new mutation for the Invoice entity.
func newInvoiceMutation(c config, op Op, opts ...invoiceOption) *InvoiceMutation {
	m := &InvoiceMutation{
		config:        c,
		op:            op,
		typ:           TypeInvoice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInvoiceID sets the ID field of the mutation.
func withInvoiceID(id int) invoiceOption {
	return func(m *InvoiceMutation) {
		var (
			err   error
			once  sync.Once
			value *Invoice
		)
		m.oldValue = func(ctx context.Context) (*Invoice, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Invoice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInvoice sets the old Invoice of the mutation.
func withInvoice(node *Invoice) invoiceOption {
	return func(m *InvoiceMutation) {
		m.oldValue = func(context.Context) (*Invoice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InvoiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InvoiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InvoiceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InvoiceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Invoice.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the InvoiceMutation builder.
func (m *InvoiceMutation) Where(ps ...predicate.Invoice) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InvoiceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InvoiceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Invoice, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InvoiceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InvoiceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Invoice).
func (m *InvoiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InvoiceMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InvoiceMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InvoiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Invoice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Invoice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InvoiceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InvoiceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvoiceMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Invoice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InvoiceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InvoiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InvoiceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Invoice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InvoiceMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Invoice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InvoiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InvoiceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InvoiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InvoiceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InvoiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InvoiceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InvoiceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Invoice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InvoiceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Invoice edge %s", name)
}

// MedicationMutation represents an operation that mutates the Medication nodes in the graph.
type MedicationMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Medication, error)
	predicates    []predicate.Medication
}

var _ ent.Mutation = (*MedicationMutation)(nil)

// medicationOption allows management of the mutation configuration using functional options.
type medicationOption func(*MedicationMutation)

// newMedicationMutation creates new mutation for the Medication entity.
func newMedicationMutation(c config, op Op, opts ...medicationOption) *MedicationMutation {
	m := &MedicationMutation{
		config:        c,
		op:            op,
		typ:           TypeMedication,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMedicationID sets the ID field of the mutation.
func withMedicationID(id int) medicationOption {
	return func(m *MedicationMutation) {
		var (
			err   error
			once  sync.Once
			value *Medication
		)
		m.oldValue = func(ctx context.Context) (*Medication, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Medication.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedication sets the old Medication of the mutation.
func withMedication(node *Medication) medicationOption {
	return func(m *MedicationMutation) {
		m.oldValue = func(context.Context) (*Medication, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MedicationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MedicationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MedicationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MedicationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Medication.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the MedicationMutation builder.
func (m *MedicationMutation) Where(ps ...predicate.Medication) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MedicationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MedicationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Medication, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MedicationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MedicationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Medication).
func (m *MedicationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MedicationMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MedicationMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MedicationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Medication field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MedicationMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Medication field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MedicationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MedicationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MedicationMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Medication numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MedicationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MedicationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MedicationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Medication nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MedicationMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Medication field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MedicationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MedicationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MedicationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MedicationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MedicationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MedicationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MedicationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Medication unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MedicationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Medication edge %s", name)
}

// MedicationEffectMutation represents an operation that mutates the MedicationEffect nodes in the graph.
type MedicationEffectMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MedicationEffect, error)
	predicates    []predicate.MedicationEffect
}

var _ ent.Mutation = (*MedicationEffectMutation)(nil)

// medicationeffectOption allows management of the mutation configuration using functional options.
type medicationeffectOption func(*MedicationEffectMutation)

// newMedicationEffectMutation creates new mutation for the MedicationEffect entity.
func newMedicationEffectMutation(c config, op Op, opts ...medicationeffectOption) *MedicationEffectMutation {
	m := &MedicationEffectMutation{
		config:        c,
		op:            op,
		typ:           TypeMedicationEffect,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMedicationEffectID sets the ID field of the mutation.
func withMedicationEffectID(id int) medicationeffectOption {
	return func(m *MedicationEffectMutation) {
		var (
			err   error
			once  sync.Once
			value *MedicationEffect
		)
		m.oldValue = func(ctx context.Context) (*MedicationEffect, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MedicationEffect.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedicationEffect sets the old MedicationEffect of the mutation.
func withMedicationEffect(node *MedicationEffect) medicationeffectOption {
	return func(m *MedicationEffectMutation) {
		m.oldValue = func(context.Context) (*MedicationEffect, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MedicationEffectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MedicationEffectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MedicationEffectMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MedicationEffectMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MedicationEffect.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the MedicationEffectMutation builder.
func (m *MedicationEffectMutation) Where(ps ...predicate.MedicationEffect) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MedicationEffectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MedicationEffectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MedicationEffect, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MedicationEffectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MedicationEffectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MedicationEffect).
func (m *MedicationEffectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MedicationEffectMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MedicationEffectMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MedicationEffectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown MedicationEffect field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MedicationEffectMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MedicationEffect field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MedicationEffectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MedicationEffectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MedicationEffectMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown MedicationEffect numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MedicationEffectMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MedicationEffectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MedicationEffectMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MedicationEffect nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MedicationEffectMutation) ResetField(name string) error {
	return fmt.Errorf("unknown MedicationEffect field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MedicationEffectMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MedicationEffectMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MedicationEffectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MedicationEffectMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MedicationEffectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MedicationEffectMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MedicationEffectMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MedicationEffect unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MedicationEffectMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MedicationEffect edge %s", name)
}

// OutpatientMutation represents an operation that mutates the Outpatient nodes in the graph.
type OutpatientMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	register_date  *time.Time
	clearedFields  map[string]struct{}
	patient        *uuid.UUID
	clearedpatient bool
	done           bool
	oldValue       func(context.Context) (*Outpatient, error)
	predicates     []predicate.Outpatient
}

var _ ent.Mutation = (*OutpatientMutation)(nil)

// outpatientOption allows management of the mutation configuration using functional options.
type outpatientOption func(*OutpatientMutation)

// newOutpatientMutation creates new mutation for the Outpatient entity.
func newOutpatientMutation(c config, op Op, opts ...outpatientOption) *OutpatientMutation {
	m := &OutpatientMutation{
		config:        c,
		op:            op,
		typ:           TypeOutpatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOutpatientID sets the ID field of the mutation.
func withOutpatientID(id uuid.UUID) outpatientOption {
	return func(m *OutpatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Outpatient
		)
		m.oldValue = func(ctx context.Context) (*Outpatient, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Outpatient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOutpatient sets the old Outpatient of the mutation.
func withOutpatient(node *Outpatient) outpatientOption {
	return func(m *OutpatientMutation) {
		m.oldValue = func(context.Context) (*Outpatient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OutpatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OutpatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Outpatient entities.
func (m *OutpatientMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OutpatientMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OutpatientMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Outpatient.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPatientID sets the "patient_id" field.
func (m *OutpatientMutation) SetPatientID(u uuid.UUID) {
	m.patient = &u
}

// PatientID returns the value of the "patient_id" field in the mutation.
func (m *OutpatientMutation) PatientID() (r uuid.UUID, exists bool) {
	v := m.patient
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientID returns the old "patient_id" field's value of the Outpatient entity.
// If the Outpatient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutpatientMutation) OldPatientID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPatientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPatientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientID: %w", err)
	}
	return oldValue.PatientID, nil
}

// ResetPatientID resets all changes to the "patient_id" field.
func (m *OutpatientMutation) ResetPatientID() {
	m.patient = nil
}

// SetRegisterDate sets the "register_date" field.
func (m *OutpatientMutation) SetRegisterDate(t time.Time) {
	m.register_date = &t
}

// RegisterDate returns the value of the "register_date" field in the mutation.
func (m *OutpatientMutation) RegisterDate() (r time.Time, exists bool) {
	v := m.register_date
	if v == nil {
		return
	}
	return *v, true
}

// OldRegisterDate returns the old "register_date" field's value of the Outpatient entity.
// If the Outpatient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OutpatientMutation) OldRegisterDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegisterDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegisterDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegisterDate: %w", err)
	}
	return oldValue.RegisterDate, nil
}

// ResetRegisterDate resets all changes to the "register_date" field.
func (m *OutpatientMutation) ResetRegisterDate() {
	m.register_date = nil
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (m *OutpatientMutation) ClearPatient() {
	m.clearedpatient = true
	m.clearedFields[outpatient.FieldPatientID] = struct{}{}
}

// PatientCleared reports if the "patient" edge to the Patient entity was cleared.
func (m *OutpatientMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientIDs returns the "patient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *OutpatientMutation) PatientIDs() (ids []uuid.UUID) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient resets all changes to the "patient" edge.
func (m *OutpatientMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// Where appends a list predicates to the OutpatientMutation builder.
func (m *OutpatientMutation) Where(ps ...predicate.Outpatient) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OutpatientMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OutpatientMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Outpatient, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OutpatientMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OutpatientMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Outpatient).
func (m *OutpatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OutpatientMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.patient != nil {
		fields = append(fields, outpatient.FieldPatientID)
	}
	if m.register_date != nil {
		fields = append(fields, outpatient.FieldRegisterDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OutpatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case outpatient.FieldPatientID:
		return m.PatientID()
	case outpatient.FieldRegisterDate:
		return m.RegisterDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OutpatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case outpatient.FieldPatientID:
		return m.OldPatientID(ctx)
	case outpatient.FieldRegisterDate:
		return m.OldRegisterDate(ctx)
	}
	return nil, fmt.Errorf("unknown Outpatient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OutpatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case outpatient.FieldPatientID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientID(v)
		return nil
	case outpatient.FieldRegisterDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegisterDate(v)
		return nil
	}
	return fmt.Errorf("unknown Outpatient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OutpatientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OutpatientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OutpatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Outpatient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OutpatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OutpatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OutpatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Outpatient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OutpatientMutation) ResetField(name string) error {
	switch name {
	case outpatient.FieldPatientID:
		m.ResetPatientID()
		return nil
	case outpatient.FieldRegisterDate:
		m.ResetRegisterDate()
		return nil
	}
	return fmt.Errorf("unknown Outpatient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OutpatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patient != nil {
		edges = append(edges, outpatient.EdgePatient)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OutpatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case outpatient.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OutpatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OutpatientMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OutpatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpatient {
		edges = append(edges, outpatient.EdgePatient)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OutpatientMutation) EdgeCleared(name string) bool {
	switch name {
	case outpatient.EdgePatient:
		return m.clearedpatient
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OutpatientMutation) ClearEdge(name string) error {
	switch name {
	case outpatient.EdgePatient:
		m.ClearPatient()
		return nil
	}
	return fmt.Errorf("unknown Outpatient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OutpatientMutation) ResetEdge(name string) error {
	switch name {
	case outpatient.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown Outpatient edge %s", name)
}

// OutpatientDetailMutation represents an operation that mutates the OutpatientDetail nodes in the graph.
type OutpatientDetailMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*OutpatientDetail, error)
	predicates    []predicate.OutpatientDetail
}

var _ ent.Mutation = (*OutpatientDetailMutation)(nil)

// outpatientdetailOption allows management of the mutation configuration using functional options.
type outpatientdetailOption func(*OutpatientDetailMutation)

// newOutpatientDetailMutation creates new mutation for the OutpatientDetail entity.
func newOutpatientDetailMutation(c config, op Op, opts ...outpatientdetailOption) *OutpatientDetailMutation {
	m := &OutpatientDetailMutation{
		config:        c,
		op:            op,
		typ:           TypeOutpatientDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOutpatientDetailID sets the ID field of the mutation.
func withOutpatientDetailID(id int) outpatientdetailOption {
	return func(m *OutpatientDetailMutation) {
		var (
			err   error
			once  sync.Once
			value *OutpatientDetail
		)
		m.oldValue = func(ctx context.Context) (*OutpatientDetail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OutpatientDetail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOutpatientDetail sets the old OutpatientDetail of the mutation.
func withOutpatientDetail(node *OutpatientDetail) outpatientdetailOption {
	return func(m *OutpatientDetailMutation) {
		m.oldValue = func(context.Context) (*OutpatientDetail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OutpatientDetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OutpatientDetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OutpatientDetailMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OutpatientDetailMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OutpatientDetail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the OutpatientDetailMutation builder.
func (m *OutpatientDetailMutation) Where(ps ...predicate.OutpatientDetail) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OutpatientDetailMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OutpatientDetailMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OutpatientDetail, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OutpatientDetailMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OutpatientDetailMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OutpatientDetail).
func (m *OutpatientDetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OutpatientDetailMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OutpatientDetailMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OutpatientDetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown OutpatientDetail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OutpatientDetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OutpatientDetail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OutpatientDetailMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OutpatientDetailMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OutpatientDetailMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown OutpatientDetail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OutpatientDetailMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OutpatientDetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OutpatientDetailMutation) ClearField(name string) error {
	return fmt.Errorf("unknown OutpatientDetail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OutpatientDetailMutation) ResetField(name string) error {
	return fmt.Errorf("unknown OutpatientDetail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OutpatientDetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OutpatientDetailMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OutpatientDetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OutpatientDetailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OutpatientDetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OutpatientDetailMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OutpatientDetailMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OutpatientDetail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OutpatientDetailMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OutpatientDetail edge %s", name)
}

// PatientMutation represents an operation that mutates the Patient nodes in the graph.
type PatientMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	phone_number            *string
	first_name              *string
	last_name               *string
	gender                  *int32
	addgender               *int32
	address                 *string
	date_of_birth           *time.Time
	current_patient_type    *int32
	addcurrent_patient_type *int32
	clearedFields           map[string]struct{}
	inpatients              map[uuid.UUID]struct{}
	removedinpatients       map[uuid.UUID]struct{}
	clearedinpatients       bool
	outpatients             map[uuid.UUID]struct{}
	removedoutpatients      map[uuid.UUID]struct{}
	clearedoutpatients      bool
	done                    bool
	oldValue                func(context.Context) (*Patient, error)
	predicates              []predicate.Patient
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows management of the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for the Patient entity.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the ID field of the mutation.
func withPatientID(id uuid.UUID) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Patient entities.
func (m *PatientMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PatientMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PatientMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Patient.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPhoneNumber sets the "phone_number" field.
func (m *PatientMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *PatientMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *PatientMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// SetFirstName sets the "first_name" field.
func (m *PatientMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *PatientMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *PatientMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *PatientMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *PatientMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *PatientMutation) ResetLastName() {
	m.last_name = nil
}

// SetGender sets the "gender" field.
func (m *PatientMutation) SetGender(i int32) {
	m.gender = &i
	m.addgender = nil
}

// Gender returns the value of the "gender" field in the mutation.
func (m *PatientMutation) Gender() (r int32, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldGender(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// AddGender adds i to the "gender" field.
func (m *PatientMutation) AddGender(i int32) {
	if m.addgender != nil {
		*m.addgender += i
	} else {
		m.addgender = &i
	}
}

// AddedGender returns the value that was added to the "gender" field in this mutation.
func (m *PatientMutation) AddedGender() (r int32, exists bool) {
	v := m.addgender
	if v == nil {
		return
	}
	return *v, true
}

// ResetGender resets all changes to the "gender" field.
func (m *PatientMutation) ResetGender() {
	m.gender = nil
	m.addgender = nil
}

// SetAddress sets the "address" field.
func (m *PatientMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *PatientMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *PatientMutation) ResetAddress() {
	m.address = nil
}

// SetDateOfBirth sets the "date_of_birth" field.
func (m *PatientMutation) SetDateOfBirth(t time.Time) {
	m.date_of_birth = &t
}

// DateOfBirth returns the value of the "date_of_birth" field in the mutation.
func (m *PatientMutation) DateOfBirth() (r time.Time, exists bool) {
	v := m.date_of_birth
	if v == nil {
		return
	}
	return *v, true
}

// OldDateOfBirth returns the old "date_of_birth" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldDateOfBirth(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateOfBirth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateOfBirth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateOfBirth: %w", err)
	}
	return oldValue.DateOfBirth, nil
}

// ResetDateOfBirth resets all changes to the "date_of_birth" field.
func (m *PatientMutation) ResetDateOfBirth() {
	m.date_of_birth = nil
}

// SetCurrentPatientType sets the "current_patient_type" field.
func (m *PatientMutation) SetCurrentPatientType(i int32) {
	m.current_patient_type = &i
	m.addcurrent_patient_type = nil
}

// CurrentPatientType returns the value of the "current_patient_type" field in the mutation.
func (m *PatientMutation) CurrentPatientType() (r int32, exists bool) {
	v := m.current_patient_type
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentPatientType returns the old "current_patient_type" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldCurrentPatientType(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentPatientType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentPatientType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentPatientType: %w", err)
	}
	return oldValue.CurrentPatientType, nil
}

// AddCurrentPatientType adds i to the "current_patient_type" field.
func (m *PatientMutation) AddCurrentPatientType(i int32) {
	if m.addcurrent_patient_type != nil {
		*m.addcurrent_patient_type += i
	} else {
		m.addcurrent_patient_type = &i
	}
}

// AddedCurrentPatientType returns the value that was added to the "current_patient_type" field in this mutation.
func (m *PatientMutation) AddedCurrentPatientType() (r int32, exists bool) {
	v := m.addcurrent_patient_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetCurrentPatientType resets all changes to the "current_patient_type" field.
func (m *PatientMutation) ResetCurrentPatientType() {
	m.current_patient_type = nil
	m.addcurrent_patient_type = nil
}

// AddInpatientIDs adds the "inpatients" edge to the Inpatient entity by ids.
func (m *PatientMutation) AddInpatientIDs(ids ...uuid.UUID) {
	if m.inpatients == nil {
		m.inpatients = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.inpatients[ids[i]] = struct{}{}
	}
}

// ClearInpatients clears the "inpatients" edge to the Inpatient entity.
func (m *PatientMutation) ClearInpatients() {
	m.clearedinpatients = true
}

// InpatientsCleared reports if the "inpatients" edge to the Inpatient entity was cleared.
func (m *PatientMutation) InpatientsCleared() bool {
	return m.clearedinpatients
}

// RemoveInpatientIDs removes the "inpatients" edge to the Inpatient entity by IDs.
func (m *PatientMutation) RemoveInpatientIDs(ids ...uuid.UUID) {
	if m.removedinpatients == nil {
		m.removedinpatients = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.inpatients, ids[i])
		m.removedinpatients[ids[i]] = struct{}{}
	}
}

// RemovedInpatients returns the removed IDs of the "inpatients" edge to the Inpatient entity.
func (m *PatientMutation) RemovedInpatientsIDs() (ids []uuid.UUID) {
	for id := range m.removedinpatients {
		ids = append(ids, id)
	}
	return
}

// InpatientsIDs returns the "inpatients" edge IDs in the mutation.
func (m *PatientMutation) InpatientsIDs() (ids []uuid.UUID) {
	for id := range m.inpatients {
		ids = append(ids, id)
	}
	return
}

// ResetInpatients resets all changes to the "inpatients" edge.
func (m *PatientMutation) ResetInpatients() {
	m.inpatients = nil
	m.clearedinpatients = false
	m.removedinpatients = nil
}

// AddOutpatientIDs adds the "outpatients" edge to the Outpatient entity by ids.
func (m *PatientMutation) AddOutpatientIDs(ids ...uuid.UUID) {
	if m.outpatients == nil {
		m.outpatients = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.outpatients[ids[i]] = struct{}{}
	}
}

// ClearOutpatients clears the "outpatients" edge to the Outpatient entity.
func (m *PatientMutation) ClearOutpatients() {
	m.clearedoutpatients = true
}

// OutpatientsCleared reports if the "outpatients" edge to the Outpatient entity was cleared.
func (m *PatientMutation) OutpatientsCleared() bool {
	return m.clearedoutpatients
}

// RemoveOutpatientIDs removes the "outpatients" edge to the Outpatient entity by IDs.
func (m *PatientMutation) RemoveOutpatientIDs(ids ...uuid.UUID) {
	if m.removedoutpatients == nil {
		m.removedoutpatients = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.outpatients, ids[i])
		m.removedoutpatients[ids[i]] = struct{}{}
	}
}

// RemovedOutpatients returns the removed IDs of the "outpatients" edge to the Outpatient entity.
func (m *PatientMutation) RemovedOutpatientsIDs() (ids []uuid.UUID) {
	for id := range m.removedoutpatients {
		ids = append(ids, id)
	}
	return
}

// OutpatientsIDs returns the "outpatients" edge IDs in the mutation.
func (m *PatientMutation) OutpatientsIDs() (ids []uuid.UUID) {
	for id := range m.outpatients {
		ids = append(ids, id)
	}
	return
}

// ResetOutpatients resets all changes to the "outpatients" edge.
func (m *PatientMutation) ResetOutpatients() {
	m.outpatients = nil
	m.clearedoutpatients = false
	m.removedoutpatients = nil
}

// Where appends a list predicates to the PatientMutation builder.
func (m *PatientMutation) Where(ps ...predicate.Patient) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PatientMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PatientMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Patient, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PatientMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.phone_number != nil {
		fields = append(fields, patient.FieldPhoneNumber)
	}
	if m.first_name != nil {
		fields = append(fields, patient.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, patient.FieldLastName)
	}
	if m.gender != nil {
		fields = append(fields, patient.FieldGender)
	}
	if m.address != nil {
		fields = append(fields, patient.FieldAddress)
	}
	if m.date_of_birth != nil {
		fields = append(fields, patient.FieldDateOfBirth)
	}
	if m.current_patient_type != nil {
		fields = append(fields, patient.FieldCurrentPatientType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPhoneNumber:
		return m.PhoneNumber()
	case patient.FieldFirstName:
		return m.FirstName()
	case patient.FieldLastName:
		return m.LastName()
	case patient.FieldGender:
		return m.Gender()
	case patient.FieldAddress:
		return m.Address()
	case patient.FieldDateOfBirth:
		return m.DateOfBirth()
	case patient.FieldCurrentPatientType:
		return m.CurrentPatientType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case patient.FieldFirstName:
		return m.OldFirstName(ctx)
	case patient.FieldLastName:
		return m.OldLastName(ctx)
	case patient.FieldGender:
		return m.OldGender(ctx)
	case patient.FieldAddress:
		return m.OldAddress(ctx)
	case patient.FieldDateOfBirth:
		return m.OldDateOfBirth(ctx)
	case patient.FieldCurrentPatientType:
		return m.OldCurrentPatientType(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case patient.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case patient.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case patient.FieldGender:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case patient.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case patient.FieldDateOfBirth:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateOfBirth(v)
		return nil
	case patient.FieldCurrentPatientType:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentPatientType(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PatientMutation) AddedFields() []string {
	var fields []string
	if m.addgender != nil {
		fields = append(fields, patient.FieldGender)
	}
	if m.addcurrent_patient_type != nil {
		fields = append(fields, patient.FieldCurrentPatientType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldGender:
		return m.AddedGender()
	case patient.FieldCurrentPatientType:
		return m.AddedCurrentPatientType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case patient.FieldGender:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGender(v)
		return nil
	case patient.FieldCurrentPatientType:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrentPatientType(v)
		return nil
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case patient.FieldFirstName:
		m.ResetFirstName()
		return nil
	case patient.FieldLastName:
		m.ResetLastName()
		return nil
	case patient.FieldGender:
		m.ResetGender()
		return nil
	case patient.FieldAddress:
		m.ResetAddress()
		return nil
	case patient.FieldDateOfBirth:
		m.ResetDateOfBirth()
		return nil
	case patient.FieldCurrentPatientType:
		m.ResetCurrentPatientType()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.inpatients != nil {
		edges = append(edges, patient.EdgeInpatients)
	}
	if m.outpatients != nil {
		edges = append(edges, patient.EdgeOutpatients)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeInpatients:
		ids := make([]ent.Value, 0, len(m.inpatients))
		for id := range m.inpatients {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeOutpatients:
		ids := make([]ent.Value, 0, len(m.outpatients))
		for id := range m.outpatients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedinpatients != nil {
		edges = append(edges, patient.EdgeInpatients)
	}
	if m.removedoutpatients != nil {
		edges = append(edges, patient.EdgeOutpatients)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeInpatients:
		ids := make([]ent.Value, 0, len(m.removedinpatients))
		for id := range m.removedinpatients {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeOutpatients:
		ids := make([]ent.Value, 0, len(m.removedoutpatients))
		for id := range m.removedoutpatients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedinpatients {
		edges = append(edges, patient.EdgeInpatients)
	}
	if m.clearedoutpatients {
		edges = append(edges, patient.EdgeOutpatients)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	case patient.EdgeInpatients:
		return m.clearedinpatients
	case patient.EdgeOutpatients:
		return m.clearedoutpatients
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgeInpatients:
		m.ResetInpatients()
		return nil
	case patient.EdgeOutpatients:
		m.ResetOutpatients()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// TreatDetailMutation represents an operation that mutates the TreatDetail nodes in the graph.
type TreatDetailMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TreatDetail, error)
	predicates    []predicate.TreatDetail
}

var _ ent.Mutation = (*TreatDetailMutation)(nil)

// treatdetailOption allows management of the mutation configuration using functional options.
type treatdetailOption func(*TreatDetailMutation)

// newTreatDetailMutation creates new mutation for the TreatDetail entity.
func newTreatDetailMutation(c config, op Op, opts ...treatdetailOption) *TreatDetailMutation {
	m := &TreatDetailMutation{
		config:        c,
		op:            op,
		typ:           TypeTreatDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTreatDetailID sets the ID field of the mutation.
func withTreatDetailID(id int) treatdetailOption {
	return func(m *TreatDetailMutation) {
		var (
			err   error
			once  sync.Once
			value *TreatDetail
		)
		m.oldValue = func(ctx context.Context) (*TreatDetail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TreatDetail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTreatDetail sets the old TreatDetail of the mutation.
func withTreatDetail(node *TreatDetail) treatdetailOption {
	return func(m *TreatDetailMutation) {
		m.oldValue = func(context.Context) (*TreatDetail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TreatDetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TreatDetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TreatDetailMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TreatDetailMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TreatDetail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the TreatDetailMutation builder.
func (m *TreatDetailMutation) Where(ps ...predicate.TreatDetail) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TreatDetailMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TreatDetailMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TreatDetail, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TreatDetailMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TreatDetailMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TreatDetail).
func (m *TreatDetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TreatDetailMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TreatDetailMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TreatDetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown TreatDetail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TreatDetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TreatDetail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TreatDetailMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TreatDetailMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TreatDetailMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown TreatDetail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TreatDetailMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TreatDetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TreatDetailMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TreatDetail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TreatDetailMutation) ResetField(name string) error {
	return fmt.Errorf("unknown TreatDetail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TreatDetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TreatDetailMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TreatDetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TreatDetailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TreatDetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TreatDetailMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TreatDetailMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TreatDetail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TreatDetailMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TreatDetail edge %s", name)
}

// TreatMedicationMutation represents an operation that mutates the TreatMedication nodes in the graph.
type TreatMedicationMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TreatMedication, error)
	predicates    []predicate.TreatMedication
}

var _ ent.Mutation = (*TreatMedicationMutation)(nil)

// treatmedicationOption allows management of the mutation configuration using functional options.
type treatmedicationOption func(*TreatMedicationMutation)

// newTreatMedicationMutation creates new mutation for the TreatMedication entity.
func newTreatMedicationMutation(c config, op Op, opts ...treatmedicationOption) *TreatMedicationMutation {
	m := &TreatMedicationMutation{
		config:        c,
		op:            op,
		typ:           TypeTreatMedication,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTreatMedicationID sets the ID field of the mutation.
func withTreatMedicationID(id int) treatmedicationOption {
	return func(m *TreatMedicationMutation) {
		var (
			err   error
			once  sync.Once
			value *TreatMedication
		)
		m.oldValue = func(ctx context.Context) (*TreatMedication, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TreatMedication.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTreatMedication sets the old TreatMedication of the mutation.
func withTreatMedication(node *TreatMedication) treatmedicationOption {
	return func(m *TreatMedicationMutation) {
		m.oldValue = func(context.Context) (*TreatMedication, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TreatMedicationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TreatMedicationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TreatMedicationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TreatMedicationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TreatMedication.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the TreatMedicationMutation builder.
func (m *TreatMedicationMutation) Where(ps ...predicate.TreatMedication) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TreatMedicationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TreatMedicationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TreatMedication, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TreatMedicationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TreatMedicationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TreatMedication).
func (m *TreatMedicationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TreatMedicationMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TreatMedicationMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TreatMedicationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown TreatMedication field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TreatMedicationMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TreatMedication field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TreatMedicationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TreatMedicationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TreatMedicationMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown TreatMedication numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TreatMedicationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TreatMedicationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TreatMedicationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TreatMedication nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TreatMedicationMutation) ResetField(name string) error {
	return fmt.Errorf("unknown TreatMedication field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TreatMedicationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TreatMedicationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TreatMedicationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TreatMedicationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TreatMedicationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TreatMedicationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TreatMedicationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TreatMedication unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TreatMedicationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TreatMedication edge %s", name)
}
