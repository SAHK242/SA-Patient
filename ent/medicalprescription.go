// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"patient/ent/medicalhistories"
	"patient/ent/medicalprescription"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// MedicalPrescription is the model entity for the MedicalPrescription schema.
type MedicalPrescription struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// MedicalHistoryID holds the value of the "medical_history_id" field.
	MedicalHistoryID uuid.UUID `json:"medical_history_id,omitempty"`
	// PrescriptionDate holds the value of the "prescription_date" field.
	PrescriptionDate time.Time `json:"prescription_date,omitempty"`
	// Fee holds the value of the "fee" field.
	Fee float64 `json:"fee,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MedicalPrescriptionQuery when eager-loading is set.
	Edges        MedicalPrescriptionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MedicalPrescriptionEdges holds the relations/edges for other nodes in the graph.
type MedicalPrescriptionEdges struct {
	// MedicalHistories holds the value of the medical_histories edge.
	MedicalHistories *MedicalHistories `json:"medical_histories,omitempty"`
	// PrescriptionMedication holds the value of the prescription_medication edge.
	PrescriptionMedication []*PrescriptionMedication `json:"prescription_medication,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MedicalHistoriesOrErr returns the MedicalHistories value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MedicalPrescriptionEdges) MedicalHistoriesOrErr() (*MedicalHistories, error) {
	if e.MedicalHistories != nil {
		return e.MedicalHistories, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: medicalhistories.Label}
	}
	return nil, &NotLoadedError{edge: "medical_histories"}
}

// PrescriptionMedicationOrErr returns the PrescriptionMedication value or an error if the edge
// was not loaded in eager-loading.
func (e MedicalPrescriptionEdges) PrescriptionMedicationOrErr() ([]*PrescriptionMedication, error) {
	if e.loadedTypes[1] {
		return e.PrescriptionMedication, nil
	}
	return nil, &NotLoadedError{edge: "prescription_medication"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MedicalPrescription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case medicalprescription.FieldFee:
			values[i] = new(sql.NullFloat64)
		case medicalprescription.FieldPrescriptionDate, medicalprescription.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case medicalprescription.FieldID, medicalprescription.FieldMedicalHistoryID, medicalprescription.FieldCreatedBy:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MedicalPrescription fields.
func (mp *MedicalPrescription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case medicalprescription.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mp.ID = *value
			}
		case medicalprescription.FieldMedicalHistoryID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field medical_history_id", values[i])
			} else if value != nil {
				mp.MedicalHistoryID = *value
			}
		case medicalprescription.FieldPrescriptionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field prescription_date", values[i])
			} else if value.Valid {
				mp.PrescriptionDate = value.Time
			}
		case medicalprescription.FieldFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fee", values[i])
			} else if value.Valid {
				mp.Fee = value.Float64
			}
		case medicalprescription.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mp.CreatedAt = value.Time
			}
		case medicalprescription.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				mp.CreatedBy = *value
			}
		default:
			mp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MedicalPrescription.
// This includes values selected through modifiers, order, etc.
func (mp *MedicalPrescription) Value(name string) (ent.Value, error) {
	return mp.selectValues.Get(name)
}

// QueryMedicalHistories queries the "medical_histories" edge of the MedicalPrescription entity.
func (mp *MedicalPrescription) QueryMedicalHistories() *MedicalHistoriesQuery {
	return NewMedicalPrescriptionClient(mp.config).QueryMedicalHistories(mp)
}

// QueryPrescriptionMedication queries the "prescription_medication" edge of the MedicalPrescription entity.
func (mp *MedicalPrescription) QueryPrescriptionMedication() *PrescriptionMedicationQuery {
	return NewMedicalPrescriptionClient(mp.config).QueryPrescriptionMedication(mp)
}

// Update returns a builder for updating this MedicalPrescription.
// Note that you need to call MedicalPrescription.Unwrap() before calling this method if this MedicalPrescription
// was returned from a transaction, and the transaction was committed or rolled back.
func (mp *MedicalPrescription) Update() *MedicalPrescriptionUpdateOne {
	return NewMedicalPrescriptionClient(mp.config).UpdateOne(mp)
}

// Unwrap unwraps the MedicalPrescription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mp *MedicalPrescription) Unwrap() *MedicalPrescription {
	_tx, ok := mp.config.driver.(*txDriver)
	if !ok {
		panic("ent: MedicalPrescription is not a transactional entity")
	}
	mp.config.driver = _tx.drv
	return mp
}

// String implements the fmt.Stringer.
func (mp *MedicalPrescription) String() string {
	var builder strings.Builder
	builder.WriteString("MedicalPrescription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mp.ID))
	builder.WriteString("medical_history_id=")
	builder.WriteString(fmt.Sprintf("%v", mp.MedicalHistoryID))
	builder.WriteString(", ")
	builder.WriteString("prescription_date=")
	builder.WriteString(mp.PrescriptionDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("fee=")
	builder.WriteString(fmt.Sprintf("%v", mp.Fee))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", mp.CreatedBy))
	builder.WriteByte(')')
	return builder.String()
}

// MedicalPrescriptions is a parsable slice of MedicalPrescription.
type MedicalPrescriptions []*MedicalPrescription
