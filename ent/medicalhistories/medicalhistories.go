// Code generated by ent, DO NOT EDIT.

package medicalhistories

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the medicalhistories type in the database.
	Label = "medical_histories"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPatientID holds the string denoting the patient_id field in the database.
	FieldPatientID = "patient_id"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldDiagnosis holds the string denoting the diagnosis field in the database.
	FieldDiagnosis = "diagnosis"
	// FieldHasTreatment holds the string denoting the has_treatment field in the database.
	FieldHasTreatment = "has_treatment"
	// FieldHasSurgery holds the string denoting the has_surgery field in the database.
	FieldHasSurgery = "has_surgery"
	// FieldHasPrescription holds the string denoting the has_prescription field in the database.
	FieldHasPrescription = "has_prescription"
	// FieldDoctorNotes holds the string denoting the doctor_notes field in the database.
	FieldDoctorNotes = "doctor_notes"
	// FieldMedicalEndDate holds the string denoting the medical_end_date field in the database.
	FieldMedicalEndDate = "medical_end_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// EdgePatient holds the string denoting the patient edge name in mutations.
	EdgePatient = "patient"
	// EdgeMedicalPrescription holds the string denoting the medical_prescription edge name in mutations.
	EdgeMedicalPrescription = "medical_prescription"
	// EdgeMedicalTreatment holds the string denoting the medical_treatment edge name in mutations.
	EdgeMedicalTreatment = "medical_treatment"
	// EdgeMedicalSurgery holds the string denoting the medical_surgery edge name in mutations.
	EdgeMedicalSurgery = "medical_surgery"
	// Table holds the table name of the medicalhistories in the database.
	Table = "medical_histories"
	// PatientTable is the table that holds the patient relation/edge.
	PatientTable = "medical_histories"
	// PatientInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	PatientInverseTable = "patient"
	// PatientColumn is the table column denoting the patient relation/edge.
	PatientColumn = "patient_id"
	// MedicalPrescriptionTable is the table that holds the medical_prescription relation/edge.
	MedicalPrescriptionTable = "medical_prescription"
	// MedicalPrescriptionInverseTable is the table name for the MedicalPrescription entity.
	// It exists in this package in order to avoid circular dependency with the "medicalprescription" package.
	MedicalPrescriptionInverseTable = "medical_prescription"
	// MedicalPrescriptionColumn is the table column denoting the medical_prescription relation/edge.
	MedicalPrescriptionColumn = "medical_history_id"
	// MedicalTreatmentTable is the table that holds the medical_treatment relation/edge.
	MedicalTreatmentTable = "medical_treatment"
	// MedicalTreatmentInverseTable is the table name for the MedicalTreatment entity.
	// It exists in this package in order to avoid circular dependency with the "medicaltreatment" package.
	MedicalTreatmentInverseTable = "medical_treatment"
	// MedicalTreatmentColumn is the table column denoting the medical_treatment relation/edge.
	MedicalTreatmentColumn = "medical_history_id"
	// MedicalSurgeryTable is the table that holds the medical_surgery relation/edge.
	MedicalSurgeryTable = "medical_surgery"
	// MedicalSurgeryInverseTable is the table name for the MedicalSurgery entity.
	// It exists in this package in order to avoid circular dependency with the "medicalsurgery" package.
	MedicalSurgeryInverseTable = "medical_surgery"
	// MedicalSurgeryColumn is the table column denoting the medical_surgery relation/edge.
	MedicalSurgeryColumn = "medical_history_id"
)

// Columns holds all SQL columns for medicalhistories fields.
var Columns = []string{
	FieldID,
	FieldPatientID,
	FieldReason,
	FieldDiagnosis,
	FieldHasTreatment,
	FieldHasSurgery,
	FieldHasPrescription,
	FieldDoctorNotes,
	FieldMedicalEndDate,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ReasonValidator is a validator for the "reason" field. It is called by the builders before save.
	ReasonValidator func(string) error
	// DiagnosisValidator is a validator for the "diagnosis" field. It is called by the builders before save.
	DiagnosisValidator func(string) error
	// DefaultHasTreatment holds the default value on creation for the "has_treatment" field.
	DefaultHasTreatment bool
	// DefaultHasSurgery holds the default value on creation for the "has_surgery" field.
	DefaultHasSurgery bool
	// DefaultHasPrescription holds the default value on creation for the "has_prescription" field.
	DefaultHasPrescription bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the MedicalHistories queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPatientID orders the results by the patient_id field.
func ByPatientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatientID, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByDiagnosis orders the results by the diagnosis field.
func ByDiagnosis(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiagnosis, opts...).ToFunc()
}

// ByHasTreatment orders the results by the has_treatment field.
func ByHasTreatment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasTreatment, opts...).ToFunc()
}

// ByHasSurgery orders the results by the has_surgery field.
func ByHasSurgery(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasSurgery, opts...).ToFunc()
}

// ByHasPrescription orders the results by the has_prescription field.
func ByHasPrescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasPrescription, opts...).ToFunc()
}

// ByDoctorNotes orders the results by the doctor_notes field.
func ByDoctorNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDoctorNotes, opts...).ToFunc()
}

// ByMedicalEndDate orders the results by the medical_end_date field.
func ByMedicalEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMedicalEndDate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByPatientField orders the results by patient field.
func ByPatientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPatientStep(), sql.OrderByField(field, opts...))
	}
}

// ByMedicalPrescriptionCount orders the results by medical_prescription count.
func ByMedicalPrescriptionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMedicalPrescriptionStep(), opts...)
	}
}

// ByMedicalPrescription orders the results by medical_prescription terms.
func ByMedicalPrescription(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMedicalPrescriptionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMedicalTreatmentCount orders the results by medical_treatment count.
func ByMedicalTreatmentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMedicalTreatmentStep(), opts...)
	}
}

// ByMedicalTreatment orders the results by medical_treatment terms.
func ByMedicalTreatment(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMedicalTreatmentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMedicalSurgeryCount orders the results by medical_surgery count.
func ByMedicalSurgeryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMedicalSurgeryStep(), opts...)
	}
}

// ByMedicalSurgery orders the results by medical_surgery terms.
func ByMedicalSurgery(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMedicalSurgeryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPatientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PatientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
	)
}
func newMedicalPrescriptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MedicalPrescriptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MedicalPrescriptionTable, MedicalPrescriptionColumn),
	)
}
func newMedicalTreatmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MedicalTreatmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MedicalTreatmentTable, MedicalTreatmentColumn),
	)
}
func newMedicalSurgeryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MedicalSurgeryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MedicalSurgeryTable, MedicalSurgeryColumn),
	)
}
