// Code generated by ent, DO NOT EDIT.

package medicalhistories

import (
	"patient/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLTE(FieldID, id))
}

// PatientID applies equality check predicate on the "patient_id" field. It's identical to PatientIDEQ.
func PatientID(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldPatientID, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldReason, v))
}

// Diagnosis applies equality check predicate on the "diagnosis" field. It's identical to DiagnosisEQ.
func Diagnosis(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldDiagnosis, v))
}

// HasTreatment applies equality check predicate on the "has_treatment" field. It's identical to HasTreatmentEQ.
func HasTreatment(v bool) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldHasTreatment, v))
}

// HasSurgery applies equality check predicate on the "has_surgery" field. It's identical to HasSurgeryEQ.
func HasSurgery(v bool) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldHasSurgery, v))
}

// HasPrescription applies equality check predicate on the "has_prescription" field. It's identical to HasPrescriptionEQ.
func HasPrescription(v bool) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldHasPrescription, v))
}

// DoctorNotes applies equality check predicate on the "doctor_notes" field. It's identical to DoctorNotesEQ.
func DoctorNotes(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldDoctorNotes, v))
}

// MedicalEndDate applies equality check predicate on the "medical_end_date" field. It's identical to MedicalEndDateEQ.
func MedicalEndDate(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldMedicalEndDate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldUpdatedBy, v))
}

// PatientIDEQ applies the EQ predicate on the "patient_id" field.
func PatientIDEQ(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldPatientID, v))
}

// PatientIDNEQ applies the NEQ predicate on the "patient_id" field.
func PatientIDNEQ(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNEQ(FieldPatientID, v))
}

// PatientIDIn applies the In predicate on the "patient_id" field.
func PatientIDIn(vs ...uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldIn(FieldPatientID, vs...))
}

// PatientIDNotIn applies the NotIn predicate on the "patient_id" field.
func PatientIDNotIn(vs ...uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNotIn(FieldPatientID, vs...))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldContainsFold(FieldReason, v))
}

// DiagnosisEQ applies the EQ predicate on the "diagnosis" field.
func DiagnosisEQ(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldDiagnosis, v))
}

// DiagnosisNEQ applies the NEQ predicate on the "diagnosis" field.
func DiagnosisNEQ(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNEQ(FieldDiagnosis, v))
}

// DiagnosisIn applies the In predicate on the "diagnosis" field.
func DiagnosisIn(vs ...string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldIn(FieldDiagnosis, vs...))
}

// DiagnosisNotIn applies the NotIn predicate on the "diagnosis" field.
func DiagnosisNotIn(vs ...string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNotIn(FieldDiagnosis, vs...))
}

// DiagnosisGT applies the GT predicate on the "diagnosis" field.
func DiagnosisGT(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGT(FieldDiagnosis, v))
}

// DiagnosisGTE applies the GTE predicate on the "diagnosis" field.
func DiagnosisGTE(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGTE(FieldDiagnosis, v))
}

// DiagnosisLT applies the LT predicate on the "diagnosis" field.
func DiagnosisLT(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLT(FieldDiagnosis, v))
}

// DiagnosisLTE applies the LTE predicate on the "diagnosis" field.
func DiagnosisLTE(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLTE(FieldDiagnosis, v))
}

// DiagnosisContains applies the Contains predicate on the "diagnosis" field.
func DiagnosisContains(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldContains(FieldDiagnosis, v))
}

// DiagnosisHasPrefix applies the HasPrefix predicate on the "diagnosis" field.
func DiagnosisHasPrefix(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldHasPrefix(FieldDiagnosis, v))
}

// DiagnosisHasSuffix applies the HasSuffix predicate on the "diagnosis" field.
func DiagnosisHasSuffix(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldHasSuffix(FieldDiagnosis, v))
}

// DiagnosisEqualFold applies the EqualFold predicate on the "diagnosis" field.
func DiagnosisEqualFold(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEqualFold(FieldDiagnosis, v))
}

// DiagnosisContainsFold applies the ContainsFold predicate on the "diagnosis" field.
func DiagnosisContainsFold(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldContainsFold(FieldDiagnosis, v))
}

// HasTreatmentEQ applies the EQ predicate on the "has_treatment" field.
func HasTreatmentEQ(v bool) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldHasTreatment, v))
}

// HasTreatmentNEQ applies the NEQ predicate on the "has_treatment" field.
func HasTreatmentNEQ(v bool) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNEQ(FieldHasTreatment, v))
}

// HasSurgeryEQ applies the EQ predicate on the "has_surgery" field.
func HasSurgeryEQ(v bool) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldHasSurgery, v))
}

// HasSurgeryNEQ applies the NEQ predicate on the "has_surgery" field.
func HasSurgeryNEQ(v bool) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNEQ(FieldHasSurgery, v))
}

// HasPrescriptionEQ applies the EQ predicate on the "has_prescription" field.
func HasPrescriptionEQ(v bool) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldHasPrescription, v))
}

// HasPrescriptionNEQ applies the NEQ predicate on the "has_prescription" field.
func HasPrescriptionNEQ(v bool) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNEQ(FieldHasPrescription, v))
}

// DoctorNotesEQ applies the EQ predicate on the "doctor_notes" field.
func DoctorNotesEQ(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldDoctorNotes, v))
}

// DoctorNotesNEQ applies the NEQ predicate on the "doctor_notes" field.
func DoctorNotesNEQ(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNEQ(FieldDoctorNotes, v))
}

// DoctorNotesIn applies the In predicate on the "doctor_notes" field.
func DoctorNotesIn(vs ...string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldIn(FieldDoctorNotes, vs...))
}

// DoctorNotesNotIn applies the NotIn predicate on the "doctor_notes" field.
func DoctorNotesNotIn(vs ...string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNotIn(FieldDoctorNotes, vs...))
}

// DoctorNotesGT applies the GT predicate on the "doctor_notes" field.
func DoctorNotesGT(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGT(FieldDoctorNotes, v))
}

// DoctorNotesGTE applies the GTE predicate on the "doctor_notes" field.
func DoctorNotesGTE(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGTE(FieldDoctorNotes, v))
}

// DoctorNotesLT applies the LT predicate on the "doctor_notes" field.
func DoctorNotesLT(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLT(FieldDoctorNotes, v))
}

// DoctorNotesLTE applies the LTE predicate on the "doctor_notes" field.
func DoctorNotesLTE(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLTE(FieldDoctorNotes, v))
}

// DoctorNotesContains applies the Contains predicate on the "doctor_notes" field.
func DoctorNotesContains(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldContains(FieldDoctorNotes, v))
}

// DoctorNotesHasPrefix applies the HasPrefix predicate on the "doctor_notes" field.
func DoctorNotesHasPrefix(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldHasPrefix(FieldDoctorNotes, v))
}

// DoctorNotesHasSuffix applies the HasSuffix predicate on the "doctor_notes" field.
func DoctorNotesHasSuffix(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldHasSuffix(FieldDoctorNotes, v))
}

// DoctorNotesIsNil applies the IsNil predicate on the "doctor_notes" field.
func DoctorNotesIsNil() predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldIsNull(FieldDoctorNotes))
}

// DoctorNotesNotNil applies the NotNil predicate on the "doctor_notes" field.
func DoctorNotesNotNil() predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNotNull(FieldDoctorNotes))
}

// DoctorNotesEqualFold applies the EqualFold predicate on the "doctor_notes" field.
func DoctorNotesEqualFold(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEqualFold(FieldDoctorNotes, v))
}

// DoctorNotesContainsFold applies the ContainsFold predicate on the "doctor_notes" field.
func DoctorNotesContainsFold(v string) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldContainsFold(FieldDoctorNotes, v))
}

// MedicalEndDateEQ applies the EQ predicate on the "medical_end_date" field.
func MedicalEndDateEQ(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldMedicalEndDate, v))
}

// MedicalEndDateNEQ applies the NEQ predicate on the "medical_end_date" field.
func MedicalEndDateNEQ(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNEQ(FieldMedicalEndDate, v))
}

// MedicalEndDateIn applies the In predicate on the "medical_end_date" field.
func MedicalEndDateIn(vs ...time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldIn(FieldMedicalEndDate, vs...))
}

// MedicalEndDateNotIn applies the NotIn predicate on the "medical_end_date" field.
func MedicalEndDateNotIn(vs ...time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNotIn(FieldMedicalEndDate, vs...))
}

// MedicalEndDateGT applies the GT predicate on the "medical_end_date" field.
func MedicalEndDateGT(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGT(FieldMedicalEndDate, v))
}

// MedicalEndDateGTE applies the GTE predicate on the "medical_end_date" field.
func MedicalEndDateGTE(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGTE(FieldMedicalEndDate, v))
}

// MedicalEndDateLT applies the LT predicate on the "medical_end_date" field.
func MedicalEndDateLT(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLT(FieldMedicalEndDate, v))
}

// MedicalEndDateLTE applies the LTE predicate on the "medical_end_date" field.
func MedicalEndDateLTE(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLTE(FieldMedicalEndDate, v))
}

// MedicalEndDateIsNil applies the IsNil predicate on the "medical_end_date" field.
func MedicalEndDateIsNil() predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldIsNull(FieldMedicalEndDate))
}

// MedicalEndDateNotNil applies the NotNil predicate on the "medical_end_date" field.
func MedicalEndDateNotNil() predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNotNull(FieldMedicalEndDate))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v uuid.UUID) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.FieldLTE(FieldUpdatedBy, v))
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.MedicalHistories {
	return predicate.MedicalHistories(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.MedicalHistories {
	return predicate.MedicalHistories(func(s *sql.Selector) {
		step := newPatientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMedicalPrescription applies the HasEdge predicate on the "medical_prescription" edge.
func HasMedicalPrescription() predicate.MedicalHistories {
	return predicate.MedicalHistories(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MedicalPrescriptionTable, MedicalPrescriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMedicalPrescriptionWith applies the HasEdge predicate on the "medical_prescription" edge with a given conditions (other predicates).
func HasMedicalPrescriptionWith(preds ...predicate.MedicalPrescription) predicate.MedicalHistories {
	return predicate.MedicalHistories(func(s *sql.Selector) {
		step := newMedicalPrescriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMedicalTreatment applies the HasEdge predicate on the "medical_treatment" edge.
func HasMedicalTreatment() predicate.MedicalHistories {
	return predicate.MedicalHistories(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MedicalTreatmentTable, MedicalTreatmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMedicalTreatmentWith applies the HasEdge predicate on the "medical_treatment" edge with a given conditions (other predicates).
func HasMedicalTreatmentWith(preds ...predicate.MedicalTreatment) predicate.MedicalHistories {
	return predicate.MedicalHistories(func(s *sql.Selector) {
		step := newMedicalTreatmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMedicalSurgery applies the HasEdge predicate on the "medical_surgery" edge.
func HasMedicalSurgery() predicate.MedicalHistories {
	return predicate.MedicalHistories(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MedicalSurgeryTable, MedicalSurgeryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMedicalSurgeryWith applies the HasEdge predicate on the "medical_surgery" edge with a given conditions (other predicates).
func HasMedicalSurgeryWith(preds ...predicate.MedicalSurgery) predicate.MedicalHistories {
	return predicate.MedicalHistories(func(s *sql.Selector) {
		step := newMedicalSurgeryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MedicalHistories) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MedicalHistories) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MedicalHistories) predicate.MedicalHistories {
	return predicate.MedicalHistories(sql.NotPredicates(p))
}
