// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"patient/ent/outpatientdetail"
	"patient/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OutpatientDetailDelete is the builder for deleting a OutpatientDetail entity.
type OutpatientDetailDelete struct {
	config
	hooks    []Hook
	mutation *OutpatientDetailMutation
}

// Where appends a list predicates to the OutpatientDetailDelete builder.
func (odd *OutpatientDetailDelete) Where(ps ...predicate.OutpatientDetail) *OutpatientDetailDelete {
	odd.mutation.Where(ps...)
	return odd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (odd *OutpatientDetailDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, odd.sqlExec, odd.mutation, odd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (odd *OutpatientDetailDelete) ExecX(ctx context.Context) int {
	n, err := odd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (odd *OutpatientDetailDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(outpatientdetail.Table, sqlgraph.NewFieldSpec(outpatientdetail.FieldID, field.TypeInt))
	if ps := odd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, odd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	odd.mutation.done = true
	return affected, err
}

// OutpatientDetailDeleteOne is the builder for deleting a single OutpatientDetail entity.
type OutpatientDetailDeleteOne struct {
	odd *OutpatientDetailDelete
}

// Where appends a list predicates to the OutpatientDetailDelete builder.
func (oddo *OutpatientDetailDeleteOne) Where(ps ...predicate.OutpatientDetail) *OutpatientDetailDeleteOne {
	oddo.odd.mutation.Where(ps...)
	return oddo
}

// Exec executes the deletion query.
func (oddo *OutpatientDetailDeleteOne) Exec(ctx context.Context) error {
	n, err := oddo.odd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{outpatientdetail.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (oddo *OutpatientDetailDeleteOne) ExecX(ctx context.Context) {
	if err := oddo.Exec(ctx); err != nil {
		panic(err)
	}
}
