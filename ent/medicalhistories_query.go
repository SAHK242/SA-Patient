// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"patient/ent/medicalhistories"
	"patient/ent/medicalprescription"
	"patient/ent/medicalsurgery"
	"patient/ent/medicaltreatment"
	"patient/ent/patient"
	"patient/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MedicalHistoriesQuery is the builder for querying MedicalHistories entities.
type MedicalHistoriesQuery struct {
	config
	ctx                     *QueryContext
	order                   []medicalhistories.OrderOption
	inters                  []Interceptor
	predicates              []predicate.MedicalHistories
	withPatient             *PatientQuery
	withMedicalPrescription *MedicalPrescriptionQuery
	withMedicalTreatment    *MedicalTreatmentQuery
	withMedicalSurgery      *MedicalSurgeryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MedicalHistoriesQuery builder.
func (mhq *MedicalHistoriesQuery) Where(ps ...predicate.MedicalHistories) *MedicalHistoriesQuery {
	mhq.predicates = append(mhq.predicates, ps...)
	return mhq
}

// Limit the number of records to be returned by this query.
func (mhq *MedicalHistoriesQuery) Limit(limit int) *MedicalHistoriesQuery {
	mhq.ctx.Limit = &limit
	return mhq
}

// Offset to start from.
func (mhq *MedicalHistoriesQuery) Offset(offset int) *MedicalHistoriesQuery {
	mhq.ctx.Offset = &offset
	return mhq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mhq *MedicalHistoriesQuery) Unique(unique bool) *MedicalHistoriesQuery {
	mhq.ctx.Unique = &unique
	return mhq
}

// Order specifies how the records should be ordered.
func (mhq *MedicalHistoriesQuery) Order(o ...medicalhistories.OrderOption) *MedicalHistoriesQuery {
	mhq.order = append(mhq.order, o...)
	return mhq
}

// QueryPatient chains the current query on the "patient" edge.
func (mhq *MedicalHistoriesQuery) QueryPatient() *PatientQuery {
	query := (&PatientClient{config: mhq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mhq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mhq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(medicalhistories.Table, medicalhistories.FieldID, selector),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, medicalhistories.PatientTable, medicalhistories.PatientColumn),
		)
		fromU = sqlgraph.SetNeighbors(mhq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMedicalPrescription chains the current query on the "medical_prescription" edge.
func (mhq *MedicalHistoriesQuery) QueryMedicalPrescription() *MedicalPrescriptionQuery {
	query := (&MedicalPrescriptionClient{config: mhq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mhq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mhq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(medicalhistories.Table, medicalhistories.FieldID, selector),
			sqlgraph.To(medicalprescription.Table, medicalprescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, medicalhistories.MedicalPrescriptionTable, medicalhistories.MedicalPrescriptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(mhq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMedicalTreatment chains the current query on the "medical_treatment" edge.
func (mhq *MedicalHistoriesQuery) QueryMedicalTreatment() *MedicalTreatmentQuery {
	query := (&MedicalTreatmentClient{config: mhq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mhq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mhq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(medicalhistories.Table, medicalhistories.FieldID, selector),
			sqlgraph.To(medicaltreatment.Table, medicaltreatment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, medicalhistories.MedicalTreatmentTable, medicalhistories.MedicalTreatmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(mhq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMedicalSurgery chains the current query on the "medical_surgery" edge.
func (mhq *MedicalHistoriesQuery) QueryMedicalSurgery() *MedicalSurgeryQuery {
	query := (&MedicalSurgeryClient{config: mhq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mhq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mhq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(medicalhistories.Table, medicalhistories.FieldID, selector),
			sqlgraph.To(medicalsurgery.Table, medicalsurgery.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, medicalhistories.MedicalSurgeryTable, medicalhistories.MedicalSurgeryColumn),
		)
		fromU = sqlgraph.SetNeighbors(mhq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MedicalHistories entity from the query.
// Returns a *NotFoundError when no MedicalHistories was found.
func (mhq *MedicalHistoriesQuery) First(ctx context.Context) (*MedicalHistories, error) {
	nodes, err := mhq.Limit(1).All(setContextOp(ctx, mhq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{medicalhistories.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mhq *MedicalHistoriesQuery) FirstX(ctx context.Context) *MedicalHistories {
	node, err := mhq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MedicalHistories ID from the query.
// Returns a *NotFoundError when no MedicalHistories ID was found.
func (mhq *MedicalHistoriesQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = mhq.Limit(1).IDs(setContextOp(ctx, mhq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{medicalhistories.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mhq *MedicalHistoriesQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := mhq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MedicalHistories entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MedicalHistories entity is found.
// Returns a *NotFoundError when no MedicalHistories entities are found.
func (mhq *MedicalHistoriesQuery) Only(ctx context.Context) (*MedicalHistories, error) {
	nodes, err := mhq.Limit(2).All(setContextOp(ctx, mhq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{medicalhistories.Label}
	default:
		return nil, &NotSingularError{medicalhistories.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mhq *MedicalHistoriesQuery) OnlyX(ctx context.Context) *MedicalHistories {
	node, err := mhq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MedicalHistories ID in the query.
// Returns a *NotSingularError when more than one MedicalHistories ID is found.
// Returns a *NotFoundError when no entities are found.
func (mhq *MedicalHistoriesQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = mhq.Limit(2).IDs(setContextOp(ctx, mhq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{medicalhistories.Label}
	default:
		err = &NotSingularError{medicalhistories.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mhq *MedicalHistoriesQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := mhq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MedicalHistoriesSlice.
func (mhq *MedicalHistoriesQuery) All(ctx context.Context) ([]*MedicalHistories, error) {
	ctx = setContextOp(ctx, mhq.ctx, ent.OpQueryAll)
	if err := mhq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MedicalHistories, *MedicalHistoriesQuery]()
	return withInterceptors[[]*MedicalHistories](ctx, mhq, qr, mhq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mhq *MedicalHistoriesQuery) AllX(ctx context.Context) []*MedicalHistories {
	nodes, err := mhq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MedicalHistories IDs.
func (mhq *MedicalHistoriesQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if mhq.ctx.Unique == nil && mhq.path != nil {
		mhq.Unique(true)
	}
	ctx = setContextOp(ctx, mhq.ctx, ent.OpQueryIDs)
	if err = mhq.Select(medicalhistories.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mhq *MedicalHistoriesQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := mhq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mhq *MedicalHistoriesQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mhq.ctx, ent.OpQueryCount)
	if err := mhq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mhq, querierCount[*MedicalHistoriesQuery](), mhq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mhq *MedicalHistoriesQuery) CountX(ctx context.Context) int {
	count, err := mhq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mhq *MedicalHistoriesQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mhq.ctx, ent.OpQueryExist)
	switch _, err := mhq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mhq *MedicalHistoriesQuery) ExistX(ctx context.Context) bool {
	exist, err := mhq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MedicalHistoriesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mhq *MedicalHistoriesQuery) Clone() *MedicalHistoriesQuery {
	if mhq == nil {
		return nil
	}
	return &MedicalHistoriesQuery{
		config:                  mhq.config,
		ctx:                     mhq.ctx.Clone(),
		order:                   append([]medicalhistories.OrderOption{}, mhq.order...),
		inters:                  append([]Interceptor{}, mhq.inters...),
		predicates:              append([]predicate.MedicalHistories{}, mhq.predicates...),
		withPatient:             mhq.withPatient.Clone(),
		withMedicalPrescription: mhq.withMedicalPrescription.Clone(),
		withMedicalTreatment:    mhq.withMedicalTreatment.Clone(),
		withMedicalSurgery:      mhq.withMedicalSurgery.Clone(),
		// clone intermediate query.
		sql:  mhq.sql.Clone(),
		path: mhq.path,
	}
}

// WithPatient tells the query-builder to eager-load the nodes that are connected to
// the "patient" edge. The optional arguments are used to configure the query builder of the edge.
func (mhq *MedicalHistoriesQuery) WithPatient(opts ...func(*PatientQuery)) *MedicalHistoriesQuery {
	query := (&PatientClient{config: mhq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mhq.withPatient = query
	return mhq
}

// WithMedicalPrescription tells the query-builder to eager-load the nodes that are connected to
// the "medical_prescription" edge. The optional arguments are used to configure the query builder of the edge.
func (mhq *MedicalHistoriesQuery) WithMedicalPrescription(opts ...func(*MedicalPrescriptionQuery)) *MedicalHistoriesQuery {
	query := (&MedicalPrescriptionClient{config: mhq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mhq.withMedicalPrescription = query
	return mhq
}

// WithMedicalTreatment tells the query-builder to eager-load the nodes that are connected to
// the "medical_treatment" edge. The optional arguments are used to configure the query builder of the edge.
func (mhq *MedicalHistoriesQuery) WithMedicalTreatment(opts ...func(*MedicalTreatmentQuery)) *MedicalHistoriesQuery {
	query := (&MedicalTreatmentClient{config: mhq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mhq.withMedicalTreatment = query
	return mhq
}

// WithMedicalSurgery tells the query-builder to eager-load the nodes that are connected to
// the "medical_surgery" edge. The optional arguments are used to configure the query builder of the edge.
func (mhq *MedicalHistoriesQuery) WithMedicalSurgery(opts ...func(*MedicalSurgeryQuery)) *MedicalHistoriesQuery {
	query := (&MedicalSurgeryClient{config: mhq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mhq.withMedicalSurgery = query
	return mhq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PatientID uuid.UUID `json:"patient_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MedicalHistories.Query().
//		GroupBy(medicalhistories.FieldPatientID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mhq *MedicalHistoriesQuery) GroupBy(field string, fields ...string) *MedicalHistoriesGroupBy {
	mhq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MedicalHistoriesGroupBy{build: mhq}
	grbuild.flds = &mhq.ctx.Fields
	grbuild.label = medicalhistories.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PatientID uuid.UUID `json:"patient_id,omitempty"`
//	}
//
//	client.MedicalHistories.Query().
//		Select(medicalhistories.FieldPatientID).
//		Scan(ctx, &v)
func (mhq *MedicalHistoriesQuery) Select(fields ...string) *MedicalHistoriesSelect {
	mhq.ctx.Fields = append(mhq.ctx.Fields, fields...)
	sbuild := &MedicalHistoriesSelect{MedicalHistoriesQuery: mhq}
	sbuild.label = medicalhistories.Label
	sbuild.flds, sbuild.scan = &mhq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MedicalHistoriesSelect configured with the given aggregations.
func (mhq *MedicalHistoriesQuery) Aggregate(fns ...AggregateFunc) *MedicalHistoriesSelect {
	return mhq.Select().Aggregate(fns...)
}

func (mhq *MedicalHistoriesQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mhq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mhq); err != nil {
				return err
			}
		}
	}
	for _, f := range mhq.ctx.Fields {
		if !medicalhistories.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mhq.path != nil {
		prev, err := mhq.path(ctx)
		if err != nil {
			return err
		}
		mhq.sql = prev
	}
	return nil
}

func (mhq *MedicalHistoriesQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MedicalHistories, error) {
	var (
		nodes       = []*MedicalHistories{}
		_spec       = mhq.querySpec()
		loadedTypes = [4]bool{
			mhq.withPatient != nil,
			mhq.withMedicalPrescription != nil,
			mhq.withMedicalTreatment != nil,
			mhq.withMedicalSurgery != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MedicalHistories).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MedicalHistories{config: mhq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mhq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mhq.withPatient; query != nil {
		if err := mhq.loadPatient(ctx, query, nodes, nil,
			func(n *MedicalHistories, e *Patient) { n.Edges.Patient = e }); err != nil {
			return nil, err
		}
	}
	if query := mhq.withMedicalPrescription; query != nil {
		if err := mhq.loadMedicalPrescription(ctx, query, nodes,
			func(n *MedicalHistories) { n.Edges.MedicalPrescription = []*MedicalPrescription{} },
			func(n *MedicalHistories, e *MedicalPrescription) {
				n.Edges.MedicalPrescription = append(n.Edges.MedicalPrescription, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := mhq.withMedicalTreatment; query != nil {
		if err := mhq.loadMedicalTreatment(ctx, query, nodes,
			func(n *MedicalHistories) { n.Edges.MedicalTreatment = []*MedicalTreatment{} },
			func(n *MedicalHistories, e *MedicalTreatment) {
				n.Edges.MedicalTreatment = append(n.Edges.MedicalTreatment, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := mhq.withMedicalSurgery; query != nil {
		if err := mhq.loadMedicalSurgery(ctx, query, nodes,
			func(n *MedicalHistories) { n.Edges.MedicalSurgery = []*MedicalSurgery{} },
			func(n *MedicalHistories, e *MedicalSurgery) {
				n.Edges.MedicalSurgery = append(n.Edges.MedicalSurgery, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mhq *MedicalHistoriesQuery) loadPatient(ctx context.Context, query *PatientQuery, nodes []*MedicalHistories, init func(*MedicalHistories), assign func(*MedicalHistories, *Patient)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*MedicalHistories)
	for i := range nodes {
		fk := nodes[i].PatientID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(patient.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "patient_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mhq *MedicalHistoriesQuery) loadMedicalPrescription(ctx context.Context, query *MedicalPrescriptionQuery, nodes []*MedicalHistories, init func(*MedicalHistories), assign func(*MedicalHistories, *MedicalPrescription)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*MedicalHistories)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(medicalprescription.FieldMedicalHistoryID)
	}
	query.Where(predicate.MedicalPrescription(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(medicalhistories.MedicalPrescriptionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.MedicalHistoryID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "medical_history_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (mhq *MedicalHistoriesQuery) loadMedicalTreatment(ctx context.Context, query *MedicalTreatmentQuery, nodes []*MedicalHistories, init func(*MedicalHistories), assign func(*MedicalHistories, *MedicalTreatment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*MedicalHistories)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(medicaltreatment.FieldMedicalHistoryID)
	}
	query.Where(predicate.MedicalTreatment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(medicalhistories.MedicalTreatmentColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.MedicalHistoryID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "medical_history_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (mhq *MedicalHistoriesQuery) loadMedicalSurgery(ctx context.Context, query *MedicalSurgeryQuery, nodes []*MedicalHistories, init func(*MedicalHistories), assign func(*MedicalHistories, *MedicalSurgery)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*MedicalHistories)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(medicalsurgery.FieldMedicalHistoryID)
	}
	query.Where(predicate.MedicalSurgery(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(medicalhistories.MedicalSurgeryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.MedicalHistoryID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "medical_history_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (mhq *MedicalHistoriesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mhq.querySpec()
	_spec.Node.Columns = mhq.ctx.Fields
	if len(mhq.ctx.Fields) > 0 {
		_spec.Unique = mhq.ctx.Unique != nil && *mhq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mhq.driver, _spec)
}

func (mhq *MedicalHistoriesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(medicalhistories.Table, medicalhistories.Columns, sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID))
	_spec.From = mhq.sql
	if unique := mhq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mhq.path != nil {
		_spec.Unique = true
	}
	if fields := mhq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, medicalhistories.FieldID)
		for i := range fields {
			if fields[i] != medicalhistories.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if mhq.withPatient != nil {
			_spec.Node.AddColumnOnce(medicalhistories.FieldPatientID)
		}
	}
	if ps := mhq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mhq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mhq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mhq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mhq *MedicalHistoriesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mhq.driver.Dialect())
	t1 := builder.Table(medicalhistories.Table)
	columns := mhq.ctx.Fields
	if len(columns) == 0 {
		columns = medicalhistories.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mhq.sql != nil {
		selector = mhq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mhq.ctx.Unique != nil && *mhq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mhq.predicates {
		p(selector)
	}
	for _, p := range mhq.order {
		p(selector)
	}
	if offset := mhq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mhq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MedicalHistoriesGroupBy is the group-by builder for MedicalHistories entities.
type MedicalHistoriesGroupBy struct {
	selector
	build *MedicalHistoriesQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mhgb *MedicalHistoriesGroupBy) Aggregate(fns ...AggregateFunc) *MedicalHistoriesGroupBy {
	mhgb.fns = append(mhgb.fns, fns...)
	return mhgb
}

// Scan applies the selector query and scans the result into the given value.
func (mhgb *MedicalHistoriesGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mhgb.build.ctx, ent.OpQueryGroupBy)
	if err := mhgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MedicalHistoriesQuery, *MedicalHistoriesGroupBy](ctx, mhgb.build, mhgb, mhgb.build.inters, v)
}

func (mhgb *MedicalHistoriesGroupBy) sqlScan(ctx context.Context, root *MedicalHistoriesQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mhgb.fns))
	for _, fn := range mhgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mhgb.flds)+len(mhgb.fns))
		for _, f := range *mhgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mhgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mhgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MedicalHistoriesSelect is the builder for selecting fields of MedicalHistories entities.
type MedicalHistoriesSelect struct {
	*MedicalHistoriesQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mhs *MedicalHistoriesSelect) Aggregate(fns ...AggregateFunc) *MedicalHistoriesSelect {
	mhs.fns = append(mhs.fns, fns...)
	return mhs
}

// Scan applies the selector query and scans the result into the given value.
func (mhs *MedicalHistoriesSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mhs.ctx, ent.OpQuerySelect)
	if err := mhs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MedicalHistoriesQuery, *MedicalHistoriesSelect](ctx, mhs.MedicalHistoriesQuery, mhs, mhs.inters, v)
}

func (mhs *MedicalHistoriesSelect) sqlScan(ctx context.Context, root *MedicalHistoriesQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mhs.fns))
	for _, fn := range mhs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mhs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mhs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
