// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"patient/ent/outpatientdetail"
	"patient/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OutpatientDetailUpdate is the builder for updating OutpatientDetail entities.
type OutpatientDetailUpdate struct {
	config
	hooks    []Hook
	mutation *OutpatientDetailMutation
}

// Where appends a list predicates to the OutpatientDetailUpdate builder.
func (odu *OutpatientDetailUpdate) Where(ps ...predicate.OutpatientDetail) *OutpatientDetailUpdate {
	odu.mutation.Where(ps...)
	return odu
}

// Mutation returns the OutpatientDetailMutation object of the builder.
func (odu *OutpatientDetailUpdate) Mutation() *OutpatientDetailMutation {
	return odu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (odu *OutpatientDetailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, odu.sqlSave, odu.mutation, odu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (odu *OutpatientDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := odu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (odu *OutpatientDetailUpdate) Exec(ctx context.Context) error {
	_, err := odu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odu *OutpatientDetailUpdate) ExecX(ctx context.Context) {
	if err := odu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (odu *OutpatientDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(outpatientdetail.Table, outpatientdetail.Columns, sqlgraph.NewFieldSpec(outpatientdetail.FieldID, field.TypeInt))
	if ps := odu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, odu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outpatientdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	odu.mutation.done = true
	return n, nil
}

// OutpatientDetailUpdateOne is the builder for updating a single OutpatientDetail entity.
type OutpatientDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OutpatientDetailMutation
}

// Mutation returns the OutpatientDetailMutation object of the builder.
func (oduo *OutpatientDetailUpdateOne) Mutation() *OutpatientDetailMutation {
	return oduo.mutation
}

// Where appends a list predicates to the OutpatientDetailUpdate builder.
func (oduo *OutpatientDetailUpdateOne) Where(ps ...predicate.OutpatientDetail) *OutpatientDetailUpdateOne {
	oduo.mutation.Where(ps...)
	return oduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oduo *OutpatientDetailUpdateOne) Select(field string, fields ...string) *OutpatientDetailUpdateOne {
	oduo.fields = append([]string{field}, fields...)
	return oduo
}

// Save executes the query and returns the updated OutpatientDetail entity.
func (oduo *OutpatientDetailUpdateOne) Save(ctx context.Context) (*OutpatientDetail, error) {
	return withHooks(ctx, oduo.sqlSave, oduo.mutation, oduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oduo *OutpatientDetailUpdateOne) SaveX(ctx context.Context) *OutpatientDetail {
	node, err := oduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oduo *OutpatientDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := oduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oduo *OutpatientDetailUpdateOne) ExecX(ctx context.Context) {
	if err := oduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oduo *OutpatientDetailUpdateOne) sqlSave(ctx context.Context) (_node *OutpatientDetail, err error) {
	_spec := sqlgraph.NewUpdateSpec(outpatientdetail.Table, outpatientdetail.Columns, sqlgraph.NewFieldSpec(outpatientdetail.FieldID, field.TypeInt))
	id, ok := oduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OutpatientDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, outpatientdetail.FieldID)
		for _, f := range fields {
			if !outpatientdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != outpatientdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &OutpatientDetail{config: oduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outpatientdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oduo.mutation.done = true
	return _node, nil
}
