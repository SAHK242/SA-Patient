// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"patient/ent/medicalhistories"
	"patient/ent/patient"
	"patient/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PatientUpdate is the builder for updating Patient entities.
type PatientUpdate struct {
	config
	hooks    []Hook
	mutation *PatientMutation
}

// Where appends a list predicates to the PatientUpdate builder.
func (pu *PatientUpdate) Where(ps ...predicate.Patient) *PatientUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetPhone sets the "phone" field.
func (pu *PatientUpdate) SetPhone(s string) *PatientUpdate {
	pu.mutation.SetPhone(s)
	return pu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pu *PatientUpdate) SetNillablePhone(s *string) *PatientUpdate {
	if s != nil {
		pu.SetPhone(*s)
	}
	return pu
}

// SetFirstName sets the "first_name" field.
func (pu *PatientUpdate) SetFirstName(s string) *PatientUpdate {
	pu.mutation.SetFirstName(s)
	return pu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableFirstName(s *string) *PatientUpdate {
	if s != nil {
		pu.SetFirstName(*s)
	}
	return pu
}

// SetLastName sets the "last_name" field.
func (pu *PatientUpdate) SetLastName(s string) *PatientUpdate {
	pu.mutation.SetLastName(s)
	return pu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableLastName(s *string) *PatientUpdate {
	if s != nil {
		pu.SetLastName(*s)
	}
	return pu
}

// SetGender sets the "gender" field.
func (pu *PatientUpdate) SetGender(i int32) *PatientUpdate {
	pu.mutation.ResetGender()
	pu.mutation.SetGender(i)
	return pu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableGender(i *int32) *PatientUpdate {
	if i != nil {
		pu.SetGender(*i)
	}
	return pu
}

// AddGender adds i to the "gender" field.
func (pu *PatientUpdate) AddGender(i int32) *PatientUpdate {
	pu.mutation.AddGender(i)
	return pu
}

// SetAddress sets the "address" field.
func (pu *PatientUpdate) SetAddress(s string) *PatientUpdate {
	pu.mutation.SetAddress(s)
	return pu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableAddress(s *string) *PatientUpdate {
	if s != nil {
		pu.SetAddress(*s)
	}
	return pu
}

// SetDateOfBirth sets the "date_of_birth" field.
func (pu *PatientUpdate) SetDateOfBirth(t time.Time) *PatientUpdate {
	pu.mutation.SetDateOfBirth(t)
	return pu
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableDateOfBirth(t *time.Time) *PatientUpdate {
	if t != nil {
		pu.SetDateOfBirth(*t)
	}
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PatientUpdate) SetCreatedAt(t time.Time) *PatientUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableCreatedAt(t *time.Time) *PatientUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PatientUpdate) SetUpdatedAt(t time.Time) *PatientUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetCreatedBy sets the "created_by" field.
func (pu *PatientUpdate) SetCreatedBy(u uuid.UUID) *PatientUpdate {
	pu.mutation.SetCreatedBy(u)
	return pu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableCreatedBy(u *uuid.UUID) *PatientUpdate {
	if u != nil {
		pu.SetCreatedBy(*u)
	}
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *PatientUpdate) SetUpdatedBy(u uuid.UUID) *PatientUpdate {
	pu.mutation.SetUpdatedBy(u)
	return pu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pu *PatientUpdate) SetNillableUpdatedBy(u *uuid.UUID) *PatientUpdate {
	if u != nil {
		pu.SetUpdatedBy(*u)
	}
	return pu
}

// AddMedicalHistoryIDs adds the "medical_history" edge to the MedicalHistories entity by IDs.
func (pu *PatientUpdate) AddMedicalHistoryIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.AddMedicalHistoryIDs(ids...)
	return pu
}

// AddMedicalHistory adds the "medical_history" edges to the MedicalHistories entity.
func (pu *PatientUpdate) AddMedicalHistory(m ...*MedicalHistories) *PatientUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddMedicalHistoryIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (pu *PatientUpdate) Mutation() *PatientMutation {
	return pu.mutation
}

// ClearMedicalHistory clears all "medical_history" edges to the MedicalHistories entity.
func (pu *PatientUpdate) ClearMedicalHistory() *PatientUpdate {
	pu.mutation.ClearMedicalHistory()
	return pu
}

// RemoveMedicalHistoryIDs removes the "medical_history" edge to MedicalHistories entities by IDs.
func (pu *PatientUpdate) RemoveMedicalHistoryIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.RemoveMedicalHistoryIDs(ids...)
	return pu
}

// RemoveMedicalHistory removes "medical_history" edges to MedicalHistories entities.
func (pu *PatientUpdate) RemoveMedicalHistory(m ...*MedicalHistories) *PatientUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveMedicalHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PatientUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PatientUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PatientUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PatientUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PatientUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := patient.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PatientUpdate) check() error {
	if v, ok := pu.mutation.Gender(); ok {
		if err := patient.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Patient.gender": %w`, err)}
		}
	}
	return nil
}

func (pu *PatientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(patient.Table, patient.Columns, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Phone(); ok {
		_spec.SetField(patient.FieldPhone, field.TypeString, value)
	}
	if value, ok := pu.mutation.FirstName(); ok {
		_spec.SetField(patient.FieldFirstName, field.TypeString, value)
	}
	if value, ok := pu.mutation.LastName(); ok {
		_spec.SetField(patient.FieldLastName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Gender(); ok {
		_spec.SetField(patient.FieldGender, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedGender(); ok {
		_spec.AddField(patient.FieldGender, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.Address(); ok {
		_spec.SetField(patient.FieldAddress, field.TypeString, value)
	}
	if value, ok := pu.mutation.DateOfBirth(); ok {
		_spec.SetField(patient.FieldDateOfBirth, field.TypeTime, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(patient.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(patient.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.CreatedBy(); ok {
		_spec.SetField(patient.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.SetField(patient.FieldUpdatedBy, field.TypeUUID, value)
	}
	if pu.mutation.MedicalHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.MedicalHistoryTable,
			Columns: []string{patient.MedicalHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMedicalHistoryIDs(); len(nodes) > 0 && !pu.mutation.MedicalHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.MedicalHistoryTable,
			Columns: []string{patient.MedicalHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MedicalHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.MedicalHistoryTable,
			Columns: []string{patient.MedicalHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PatientUpdateOne is the builder for updating a single Patient entity.
type PatientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PatientMutation
}

// SetPhone sets the "phone" field.
func (puo *PatientUpdateOne) SetPhone(s string) *PatientUpdateOne {
	puo.mutation.SetPhone(s)
	return puo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePhone(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetPhone(*s)
	}
	return puo
}

// SetFirstName sets the "first_name" field.
func (puo *PatientUpdateOne) SetFirstName(s string) *PatientUpdateOne {
	puo.mutation.SetFirstName(s)
	return puo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableFirstName(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetFirstName(*s)
	}
	return puo
}

// SetLastName sets the "last_name" field.
func (puo *PatientUpdateOne) SetLastName(s string) *PatientUpdateOne {
	puo.mutation.SetLastName(s)
	return puo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableLastName(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetLastName(*s)
	}
	return puo
}

// SetGender sets the "gender" field.
func (puo *PatientUpdateOne) SetGender(i int32) *PatientUpdateOne {
	puo.mutation.ResetGender()
	puo.mutation.SetGender(i)
	return puo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableGender(i *int32) *PatientUpdateOne {
	if i != nil {
		puo.SetGender(*i)
	}
	return puo
}

// AddGender adds i to the "gender" field.
func (puo *PatientUpdateOne) AddGender(i int32) *PatientUpdateOne {
	puo.mutation.AddGender(i)
	return puo
}

// SetAddress sets the "address" field.
func (puo *PatientUpdateOne) SetAddress(s string) *PatientUpdateOne {
	puo.mutation.SetAddress(s)
	return puo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableAddress(s *string) *PatientUpdateOne {
	if s != nil {
		puo.SetAddress(*s)
	}
	return puo
}

// SetDateOfBirth sets the "date_of_birth" field.
func (puo *PatientUpdateOne) SetDateOfBirth(t time.Time) *PatientUpdateOne {
	puo.mutation.SetDateOfBirth(t)
	return puo
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableDateOfBirth(t *time.Time) *PatientUpdateOne {
	if t != nil {
		puo.SetDateOfBirth(*t)
	}
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PatientUpdateOne) SetCreatedAt(t time.Time) *PatientUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableCreatedAt(t *time.Time) *PatientUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PatientUpdateOne) SetUpdatedAt(t time.Time) *PatientUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetCreatedBy sets the "created_by" field.
func (puo *PatientUpdateOne) SetCreatedBy(u uuid.UUID) *PatientUpdateOne {
	puo.mutation.SetCreatedBy(u)
	return puo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *PatientUpdateOne {
	if u != nil {
		puo.SetCreatedBy(*u)
	}
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *PatientUpdateOne) SetUpdatedBy(u uuid.UUID) *PatientUpdateOne {
	puo.mutation.SetUpdatedBy(u)
	return puo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableUpdatedBy(u *uuid.UUID) *PatientUpdateOne {
	if u != nil {
		puo.SetUpdatedBy(*u)
	}
	return puo
}

// AddMedicalHistoryIDs adds the "medical_history" edge to the MedicalHistories entity by IDs.
func (puo *PatientUpdateOne) AddMedicalHistoryIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.AddMedicalHistoryIDs(ids...)
	return puo
}

// AddMedicalHistory adds the "medical_history" edges to the MedicalHistories entity.
func (puo *PatientUpdateOne) AddMedicalHistory(m ...*MedicalHistories) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddMedicalHistoryIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (puo *PatientUpdateOne) Mutation() *PatientMutation {
	return puo.mutation
}

// ClearMedicalHistory clears all "medical_history" edges to the MedicalHistories entity.
func (puo *PatientUpdateOne) ClearMedicalHistory() *PatientUpdateOne {
	puo.mutation.ClearMedicalHistory()
	return puo
}

// RemoveMedicalHistoryIDs removes the "medical_history" edge to MedicalHistories entities by IDs.
func (puo *PatientUpdateOne) RemoveMedicalHistoryIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.RemoveMedicalHistoryIDs(ids...)
	return puo
}

// RemoveMedicalHistory removes "medical_history" edges to MedicalHistories entities.
func (puo *PatientUpdateOne) RemoveMedicalHistory(m ...*MedicalHistories) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveMedicalHistoryIDs(ids...)
}

// Where appends a list predicates to the PatientUpdate builder.
func (puo *PatientUpdateOne) Where(ps ...predicate.Patient) *PatientUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PatientUpdateOne) Select(field string, fields ...string) *PatientUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Patient entity.
func (puo *PatientUpdateOne) Save(ctx context.Context) (*Patient, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PatientUpdateOne) SaveX(ctx context.Context) *Patient {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PatientUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PatientUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PatientUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := patient.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PatientUpdateOne) check() error {
	if v, ok := puo.mutation.Gender(); ok {
		if err := patient.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Patient.gender": %w`, err)}
		}
	}
	return nil
}

func (puo *PatientUpdateOne) sqlSave(ctx context.Context) (_node *Patient, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(patient.Table, patient.Columns, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Patient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, patient.FieldID)
		for _, f := range fields {
			if !patient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != patient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Phone(); ok {
		_spec.SetField(patient.FieldPhone, field.TypeString, value)
	}
	if value, ok := puo.mutation.FirstName(); ok {
		_spec.SetField(patient.FieldFirstName, field.TypeString, value)
	}
	if value, ok := puo.mutation.LastName(); ok {
		_spec.SetField(patient.FieldLastName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Gender(); ok {
		_spec.SetField(patient.FieldGender, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedGender(); ok {
		_spec.AddField(patient.FieldGender, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.Address(); ok {
		_spec.SetField(patient.FieldAddress, field.TypeString, value)
	}
	if value, ok := puo.mutation.DateOfBirth(); ok {
		_spec.SetField(patient.FieldDateOfBirth, field.TypeTime, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(patient.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(patient.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.CreatedBy(); ok {
		_spec.SetField(patient.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.SetField(patient.FieldUpdatedBy, field.TypeUUID, value)
	}
	if puo.mutation.MedicalHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.MedicalHistoryTable,
			Columns: []string{patient.MedicalHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMedicalHistoryIDs(); len(nodes) > 0 && !puo.mutation.MedicalHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.MedicalHistoryTable,
			Columns: []string{patient.MedicalHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MedicalHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.MedicalHistoryTable,
			Columns: []string{patient.MedicalHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Patient{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
