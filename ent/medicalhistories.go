// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"patient/ent/medicalhistories"
	"patient/ent/patient"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// MedicalHistories is the model entity for the MedicalHistories schema.
type MedicalHistories struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PatientID holds the value of the "patient_id" field.
	PatientID uuid.UUID `json:"patient_id,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// Diagnosis holds the value of the "diagnosis" field.
	Diagnosis string `json:"diagnosis,omitempty"`
	// HasTreatment holds the value of the "has_treatment" field.
	HasTreatment bool `json:"has_treatment,omitempty"`
	// HasSurgery holds the value of the "has_surgery" field.
	HasSurgery bool `json:"has_surgery,omitempty"`
	// HasPrescription holds the value of the "has_prescription" field.
	HasPrescription bool `json:"has_prescription,omitempty"`
	// DoctorNotes holds the value of the "doctor_notes" field.
	DoctorNotes string `json:"doctor_notes,omitempty"`
	// MedicalEndDate holds the value of the "medical_end_date" field.
	MedicalEndDate time.Time `json:"medical_end_date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy uuid.UUID `json:"updated_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MedicalHistoriesQuery when eager-loading is set.
	Edges        MedicalHistoriesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MedicalHistoriesEdges holds the relations/edges for other nodes in the graph.
type MedicalHistoriesEdges struct {
	// Patient holds the value of the patient edge.
	Patient *Patient `json:"patient,omitempty"`
	// MedicalPrescription holds the value of the medical_prescription edge.
	MedicalPrescription []*MedicalPrescription `json:"medical_prescription,omitempty"`
	// MedicalTreatment holds the value of the medical_treatment edge.
	MedicalTreatment []*MedicalTreatment `json:"medical_treatment,omitempty"`
	// MedicalSurgery holds the value of the medical_surgery edge.
	MedicalSurgery []*MedicalSurgery `json:"medical_surgery,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MedicalHistoriesEdges) PatientOrErr() (*Patient, error) {
	if e.Patient != nil {
		return e.Patient, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: patient.Label}
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// MedicalPrescriptionOrErr returns the MedicalPrescription value or an error if the edge
// was not loaded in eager-loading.
func (e MedicalHistoriesEdges) MedicalPrescriptionOrErr() ([]*MedicalPrescription, error) {
	if e.loadedTypes[1] {
		return e.MedicalPrescription, nil
	}
	return nil, &NotLoadedError{edge: "medical_prescription"}
}

// MedicalTreatmentOrErr returns the MedicalTreatment value or an error if the edge
// was not loaded in eager-loading.
func (e MedicalHistoriesEdges) MedicalTreatmentOrErr() ([]*MedicalTreatment, error) {
	if e.loadedTypes[2] {
		return e.MedicalTreatment, nil
	}
	return nil, &NotLoadedError{edge: "medical_treatment"}
}

// MedicalSurgeryOrErr returns the MedicalSurgery value or an error if the edge
// was not loaded in eager-loading.
func (e MedicalHistoriesEdges) MedicalSurgeryOrErr() ([]*MedicalSurgery, error) {
	if e.loadedTypes[3] {
		return e.MedicalSurgery, nil
	}
	return nil, &NotLoadedError{edge: "medical_surgery"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MedicalHistories) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case medicalhistories.FieldHasTreatment, medicalhistories.FieldHasSurgery, medicalhistories.FieldHasPrescription:
			values[i] = new(sql.NullBool)
		case medicalhistories.FieldReason, medicalhistories.FieldDiagnosis, medicalhistories.FieldDoctorNotes:
			values[i] = new(sql.NullString)
		case medicalhistories.FieldMedicalEndDate, medicalhistories.FieldCreatedAt, medicalhistories.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case medicalhistories.FieldID, medicalhistories.FieldPatientID, medicalhistories.FieldCreatedBy, medicalhistories.FieldUpdatedBy:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MedicalHistories fields.
func (mh *MedicalHistories) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case medicalhistories.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mh.ID = *value
			}
		case medicalhistories.FieldPatientID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field patient_id", values[i])
			} else if value != nil {
				mh.PatientID = *value
			}
		case medicalhistories.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				mh.Reason = value.String
			}
		case medicalhistories.FieldDiagnosis:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field diagnosis", values[i])
			} else if value.Valid {
				mh.Diagnosis = value.String
			}
		case medicalhistories.FieldHasTreatment:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_treatment", values[i])
			} else if value.Valid {
				mh.HasTreatment = value.Bool
			}
		case medicalhistories.FieldHasSurgery:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_surgery", values[i])
			} else if value.Valid {
				mh.HasSurgery = value.Bool
			}
		case medicalhistories.FieldHasPrescription:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_prescription", values[i])
			} else if value.Valid {
				mh.HasPrescription = value.Bool
			}
		case medicalhistories.FieldDoctorNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field doctor_notes", values[i])
			} else if value.Valid {
				mh.DoctorNotes = value.String
			}
		case medicalhistories.FieldMedicalEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field medical_end_date", values[i])
			} else if value.Valid {
				mh.MedicalEndDate = value.Time
			}
		case medicalhistories.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mh.CreatedAt = value.Time
			}
		case medicalhistories.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mh.UpdatedAt = value.Time
			}
		case medicalhistories.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				mh.CreatedBy = *value
			}
		case medicalhistories.FieldUpdatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value != nil {
				mh.UpdatedBy = *value
			}
		default:
			mh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MedicalHistories.
// This includes values selected through modifiers, order, etc.
func (mh *MedicalHistories) Value(name string) (ent.Value, error) {
	return mh.selectValues.Get(name)
}

// QueryPatient queries the "patient" edge of the MedicalHistories entity.
func (mh *MedicalHistories) QueryPatient() *PatientQuery {
	return NewMedicalHistoriesClient(mh.config).QueryPatient(mh)
}

// QueryMedicalPrescription queries the "medical_prescription" edge of the MedicalHistories entity.
func (mh *MedicalHistories) QueryMedicalPrescription() *MedicalPrescriptionQuery {
	return NewMedicalHistoriesClient(mh.config).QueryMedicalPrescription(mh)
}

// QueryMedicalTreatment queries the "medical_treatment" edge of the MedicalHistories entity.
func (mh *MedicalHistories) QueryMedicalTreatment() *MedicalTreatmentQuery {
	return NewMedicalHistoriesClient(mh.config).QueryMedicalTreatment(mh)
}

// QueryMedicalSurgery queries the "medical_surgery" edge of the MedicalHistories entity.
func (mh *MedicalHistories) QueryMedicalSurgery() *MedicalSurgeryQuery {
	return NewMedicalHistoriesClient(mh.config).QueryMedicalSurgery(mh)
}

// Update returns a builder for updating this MedicalHistories.
// Note that you need to call MedicalHistories.Unwrap() before calling this method if this MedicalHistories
// was returned from a transaction, and the transaction was committed or rolled back.
func (mh *MedicalHistories) Update() *MedicalHistoriesUpdateOne {
	return NewMedicalHistoriesClient(mh.config).UpdateOne(mh)
}

// Unwrap unwraps the MedicalHistories entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mh *MedicalHistories) Unwrap() *MedicalHistories {
	_tx, ok := mh.config.driver.(*txDriver)
	if !ok {
		panic("ent: MedicalHistories is not a transactional entity")
	}
	mh.config.driver = _tx.drv
	return mh
}

// String implements the fmt.Stringer.
func (mh *MedicalHistories) String() string {
	var builder strings.Builder
	builder.WriteString("MedicalHistories(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mh.ID))
	builder.WriteString("patient_id=")
	builder.WriteString(fmt.Sprintf("%v", mh.PatientID))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(mh.Reason)
	builder.WriteString(", ")
	builder.WriteString("diagnosis=")
	builder.WriteString(mh.Diagnosis)
	builder.WriteString(", ")
	builder.WriteString("has_treatment=")
	builder.WriteString(fmt.Sprintf("%v", mh.HasTreatment))
	builder.WriteString(", ")
	builder.WriteString("has_surgery=")
	builder.WriteString(fmt.Sprintf("%v", mh.HasSurgery))
	builder.WriteString(", ")
	builder.WriteString("has_prescription=")
	builder.WriteString(fmt.Sprintf("%v", mh.HasPrescription))
	builder.WriteString(", ")
	builder.WriteString("doctor_notes=")
	builder.WriteString(mh.DoctorNotes)
	builder.WriteString(", ")
	builder.WriteString("medical_end_date=")
	builder.WriteString(mh.MedicalEndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", mh.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", mh.UpdatedBy))
	builder.WriteByte(')')
	return builder.String()
}

// MedicalHistoriesSlice is a parsable slice of MedicalHistories.
type MedicalHistoriesSlice []*MedicalHistories
