// Code generated by ent, DO NOT EDIT.

package medicalprescription

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the medicalprescription type in the database.
	Label = "medical_prescription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMedicalHistoryID holds the string denoting the medical_history_id field in the database.
	FieldMedicalHistoryID = "medical_history_id"
	// FieldPrescriptionDate holds the string denoting the prescription_date field in the database.
	FieldPrescriptionDate = "prescription_date"
	// FieldFee holds the string denoting the fee field in the database.
	FieldFee = "fee"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// EdgeMedicalHistories holds the string denoting the medical_histories edge name in mutations.
	EdgeMedicalHistories = "medical_histories"
	// EdgePrescriptionMedication holds the string denoting the prescription_medication edge name in mutations.
	EdgePrescriptionMedication = "prescription_medication"
	// Table holds the table name of the medicalprescription in the database.
	Table = "medical_prescription"
	// MedicalHistoriesTable is the table that holds the medical_histories relation/edge.
	MedicalHistoriesTable = "medical_prescription"
	// MedicalHistoriesInverseTable is the table name for the MedicalHistories entity.
	// It exists in this package in order to avoid circular dependency with the "medicalhistories" package.
	MedicalHistoriesInverseTable = "medical_histories"
	// MedicalHistoriesColumn is the table column denoting the medical_histories relation/edge.
	MedicalHistoriesColumn = "medical_history_id"
	// PrescriptionMedicationTable is the table that holds the prescription_medication relation/edge.
	PrescriptionMedicationTable = "prescription_medication"
	// PrescriptionMedicationInverseTable is the table name for the PrescriptionMedication entity.
	// It exists in this package in order to avoid circular dependency with the "prescriptionmedication" package.
	PrescriptionMedicationInverseTable = "prescription_medication"
	// PrescriptionMedicationColumn is the table column denoting the prescription_medication relation/edge.
	PrescriptionMedicationColumn = "prescription_id"
)

// Columns holds all SQL columns for medicalprescription fields.
var Columns = []string{
	FieldID,
	FieldMedicalHistoryID,
	FieldPrescriptionDate,
	FieldFee,
	FieldCreatedAt,
	FieldCreatedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPrescriptionDate holds the default value on creation for the "prescription_date" field.
	DefaultPrescriptionDate func() time.Time
	// DefaultFee holds the default value on creation for the "fee" field.
	DefaultFee float64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the MedicalPrescription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMedicalHistoryID orders the results by the medical_history_id field.
func ByMedicalHistoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMedicalHistoryID, opts...).ToFunc()
}

// ByPrescriptionDate orders the results by the prescription_date field.
func ByPrescriptionDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrescriptionDate, opts...).ToFunc()
}

// ByFee orders the results by the fee field.
func ByFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFee, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByMedicalHistoriesField orders the results by medical_histories field.
func ByMedicalHistoriesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMedicalHistoriesStep(), sql.OrderByField(field, opts...))
	}
}

// ByPrescriptionMedicationCount orders the results by prescription_medication count.
func ByPrescriptionMedicationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPrescriptionMedicationStep(), opts...)
	}
}

// ByPrescriptionMedication orders the results by prescription_medication terms.
func ByPrescriptionMedication(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrescriptionMedicationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMedicalHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MedicalHistoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MedicalHistoriesTable, MedicalHistoriesColumn),
	)
}
func newPrescriptionMedicationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrescriptionMedicationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PrescriptionMedicationTable, PrescriptionMedicationColumn),
	)
}
