// Code generated by ent, DO NOT EDIT.

package medicalprescription

import (
	"patient/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldLTE(FieldID, id))
}

// MedicalHistoryID applies equality check predicate on the "medical_history_id" field. It's identical to MedicalHistoryIDEQ.
func MedicalHistoryID(v uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldEQ(FieldMedicalHistoryID, v))
}

// PrescriptionDate applies equality check predicate on the "prescription_date" field. It's identical to PrescriptionDateEQ.
func PrescriptionDate(v time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldEQ(FieldPrescriptionDate, v))
}

// Fee applies equality check predicate on the "fee" field. It's identical to FeeEQ.
func Fee(v float64) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldEQ(FieldFee, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldEQ(FieldCreatedBy, v))
}

// MedicalHistoryIDEQ applies the EQ predicate on the "medical_history_id" field.
func MedicalHistoryIDEQ(v uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldEQ(FieldMedicalHistoryID, v))
}

// MedicalHistoryIDNEQ applies the NEQ predicate on the "medical_history_id" field.
func MedicalHistoryIDNEQ(v uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldNEQ(FieldMedicalHistoryID, v))
}

// MedicalHistoryIDIn applies the In predicate on the "medical_history_id" field.
func MedicalHistoryIDIn(vs ...uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldIn(FieldMedicalHistoryID, vs...))
}

// MedicalHistoryIDNotIn applies the NotIn predicate on the "medical_history_id" field.
func MedicalHistoryIDNotIn(vs ...uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldNotIn(FieldMedicalHistoryID, vs...))
}

// PrescriptionDateEQ applies the EQ predicate on the "prescription_date" field.
func PrescriptionDateEQ(v time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldEQ(FieldPrescriptionDate, v))
}

// PrescriptionDateNEQ applies the NEQ predicate on the "prescription_date" field.
func PrescriptionDateNEQ(v time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldNEQ(FieldPrescriptionDate, v))
}

// PrescriptionDateIn applies the In predicate on the "prescription_date" field.
func PrescriptionDateIn(vs ...time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldIn(FieldPrescriptionDate, vs...))
}

// PrescriptionDateNotIn applies the NotIn predicate on the "prescription_date" field.
func PrescriptionDateNotIn(vs ...time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldNotIn(FieldPrescriptionDate, vs...))
}

// PrescriptionDateGT applies the GT predicate on the "prescription_date" field.
func PrescriptionDateGT(v time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldGT(FieldPrescriptionDate, v))
}

// PrescriptionDateGTE applies the GTE predicate on the "prescription_date" field.
func PrescriptionDateGTE(v time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldGTE(FieldPrescriptionDate, v))
}

// PrescriptionDateLT applies the LT predicate on the "prescription_date" field.
func PrescriptionDateLT(v time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldLT(FieldPrescriptionDate, v))
}

// PrescriptionDateLTE applies the LTE predicate on the "prescription_date" field.
func PrescriptionDateLTE(v time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldLTE(FieldPrescriptionDate, v))
}

// FeeEQ applies the EQ predicate on the "fee" field.
func FeeEQ(v float64) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldEQ(FieldFee, v))
}

// FeeNEQ applies the NEQ predicate on the "fee" field.
func FeeNEQ(v float64) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldNEQ(FieldFee, v))
}

// FeeIn applies the In predicate on the "fee" field.
func FeeIn(vs ...float64) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldIn(FieldFee, vs...))
}

// FeeNotIn applies the NotIn predicate on the "fee" field.
func FeeNotIn(vs ...float64) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldNotIn(FieldFee, vs...))
}

// FeeGT applies the GT predicate on the "fee" field.
func FeeGT(v float64) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldGT(FieldFee, v))
}

// FeeGTE applies the GTE predicate on the "fee" field.
func FeeGTE(v float64) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldGTE(FieldFee, v))
}

// FeeLT applies the LT predicate on the "fee" field.
func FeeLT(v float64) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldLT(FieldFee, v))
}

// FeeLTE applies the LTE predicate on the "fee" field.
func FeeLTE(v float64) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldLTE(FieldFee, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uuid.UUID) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.FieldLTE(FieldCreatedBy, v))
}

// HasMedicalHistories applies the HasEdge predicate on the "medical_histories" edge.
func HasMedicalHistories() predicate.MedicalPrescription {
	return predicate.MedicalPrescription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MedicalHistoriesTable, MedicalHistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMedicalHistoriesWith applies the HasEdge predicate on the "medical_histories" edge with a given conditions (other predicates).
func HasMedicalHistoriesWith(preds ...predicate.MedicalHistories) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(func(s *sql.Selector) {
		step := newMedicalHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrescriptionMedication applies the HasEdge predicate on the "prescription_medication" edge.
func HasPrescriptionMedication() predicate.MedicalPrescription {
	return predicate.MedicalPrescription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PrescriptionMedicationTable, PrescriptionMedicationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrescriptionMedicationWith applies the HasEdge predicate on the "prescription_medication" edge with a given conditions (other predicates).
func HasPrescriptionMedicationWith(preds ...predicate.PrescriptionMedication) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(func(s *sql.Selector) {
		step := newPrescriptionMedicationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MedicalPrescription) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MedicalPrescription) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MedicalPrescription) predicate.MedicalPrescription {
	return predicate.MedicalPrescription(sql.NotPredicates(p))
}
