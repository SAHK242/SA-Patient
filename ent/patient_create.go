// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"patient/ent/patient"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PatientCreate is the builder for creating a Patient entity.
type PatientCreate struct {
	config
	mutation *PatientMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPhoneNumber sets the "phone_number" field.
func (pc *PatientCreate) SetPhoneNumber(s string) *PatientCreate {
	pc.mutation.SetPhoneNumber(s)
	return pc
}

// SetFirstName sets the "first_name" field.
func (pc *PatientCreate) SetFirstName(s string) *PatientCreate {
	pc.mutation.SetFirstName(s)
	return pc
}

// SetLastName sets the "last_name" field.
func (pc *PatientCreate) SetLastName(s string) *PatientCreate {
	pc.mutation.SetLastName(s)
	return pc
}

// SetGender sets the "gender" field.
func (pc *PatientCreate) SetGender(i int32) *PatientCreate {
	pc.mutation.SetGender(i)
	return pc
}

// SetAddress sets the "address" field.
func (pc *PatientCreate) SetAddress(s string) *PatientCreate {
	pc.mutation.SetAddress(s)
	return pc
}

// SetDateOfBirth sets the "date_of_birth" field.
func (pc *PatientCreate) SetDateOfBirth(t time.Time) *PatientCreate {
	pc.mutation.SetDateOfBirth(t)
	return pc
}

// SetID sets the "id" field.
func (pc *PatientCreate) SetID(u uuid.UUID) *PatientCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PatientCreate) SetNillableID(u *uuid.UUID) *PatientCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// Mutation returns the PatientMutation object of the builder.
func (pc *PatientCreate) Mutation() *PatientMutation {
	return pc.mutation
}

// Save creates the Patient in the database.
func (pc *PatientCreate) Save(ctx context.Context) (*Patient, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PatientCreate) SaveX(ctx context.Context) *Patient {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PatientCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PatientCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PatientCreate) defaults() {
	if _, ok := pc.mutation.ID(); !ok {
		v := patient.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PatientCreate) check() error {
	if _, ok := pc.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`ent: missing required field "Patient.phone_number"`)}
	}
	if _, ok := pc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "Patient.first_name"`)}
	}
	if _, ok := pc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "Patient.last_name"`)}
	}
	if _, ok := pc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "Patient.gender"`)}
	}
	if v, ok := pc.mutation.Gender(); ok {
		if err := patient.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Patient.gender": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Patient.address"`)}
	}
	if _, ok := pc.mutation.DateOfBirth(); !ok {
		return &ValidationError{Name: "date_of_birth", err: errors.New(`ent: missing required field "Patient.date_of_birth"`)}
	}
	return nil
}

func (pc *PatientCreate) sqlSave(ctx context.Context) (*Patient, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PatientCreate) createSpec() (*Patient, *sqlgraph.CreateSpec) {
	var (
		_node = &Patient{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(patient.Table, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.PhoneNumber(); ok {
		_spec.SetField(patient.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := pc.mutation.FirstName(); ok {
		_spec.SetField(patient.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := pc.mutation.LastName(); ok {
		_spec.SetField(patient.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := pc.mutation.Gender(); ok {
		_spec.SetField(patient.FieldGender, field.TypeInt32, value)
		_node.Gender = value
	}
	if value, ok := pc.mutation.Address(); ok {
		_spec.SetField(patient.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := pc.mutation.DateOfBirth(); ok {
		_spec.SetField(patient.FieldDateOfBirth, field.TypeTime, value)
		_node.DateOfBirth = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Patient.Create().
//		SetPhoneNumber(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PatientUpsert) {
//			SetPhoneNumber(v+v).
//		}).
//		Exec(ctx)
func (pc *PatientCreate) OnConflict(opts ...sql.ConflictOption) *PatientUpsertOne {
	pc.conflict = opts
	return &PatientUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Patient.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PatientCreate) OnConflictColumns(columns ...string) *PatientUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PatientUpsertOne{
		create: pc,
	}
}

type (
	// PatientUpsertOne is the builder for "upsert"-ing
	//  one Patient node.
	PatientUpsertOne struct {
		create *PatientCreate
	}

	// PatientUpsert is the "OnConflict" setter.
	PatientUpsert struct {
		*sql.UpdateSet
	}
)

// SetPhoneNumber sets the "phone_number" field.
func (u *PatientUpsert) SetPhoneNumber(v string) *PatientUpsert {
	u.Set(patient.FieldPhoneNumber, v)
	return u
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *PatientUpsert) UpdatePhoneNumber() *PatientUpsert {
	u.SetExcluded(patient.FieldPhoneNumber)
	return u
}

// SetFirstName sets the "first_name" field.
func (u *PatientUpsert) SetFirstName(v string) *PatientUpsert {
	u.Set(patient.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *PatientUpsert) UpdateFirstName() *PatientUpsert {
	u.SetExcluded(patient.FieldFirstName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *PatientUpsert) SetLastName(v string) *PatientUpsert {
	u.Set(patient.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *PatientUpsert) UpdateLastName() *PatientUpsert {
	u.SetExcluded(patient.FieldLastName)
	return u
}

// SetGender sets the "gender" field.
func (u *PatientUpsert) SetGender(v int32) *PatientUpsert {
	u.Set(patient.FieldGender, v)
	return u
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *PatientUpsert) UpdateGender() *PatientUpsert {
	u.SetExcluded(patient.FieldGender)
	return u
}

// AddGender adds v to the "gender" field.
func (u *PatientUpsert) AddGender(v int32) *PatientUpsert {
	u.Add(patient.FieldGender, v)
	return u
}

// SetAddress sets the "address" field.
func (u *PatientUpsert) SetAddress(v string) *PatientUpsert {
	u.Set(patient.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *PatientUpsert) UpdateAddress() *PatientUpsert {
	u.SetExcluded(patient.FieldAddress)
	return u
}

// SetDateOfBirth sets the "date_of_birth" field.
func (u *PatientUpsert) SetDateOfBirth(v time.Time) *PatientUpsert {
	u.Set(patient.FieldDateOfBirth, v)
	return u
}

// UpdateDateOfBirth sets the "date_of_birth" field to the value that was provided on create.
func (u *PatientUpsert) UpdateDateOfBirth() *PatientUpsert {
	u.SetExcluded(patient.FieldDateOfBirth)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Patient.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(patient.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PatientUpsertOne) UpdateNewValues() *PatientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(patient.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Patient.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PatientUpsertOne) Ignore() *PatientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PatientUpsertOne) DoNothing() *PatientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PatientCreate.OnConflict
// documentation for more info.
func (u *PatientUpsertOne) Update(set func(*PatientUpsert)) *PatientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PatientUpsert{UpdateSet: update})
	}))
	return u
}

// SetPhoneNumber sets the "phone_number" field.
func (u *PatientUpsertOne) SetPhoneNumber(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdatePhoneNumber() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePhoneNumber()
	})
}

// SetFirstName sets the "first_name" field.
func (u *PatientUpsertOne) SetFirstName(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdateFirstName() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *PatientUpsertOne) SetLastName(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdateLastName() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateLastName()
	})
}

// SetGender sets the "gender" field.
func (u *PatientUpsertOne) SetGender(v int32) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetGender(v)
	})
}

// AddGender adds v to the "gender" field.
func (u *PatientUpsertOne) AddGender(v int32) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.AddGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdateGender() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateGender()
	})
}

// SetAddress sets the "address" field.
func (u *PatientUpsertOne) SetAddress(v string) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdateAddress() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateAddress()
	})
}

// SetDateOfBirth sets the "date_of_birth" field.
func (u *PatientUpsertOne) SetDateOfBirth(v time.Time) *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.SetDateOfBirth(v)
	})
}

// UpdateDateOfBirth sets the "date_of_birth" field to the value that was provided on create.
func (u *PatientUpsertOne) UpdateDateOfBirth() *PatientUpsertOne {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateDateOfBirth()
	})
}

// Exec executes the query.
func (u *PatientUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PatientCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PatientUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PatientUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PatientUpsertOne.ID is not supported by MySQL driver. Use PatientUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PatientUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PatientCreateBulk is the builder for creating many Patient entities in bulk.
type PatientCreateBulk struct {
	config
	err      error
	builders []*PatientCreate
	conflict []sql.ConflictOption
}

// Save creates the Patient entities in the database.
func (pcb *PatientCreateBulk) Save(ctx context.Context) ([]*Patient, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Patient, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PatientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PatientCreateBulk) SaveX(ctx context.Context) []*Patient {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PatientCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PatientCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Patient.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PatientUpsert) {
//			SetPhoneNumber(v+v).
//		}).
//		Exec(ctx)
func (pcb *PatientCreateBulk) OnConflict(opts ...sql.ConflictOption) *PatientUpsertBulk {
	pcb.conflict = opts
	return &PatientUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Patient.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PatientCreateBulk) OnConflictColumns(columns ...string) *PatientUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PatientUpsertBulk{
		create: pcb,
	}
}

// PatientUpsertBulk is the builder for "upsert"-ing
// a bulk of Patient nodes.
type PatientUpsertBulk struct {
	create *PatientCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Patient.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(patient.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PatientUpsertBulk) UpdateNewValues() *PatientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(patient.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Patient.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PatientUpsertBulk) Ignore() *PatientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PatientUpsertBulk) DoNothing() *PatientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PatientCreateBulk.OnConflict
// documentation for more info.
func (u *PatientUpsertBulk) Update(set func(*PatientUpsert)) *PatientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PatientUpsert{UpdateSet: update})
	}))
	return u
}

// SetPhoneNumber sets the "phone_number" field.
func (u *PatientUpsertBulk) SetPhoneNumber(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdatePhoneNumber() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdatePhoneNumber()
	})
}

// SetFirstName sets the "first_name" field.
func (u *PatientUpsertBulk) SetFirstName(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdateFirstName() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *PatientUpsertBulk) SetLastName(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdateLastName() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateLastName()
	})
}

// SetGender sets the "gender" field.
func (u *PatientUpsertBulk) SetGender(v int32) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetGender(v)
	})
}

// AddGender adds v to the "gender" field.
func (u *PatientUpsertBulk) AddGender(v int32) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.AddGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdateGender() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateGender()
	})
}

// SetAddress sets the "address" field.
func (u *PatientUpsertBulk) SetAddress(v string) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdateAddress() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateAddress()
	})
}

// SetDateOfBirth sets the "date_of_birth" field.
func (u *PatientUpsertBulk) SetDateOfBirth(v time.Time) *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.SetDateOfBirth(v)
	})
}

// UpdateDateOfBirth sets the "date_of_birth" field to the value that was provided on create.
func (u *PatientUpsertBulk) UpdateDateOfBirth() *PatientUpsertBulk {
	return u.Update(func(s *PatientUpsert) {
		s.UpdateDateOfBirth()
	})
}

// Exec executes the query.
func (u *PatientUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PatientCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PatientCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PatientUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
