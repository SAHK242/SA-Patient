// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"patient/ent/medicalhistories"
	"patient/ent/medicaltreatment"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// MedicalTreatment is the model entity for the MedicalTreatment schema.
type MedicalTreatment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// MedicalHistoryID holds the value of the "medical_history_id" field.
	MedicalHistoryID uuid.UUID `json:"medical_history_id,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate *time.Time `json:"end_date,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Result holds the value of the "result" field.
	Result string `json:"result,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Fee holds the value of the "fee" field.
	Fee float64 `json:"fee,omitempty"`
	// MainDoctorID holds the value of the "main_doctor_id" field.
	MainDoctorID uuid.UUID `json:"main_doctor_id,omitempty"`
	// SupportDoctorIds holds the value of the "support_doctor_ids" field.
	SupportDoctorIds *string `json:"support_doctor_ids,omitempty"`
	// SupportNurseIds holds the value of the "support_nurse_ids" field.
	SupportNurseIds *string `json:"support_nurse_ids,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy uuid.UUID `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MedicalTreatmentQuery when eager-loading is set.
	Edges        MedicalTreatmentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MedicalTreatmentEdges holds the relations/edges for other nodes in the graph.
type MedicalTreatmentEdges struct {
	// MedicalHistories holds the value of the medical_histories edge.
	MedicalHistories *MedicalHistories `json:"medical_histories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MedicalHistoriesOrErr returns the MedicalHistories value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MedicalTreatmentEdges) MedicalHistoriesOrErr() (*MedicalHistories, error) {
	if e.MedicalHistories != nil {
		return e.MedicalHistories, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: medicalhistories.Label}
	}
	return nil, &NotLoadedError{edge: "medical_histories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MedicalTreatment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case medicaltreatment.FieldFee:
			values[i] = new(sql.NullFloat64)
		case medicaltreatment.FieldName, medicaltreatment.FieldResult, medicaltreatment.FieldDescription, medicaltreatment.FieldSupportDoctorIds, medicaltreatment.FieldSupportNurseIds:
			values[i] = new(sql.NullString)
		case medicaltreatment.FieldStartDate, medicaltreatment.FieldEndDate, medicaltreatment.FieldCreatedAt, medicaltreatment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case medicaltreatment.FieldID, medicaltreatment.FieldMedicalHistoryID, medicaltreatment.FieldMainDoctorID, medicaltreatment.FieldCreatedBy, medicaltreatment.FieldUpdatedBy:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MedicalTreatment fields.
func (mt *MedicalTreatment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case medicaltreatment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mt.ID = *value
			}
		case medicaltreatment.FieldMedicalHistoryID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field medical_history_id", values[i])
			} else if value != nil {
				mt.MedicalHistoryID = *value
			}
		case medicaltreatment.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				mt.StartDate = value.Time
			}
		case medicaltreatment.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				mt.EndDate = new(time.Time)
				*mt.EndDate = value.Time
			}
		case medicaltreatment.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mt.Name = value.String
			}
		case medicaltreatment.FieldResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				mt.Result = value.String
			}
		case medicaltreatment.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				mt.Description = value.String
			}
		case medicaltreatment.FieldFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fee", values[i])
			} else if value.Valid {
				mt.Fee = value.Float64
			}
		case medicaltreatment.FieldMainDoctorID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field main_doctor_id", values[i])
			} else if value != nil {
				mt.MainDoctorID = *value
			}
		case medicaltreatment.FieldSupportDoctorIds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field support_doctor_ids", values[i])
			} else if value.Valid {
				mt.SupportDoctorIds = new(string)
				*mt.SupportDoctorIds = value.String
			}
		case medicaltreatment.FieldSupportNurseIds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field support_nurse_ids", values[i])
			} else if value.Valid {
				mt.SupportNurseIds = new(string)
				*mt.SupportNurseIds = value.String
			}
		case medicaltreatment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mt.CreatedAt = value.Time
			}
		case medicaltreatment.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				mt.CreatedBy = *value
			}
		case medicaltreatment.FieldUpdatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value != nil {
				mt.UpdatedBy = *value
			}
		case medicaltreatment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mt.UpdatedAt = value.Time
			}
		default:
			mt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MedicalTreatment.
// This includes values selected through modifiers, order, etc.
func (mt *MedicalTreatment) Value(name string) (ent.Value, error) {
	return mt.selectValues.Get(name)
}

// QueryMedicalHistories queries the "medical_histories" edge of the MedicalTreatment entity.
func (mt *MedicalTreatment) QueryMedicalHistories() *MedicalHistoriesQuery {
	return NewMedicalTreatmentClient(mt.config).QueryMedicalHistories(mt)
}

// Update returns a builder for updating this MedicalTreatment.
// Note that you need to call MedicalTreatment.Unwrap() before calling this method if this MedicalTreatment
// was returned from a transaction, and the transaction was committed or rolled back.
func (mt *MedicalTreatment) Update() *MedicalTreatmentUpdateOne {
	return NewMedicalTreatmentClient(mt.config).UpdateOne(mt)
}

// Unwrap unwraps the MedicalTreatment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mt *MedicalTreatment) Unwrap() *MedicalTreatment {
	_tx, ok := mt.config.driver.(*txDriver)
	if !ok {
		panic("ent: MedicalTreatment is not a transactional entity")
	}
	mt.config.driver = _tx.drv
	return mt
}

// String implements the fmt.Stringer.
func (mt *MedicalTreatment) String() string {
	var builder strings.Builder
	builder.WriteString("MedicalTreatment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mt.ID))
	builder.WriteString("medical_history_id=")
	builder.WriteString(fmt.Sprintf("%v", mt.MedicalHistoryID))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(mt.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := mt.EndDate; v != nil {
		builder.WriteString("end_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(mt.Name)
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(mt.Result)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(mt.Description)
	builder.WriteString(", ")
	builder.WriteString("fee=")
	builder.WriteString(fmt.Sprintf("%v", mt.Fee))
	builder.WriteString(", ")
	builder.WriteString("main_doctor_id=")
	builder.WriteString(fmt.Sprintf("%v", mt.MainDoctorID))
	builder.WriteString(", ")
	if v := mt.SupportDoctorIds; v != nil {
		builder.WriteString("support_doctor_ids=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := mt.SupportNurseIds; v != nil {
		builder.WriteString("support_nurse_ids=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", mt.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", mt.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MedicalTreatments is a parsable slice of MedicalTreatment.
type MedicalTreatments []*MedicalTreatment
