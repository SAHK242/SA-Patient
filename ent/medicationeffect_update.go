// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"patient/ent/medicationeffect"
	"patient/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MedicationEffectUpdate is the builder for updating MedicationEffect entities.
type MedicationEffectUpdate struct {
	config
	hooks    []Hook
	mutation *MedicationEffectMutation
}

// Where appends a list predicates to the MedicationEffectUpdate builder.
func (meu *MedicationEffectUpdate) Where(ps ...predicate.MedicationEffect) *MedicationEffectUpdate {
	meu.mutation.Where(ps...)
	return meu
}

// Mutation returns the MedicationEffectMutation object of the builder.
func (meu *MedicationEffectUpdate) Mutation() *MedicationEffectMutation {
	return meu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (meu *MedicationEffectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, meu.sqlSave, meu.mutation, meu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (meu *MedicationEffectUpdate) SaveX(ctx context.Context) int {
	affected, err := meu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (meu *MedicationEffectUpdate) Exec(ctx context.Context) error {
	_, err := meu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (meu *MedicationEffectUpdate) ExecX(ctx context.Context) {
	if err := meu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (meu *MedicationEffectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(medicationeffect.Table, medicationeffect.Columns, sqlgraph.NewFieldSpec(medicationeffect.FieldID, field.TypeInt))
	if ps := meu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, meu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicationeffect.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	meu.mutation.done = true
	return n, nil
}

// MedicationEffectUpdateOne is the builder for updating a single MedicationEffect entity.
type MedicationEffectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MedicationEffectMutation
}

// Mutation returns the MedicationEffectMutation object of the builder.
func (meuo *MedicationEffectUpdateOne) Mutation() *MedicationEffectMutation {
	return meuo.mutation
}

// Where appends a list predicates to the MedicationEffectUpdate builder.
func (meuo *MedicationEffectUpdateOne) Where(ps ...predicate.MedicationEffect) *MedicationEffectUpdateOne {
	meuo.mutation.Where(ps...)
	return meuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (meuo *MedicationEffectUpdateOne) Select(field string, fields ...string) *MedicationEffectUpdateOne {
	meuo.fields = append([]string{field}, fields...)
	return meuo
}

// Save executes the query and returns the updated MedicationEffect entity.
func (meuo *MedicationEffectUpdateOne) Save(ctx context.Context) (*MedicationEffect, error) {
	return withHooks(ctx, meuo.sqlSave, meuo.mutation, meuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (meuo *MedicationEffectUpdateOne) SaveX(ctx context.Context) *MedicationEffect {
	node, err := meuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (meuo *MedicationEffectUpdateOne) Exec(ctx context.Context) error {
	_, err := meuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (meuo *MedicationEffectUpdateOne) ExecX(ctx context.Context) {
	if err := meuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (meuo *MedicationEffectUpdateOne) sqlSave(ctx context.Context) (_node *MedicationEffect, err error) {
	_spec := sqlgraph.NewUpdateSpec(medicationeffect.Table, medicationeffect.Columns, sqlgraph.NewFieldSpec(medicationeffect.FieldID, field.TypeInt))
	id, ok := meuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MedicationEffect.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := meuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, medicationeffect.FieldID)
		for _, f := range fields {
			if !medicationeffect.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != medicationeffect.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := meuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &MedicationEffect{config: meuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, meuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicationeffect.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	meuo.mutation.done = true
	return _node, nil
}
