// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"patient/ent/medicalhistories"
	"patient/ent/medicalprescription"
	"patient/ent/prescriptionmedication"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MedicalPrescriptionCreate is the builder for creating a MedicalPrescription entity.
type MedicalPrescriptionCreate struct {
	config
	mutation *MedicalPrescriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMedicalHistoryID sets the "medical_history_id" field.
func (mpc *MedicalPrescriptionCreate) SetMedicalHistoryID(u uuid.UUID) *MedicalPrescriptionCreate {
	mpc.mutation.SetMedicalHistoryID(u)
	return mpc
}

// SetPrescriptionDate sets the "prescription_date" field.
func (mpc *MedicalPrescriptionCreate) SetPrescriptionDate(t time.Time) *MedicalPrescriptionCreate {
	mpc.mutation.SetPrescriptionDate(t)
	return mpc
}

// SetNillablePrescriptionDate sets the "prescription_date" field if the given value is not nil.
func (mpc *MedicalPrescriptionCreate) SetNillablePrescriptionDate(t *time.Time) *MedicalPrescriptionCreate {
	if t != nil {
		mpc.SetPrescriptionDate(*t)
	}
	return mpc
}

// SetFee sets the "fee" field.
func (mpc *MedicalPrescriptionCreate) SetFee(f float64) *MedicalPrescriptionCreate {
	mpc.mutation.SetFee(f)
	return mpc
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (mpc *MedicalPrescriptionCreate) SetNillableFee(f *float64) *MedicalPrescriptionCreate {
	if f != nil {
		mpc.SetFee(*f)
	}
	return mpc
}

// SetCreatedAt sets the "created_at" field.
func (mpc *MedicalPrescriptionCreate) SetCreatedAt(t time.Time) *MedicalPrescriptionCreate {
	mpc.mutation.SetCreatedAt(t)
	return mpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpc *MedicalPrescriptionCreate) SetNillableCreatedAt(t *time.Time) *MedicalPrescriptionCreate {
	if t != nil {
		mpc.SetCreatedAt(*t)
	}
	return mpc
}

// SetCreatedBy sets the "created_by" field.
func (mpc *MedicalPrescriptionCreate) SetCreatedBy(u uuid.UUID) *MedicalPrescriptionCreate {
	mpc.mutation.SetCreatedBy(u)
	return mpc
}

// SetID sets the "id" field.
func (mpc *MedicalPrescriptionCreate) SetID(u uuid.UUID) *MedicalPrescriptionCreate {
	mpc.mutation.SetID(u)
	return mpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mpc *MedicalPrescriptionCreate) SetNillableID(u *uuid.UUID) *MedicalPrescriptionCreate {
	if u != nil {
		mpc.SetID(*u)
	}
	return mpc
}

// SetMedicalHistoriesID sets the "medical_histories" edge to the MedicalHistories entity by ID.
func (mpc *MedicalPrescriptionCreate) SetMedicalHistoriesID(id uuid.UUID) *MedicalPrescriptionCreate {
	mpc.mutation.SetMedicalHistoriesID(id)
	return mpc
}

// SetMedicalHistories sets the "medical_histories" edge to the MedicalHistories entity.
func (mpc *MedicalPrescriptionCreate) SetMedicalHistories(m *MedicalHistories) *MedicalPrescriptionCreate {
	return mpc.SetMedicalHistoriesID(m.ID)
}

// AddPrescriptionMedicationIDs adds the "prescription_medication" edge to the PrescriptionMedication entity by IDs.
func (mpc *MedicalPrescriptionCreate) AddPrescriptionMedicationIDs(ids ...uuid.UUID) *MedicalPrescriptionCreate {
	mpc.mutation.AddPrescriptionMedicationIDs(ids...)
	return mpc
}

// AddPrescriptionMedication adds the "prescription_medication" edges to the PrescriptionMedication entity.
func (mpc *MedicalPrescriptionCreate) AddPrescriptionMedication(p ...*PrescriptionMedication) *MedicalPrescriptionCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mpc.AddPrescriptionMedicationIDs(ids...)
}

// Mutation returns the MedicalPrescriptionMutation object of the builder.
func (mpc *MedicalPrescriptionCreate) Mutation() *MedicalPrescriptionMutation {
	return mpc.mutation
}

// Save creates the MedicalPrescription in the database.
func (mpc *MedicalPrescriptionCreate) Save(ctx context.Context) (*MedicalPrescription, error) {
	mpc.defaults()
	return withHooks(ctx, mpc.sqlSave, mpc.mutation, mpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mpc *MedicalPrescriptionCreate) SaveX(ctx context.Context) *MedicalPrescription {
	v, err := mpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpc *MedicalPrescriptionCreate) Exec(ctx context.Context) error {
	_, err := mpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpc *MedicalPrescriptionCreate) ExecX(ctx context.Context) {
	if err := mpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpc *MedicalPrescriptionCreate) defaults() {
	if _, ok := mpc.mutation.PrescriptionDate(); !ok {
		v := medicalprescription.DefaultPrescriptionDate()
		mpc.mutation.SetPrescriptionDate(v)
	}
	if _, ok := mpc.mutation.Fee(); !ok {
		v := medicalprescription.DefaultFee
		mpc.mutation.SetFee(v)
	}
	if _, ok := mpc.mutation.CreatedAt(); !ok {
		v := medicalprescription.DefaultCreatedAt()
		mpc.mutation.SetCreatedAt(v)
	}
	if _, ok := mpc.mutation.ID(); !ok {
		v := medicalprescription.DefaultID()
		mpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpc *MedicalPrescriptionCreate) check() error {
	if _, ok := mpc.mutation.MedicalHistoryID(); !ok {
		return &ValidationError{Name: "medical_history_id", err: errors.New(`ent: missing required field "MedicalPrescription.medical_history_id"`)}
	}
	if _, ok := mpc.mutation.PrescriptionDate(); !ok {
		return &ValidationError{Name: "prescription_date", err: errors.New(`ent: missing required field "MedicalPrescription.prescription_date"`)}
	}
	if _, ok := mpc.mutation.Fee(); !ok {
		return &ValidationError{Name: "fee", err: errors.New(`ent: missing required field "MedicalPrescription.fee"`)}
	}
	if _, ok := mpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MedicalPrescription.created_at"`)}
	}
	if _, ok := mpc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "MedicalPrescription.created_by"`)}
	}
	if len(mpc.mutation.MedicalHistoriesIDs()) == 0 {
		return &ValidationError{Name: "medical_histories", err: errors.New(`ent: missing required edge "MedicalPrescription.medical_histories"`)}
	}
	return nil
}

func (mpc *MedicalPrescriptionCreate) sqlSave(ctx context.Context) (*MedicalPrescription, error) {
	if err := mpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mpc.mutation.id = &_node.ID
	mpc.mutation.done = true
	return _node, nil
}

func (mpc *MedicalPrescriptionCreate) createSpec() (*MedicalPrescription, *sqlgraph.CreateSpec) {
	var (
		_node = &MedicalPrescription{config: mpc.config}
		_spec = sqlgraph.NewCreateSpec(medicalprescription.Table, sqlgraph.NewFieldSpec(medicalprescription.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = mpc.conflict
	if id, ok := mpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mpc.mutation.PrescriptionDate(); ok {
		_spec.SetField(medicalprescription.FieldPrescriptionDate, field.TypeTime, value)
		_node.PrescriptionDate = value
	}
	if value, ok := mpc.mutation.Fee(); ok {
		_spec.SetField(medicalprescription.FieldFee, field.TypeFloat64, value)
		_node.Fee = value
	}
	if value, ok := mpc.mutation.CreatedAt(); ok {
		_spec.SetField(medicalprescription.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mpc.mutation.CreatedBy(); ok {
		_spec.SetField(medicalprescription.FieldCreatedBy, field.TypeUUID, value)
		_node.CreatedBy = value
	}
	if nodes := mpc.mutation.MedicalHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprescription.MedicalHistoriesTable,
			Columns: []string{medicalprescription.MedicalHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalhistories.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MedicalHistoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mpc.mutation.PrescriptionMedicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalprescription.PrescriptionMedicationTable,
			Columns: []string{medicalprescription.PrescriptionMedicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescriptionmedication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MedicalPrescription.Create().
//		SetMedicalHistoryID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MedicalPrescriptionUpsert) {
//			SetMedicalHistoryID(v+v).
//		}).
//		Exec(ctx)
func (mpc *MedicalPrescriptionCreate) OnConflict(opts ...sql.ConflictOption) *MedicalPrescriptionUpsertOne {
	mpc.conflict = opts
	return &MedicalPrescriptionUpsertOne{
		create: mpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MedicalPrescription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mpc *MedicalPrescriptionCreate) OnConflictColumns(columns ...string) *MedicalPrescriptionUpsertOne {
	mpc.conflict = append(mpc.conflict, sql.ConflictColumns(columns...))
	return &MedicalPrescriptionUpsertOne{
		create: mpc,
	}
}

type (
	// MedicalPrescriptionUpsertOne is the builder for "upsert"-ing
	//  one MedicalPrescription node.
	MedicalPrescriptionUpsertOne struct {
		create *MedicalPrescriptionCreate
	}

	// MedicalPrescriptionUpsert is the "OnConflict" setter.
	MedicalPrescriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetMedicalHistoryID sets the "medical_history_id" field.
func (u *MedicalPrescriptionUpsert) SetMedicalHistoryID(v uuid.UUID) *MedicalPrescriptionUpsert {
	u.Set(medicalprescription.FieldMedicalHistoryID, v)
	return u
}

// UpdateMedicalHistoryID sets the "medical_history_id" field to the value that was provided on create.
func (u *MedicalPrescriptionUpsert) UpdateMedicalHistoryID() *MedicalPrescriptionUpsert {
	u.SetExcluded(medicalprescription.FieldMedicalHistoryID)
	return u
}

// SetPrescriptionDate sets the "prescription_date" field.
func (u *MedicalPrescriptionUpsert) SetPrescriptionDate(v time.Time) *MedicalPrescriptionUpsert {
	u.Set(medicalprescription.FieldPrescriptionDate, v)
	return u
}

// UpdatePrescriptionDate sets the "prescription_date" field to the value that was provided on create.
func (u *MedicalPrescriptionUpsert) UpdatePrescriptionDate() *MedicalPrescriptionUpsert {
	u.SetExcluded(medicalprescription.FieldPrescriptionDate)
	return u
}

// SetFee sets the "fee" field.
func (u *MedicalPrescriptionUpsert) SetFee(v float64) *MedicalPrescriptionUpsert {
	u.Set(medicalprescription.FieldFee, v)
	return u
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *MedicalPrescriptionUpsert) UpdateFee() *MedicalPrescriptionUpsert {
	u.SetExcluded(medicalprescription.FieldFee)
	return u
}

// AddFee adds v to the "fee" field.
func (u *MedicalPrescriptionUpsert) AddFee(v float64) *MedicalPrescriptionUpsert {
	u.Add(medicalprescription.FieldFee, v)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MedicalPrescriptionUpsert) SetCreatedAt(v time.Time) *MedicalPrescriptionUpsert {
	u.Set(medicalprescription.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MedicalPrescriptionUpsert) UpdateCreatedAt() *MedicalPrescriptionUpsert {
	u.SetExcluded(medicalprescription.FieldCreatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MedicalPrescriptionUpsert) SetCreatedBy(v uuid.UUID) *MedicalPrescriptionUpsert {
	u.Set(medicalprescription.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MedicalPrescriptionUpsert) UpdateCreatedBy() *MedicalPrescriptionUpsert {
	u.SetExcluded(medicalprescription.FieldCreatedBy)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MedicalPrescription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(medicalprescription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MedicalPrescriptionUpsertOne) UpdateNewValues() *MedicalPrescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(medicalprescription.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MedicalPrescription.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MedicalPrescriptionUpsertOne) Ignore() *MedicalPrescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MedicalPrescriptionUpsertOne) DoNothing() *MedicalPrescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MedicalPrescriptionCreate.OnConflict
// documentation for more info.
func (u *MedicalPrescriptionUpsertOne) Update(set func(*MedicalPrescriptionUpsert)) *MedicalPrescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MedicalPrescriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetMedicalHistoryID sets the "medical_history_id" field.
func (u *MedicalPrescriptionUpsertOne) SetMedicalHistoryID(v uuid.UUID) *MedicalPrescriptionUpsertOne {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.SetMedicalHistoryID(v)
	})
}

// UpdateMedicalHistoryID sets the "medical_history_id" field to the value that was provided on create.
func (u *MedicalPrescriptionUpsertOne) UpdateMedicalHistoryID() *MedicalPrescriptionUpsertOne {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.UpdateMedicalHistoryID()
	})
}

// SetPrescriptionDate sets the "prescription_date" field.
func (u *MedicalPrescriptionUpsertOne) SetPrescriptionDate(v time.Time) *MedicalPrescriptionUpsertOne {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.SetPrescriptionDate(v)
	})
}

// UpdatePrescriptionDate sets the "prescription_date" field to the value that was provided on create.
func (u *MedicalPrescriptionUpsertOne) UpdatePrescriptionDate() *MedicalPrescriptionUpsertOne {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.UpdatePrescriptionDate()
	})
}

// SetFee sets the "fee" field.
func (u *MedicalPrescriptionUpsertOne) SetFee(v float64) *MedicalPrescriptionUpsertOne {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *MedicalPrescriptionUpsertOne) AddFee(v float64) *MedicalPrescriptionUpsertOne {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *MedicalPrescriptionUpsertOne) UpdateFee() *MedicalPrescriptionUpsertOne {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.UpdateFee()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *MedicalPrescriptionUpsertOne) SetCreatedAt(v time.Time) *MedicalPrescriptionUpsertOne {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MedicalPrescriptionUpsertOne) UpdateCreatedAt() *MedicalPrescriptionUpsertOne {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *MedicalPrescriptionUpsertOne) SetCreatedBy(v uuid.UUID) *MedicalPrescriptionUpsertOne {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MedicalPrescriptionUpsertOne) UpdateCreatedBy() *MedicalPrescriptionUpsertOne {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.UpdateCreatedBy()
	})
}

// Exec executes the query.
func (u *MedicalPrescriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MedicalPrescriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MedicalPrescriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MedicalPrescriptionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MedicalPrescriptionUpsertOne.ID is not supported by MySQL driver. Use MedicalPrescriptionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MedicalPrescriptionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MedicalPrescriptionCreateBulk is the builder for creating many MedicalPrescription entities in bulk.
type MedicalPrescriptionCreateBulk struct {
	config
	err      error
	builders []*MedicalPrescriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the MedicalPrescription entities in the database.
func (mpcb *MedicalPrescriptionCreateBulk) Save(ctx context.Context) ([]*MedicalPrescription, error) {
	if mpcb.err != nil {
		return nil, mpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mpcb.builders))
	nodes := make([]*MedicalPrescription, len(mpcb.builders))
	mutators := make([]Mutator, len(mpcb.builders))
	for i := range mpcb.builders {
		func(i int, root context.Context) {
			builder := mpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MedicalPrescriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpcb *MedicalPrescriptionCreateBulk) SaveX(ctx context.Context) []*MedicalPrescription {
	v, err := mpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpcb *MedicalPrescriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := mpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpcb *MedicalPrescriptionCreateBulk) ExecX(ctx context.Context) {
	if err := mpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MedicalPrescription.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MedicalPrescriptionUpsert) {
//			SetMedicalHistoryID(v+v).
//		}).
//		Exec(ctx)
func (mpcb *MedicalPrescriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *MedicalPrescriptionUpsertBulk {
	mpcb.conflict = opts
	return &MedicalPrescriptionUpsertBulk{
		create: mpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MedicalPrescription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mpcb *MedicalPrescriptionCreateBulk) OnConflictColumns(columns ...string) *MedicalPrescriptionUpsertBulk {
	mpcb.conflict = append(mpcb.conflict, sql.ConflictColumns(columns...))
	return &MedicalPrescriptionUpsertBulk{
		create: mpcb,
	}
}

// MedicalPrescriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of MedicalPrescription nodes.
type MedicalPrescriptionUpsertBulk struct {
	create *MedicalPrescriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MedicalPrescription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(medicalprescription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MedicalPrescriptionUpsertBulk) UpdateNewValues() *MedicalPrescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(medicalprescription.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MedicalPrescription.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MedicalPrescriptionUpsertBulk) Ignore() *MedicalPrescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MedicalPrescriptionUpsertBulk) DoNothing() *MedicalPrescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MedicalPrescriptionCreateBulk.OnConflict
// documentation for more info.
func (u *MedicalPrescriptionUpsertBulk) Update(set func(*MedicalPrescriptionUpsert)) *MedicalPrescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MedicalPrescriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetMedicalHistoryID sets the "medical_history_id" field.
func (u *MedicalPrescriptionUpsertBulk) SetMedicalHistoryID(v uuid.UUID) *MedicalPrescriptionUpsertBulk {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.SetMedicalHistoryID(v)
	})
}

// UpdateMedicalHistoryID sets the "medical_history_id" field to the value that was provided on create.
func (u *MedicalPrescriptionUpsertBulk) UpdateMedicalHistoryID() *MedicalPrescriptionUpsertBulk {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.UpdateMedicalHistoryID()
	})
}

// SetPrescriptionDate sets the "prescription_date" field.
func (u *MedicalPrescriptionUpsertBulk) SetPrescriptionDate(v time.Time) *MedicalPrescriptionUpsertBulk {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.SetPrescriptionDate(v)
	})
}

// UpdatePrescriptionDate sets the "prescription_date" field to the value that was provided on create.
func (u *MedicalPrescriptionUpsertBulk) UpdatePrescriptionDate() *MedicalPrescriptionUpsertBulk {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.UpdatePrescriptionDate()
	})
}

// SetFee sets the "fee" field.
func (u *MedicalPrescriptionUpsertBulk) SetFee(v float64) *MedicalPrescriptionUpsertBulk {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *MedicalPrescriptionUpsertBulk) AddFee(v float64) *MedicalPrescriptionUpsertBulk {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *MedicalPrescriptionUpsertBulk) UpdateFee() *MedicalPrescriptionUpsertBulk {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.UpdateFee()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *MedicalPrescriptionUpsertBulk) SetCreatedAt(v time.Time) *MedicalPrescriptionUpsertBulk {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MedicalPrescriptionUpsertBulk) UpdateCreatedAt() *MedicalPrescriptionUpsertBulk {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *MedicalPrescriptionUpsertBulk) SetCreatedBy(v uuid.UUID) *MedicalPrescriptionUpsertBulk {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MedicalPrescriptionUpsertBulk) UpdateCreatedBy() *MedicalPrescriptionUpsertBulk {
	return u.Update(func(s *MedicalPrescriptionUpsert) {
		s.UpdateCreatedBy()
	})
}

// Exec executes the query.
func (u *MedicalPrescriptionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MedicalPrescriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MedicalPrescriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MedicalPrescriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
