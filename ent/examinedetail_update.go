// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"patient/ent/examinedetail"
	"patient/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamineDetailUpdate is the builder for updating ExamineDetail entities.
type ExamineDetailUpdate struct {
	config
	hooks    []Hook
	mutation *ExamineDetailMutation
}

// Where appends a list predicates to the ExamineDetailUpdate builder.
func (edu *ExamineDetailUpdate) Where(ps ...predicate.ExamineDetail) *ExamineDetailUpdate {
	edu.mutation.Where(ps...)
	return edu
}

// Mutation returns the ExamineDetailMutation object of the builder.
func (edu *ExamineDetailUpdate) Mutation() *ExamineDetailMutation {
	return edu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (edu *ExamineDetailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, edu.sqlSave, edu.mutation, edu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (edu *ExamineDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := edu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (edu *ExamineDetailUpdate) Exec(ctx context.Context) error {
	_, err := edu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edu *ExamineDetailUpdate) ExecX(ctx context.Context) {
	if err := edu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (edu *ExamineDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(examinedetail.Table, examinedetail.Columns, sqlgraph.NewFieldSpec(examinedetail.FieldID, field.TypeInt))
	if ps := edu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, edu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examinedetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	edu.mutation.done = true
	return n, nil
}

// ExamineDetailUpdateOne is the builder for updating a single ExamineDetail entity.
type ExamineDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamineDetailMutation
}

// Mutation returns the ExamineDetailMutation object of the builder.
func (eduo *ExamineDetailUpdateOne) Mutation() *ExamineDetailMutation {
	return eduo.mutation
}

// Where appends a list predicates to the ExamineDetailUpdate builder.
func (eduo *ExamineDetailUpdateOne) Where(ps ...predicate.ExamineDetail) *ExamineDetailUpdateOne {
	eduo.mutation.Where(ps...)
	return eduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eduo *ExamineDetailUpdateOne) Select(field string, fields ...string) *ExamineDetailUpdateOne {
	eduo.fields = append([]string{field}, fields...)
	return eduo
}

// Save executes the query and returns the updated ExamineDetail entity.
func (eduo *ExamineDetailUpdateOne) Save(ctx context.Context) (*ExamineDetail, error) {
	return withHooks(ctx, eduo.sqlSave, eduo.mutation, eduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eduo *ExamineDetailUpdateOne) SaveX(ctx context.Context) *ExamineDetail {
	node, err := eduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eduo *ExamineDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := eduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eduo *ExamineDetailUpdateOne) ExecX(ctx context.Context) {
	if err := eduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eduo *ExamineDetailUpdateOne) sqlSave(ctx context.Context) (_node *ExamineDetail, err error) {
	_spec := sqlgraph.NewUpdateSpec(examinedetail.Table, examinedetail.Columns, sqlgraph.NewFieldSpec(examinedetail.FieldID, field.TypeInt))
	id, ok := eduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExamineDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, examinedetail.FieldID)
		for _, f := range fields {
			if !examinedetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != examinedetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &ExamineDetail{config: eduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examinedetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eduo.mutation.done = true
	return _node, nil
}
