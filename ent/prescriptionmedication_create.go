// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"patient/ent/medicalprescription"
	"patient/ent/medication"
	"patient/ent/prescriptionmedication"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PrescriptionMedicationCreate is the builder for creating a PrescriptionMedication entity.
type PrescriptionMedicationCreate struct {
	config
	mutation *PrescriptionMedicationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPrescriptionID sets the "prescription_id" field.
func (pmc *PrescriptionMedicationCreate) SetPrescriptionID(u uuid.UUID) *PrescriptionMedicationCreate {
	pmc.mutation.SetPrescriptionID(u)
	return pmc
}

// SetMedicationID sets the "medication_id" field.
func (pmc *PrescriptionMedicationCreate) SetMedicationID(u uuid.UUID) *PrescriptionMedicationCreate {
	pmc.mutation.SetMedicationID(u)
	return pmc
}

// SetQuantity sets the "quantity" field.
func (pmc *PrescriptionMedicationCreate) SetQuantity(i int64) *PrescriptionMedicationCreate {
	pmc.mutation.SetQuantity(i)
	return pmc
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (pmc *PrescriptionMedicationCreate) SetNillableQuantity(i *int64) *PrescriptionMedicationCreate {
	if i != nil {
		pmc.SetQuantity(*i)
	}
	return pmc
}

// SetID sets the "id" field.
func (pmc *PrescriptionMedicationCreate) SetID(u uuid.UUID) *PrescriptionMedicationCreate {
	pmc.mutation.SetID(u)
	return pmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pmc *PrescriptionMedicationCreate) SetNillableID(u *uuid.UUID) *PrescriptionMedicationCreate {
	if u != nil {
		pmc.SetID(*u)
	}
	return pmc
}

// SetMedicalPrescriptionID sets the "medical_prescription" edge to the MedicalPrescription entity by ID.
func (pmc *PrescriptionMedicationCreate) SetMedicalPrescriptionID(id uuid.UUID) *PrescriptionMedicationCreate {
	pmc.mutation.SetMedicalPrescriptionID(id)
	return pmc
}

// SetMedicalPrescription sets the "medical_prescription" edge to the MedicalPrescription entity.
func (pmc *PrescriptionMedicationCreate) SetMedicalPrescription(m *MedicalPrescription) *PrescriptionMedicationCreate {
	return pmc.SetMedicalPrescriptionID(m.ID)
}

// SetMedication sets the "medication" edge to the Medication entity.
func (pmc *PrescriptionMedicationCreate) SetMedication(m *Medication) *PrescriptionMedicationCreate {
	return pmc.SetMedicationID(m.ID)
}

// Mutation returns the PrescriptionMedicationMutation object of the builder.
func (pmc *PrescriptionMedicationCreate) Mutation() *PrescriptionMedicationMutation {
	return pmc.mutation
}

// Save creates the PrescriptionMedication in the database.
func (pmc *PrescriptionMedicationCreate) Save(ctx context.Context) (*PrescriptionMedication, error) {
	pmc.defaults()
	return withHooks(ctx, pmc.sqlSave, pmc.mutation, pmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *PrescriptionMedicationCreate) SaveX(ctx context.Context) *PrescriptionMedication {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *PrescriptionMedicationCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *PrescriptionMedicationCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *PrescriptionMedicationCreate) defaults() {
	if _, ok := pmc.mutation.Quantity(); !ok {
		v := prescriptionmedication.DefaultQuantity
		pmc.mutation.SetQuantity(v)
	}
	if _, ok := pmc.mutation.ID(); !ok {
		v := prescriptionmedication.DefaultID()
		pmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *PrescriptionMedicationCreate) check() error {
	if _, ok := pmc.mutation.PrescriptionID(); !ok {
		return &ValidationError{Name: "prescription_id", err: errors.New(`ent: missing required field "PrescriptionMedication.prescription_id"`)}
	}
	if _, ok := pmc.mutation.MedicationID(); !ok {
		return &ValidationError{Name: "medication_id", err: errors.New(`ent: missing required field "PrescriptionMedication.medication_id"`)}
	}
	if _, ok := pmc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "PrescriptionMedication.quantity"`)}
	}
	if len(pmc.mutation.MedicalPrescriptionIDs()) == 0 {
		return &ValidationError{Name: "medical_prescription", err: errors.New(`ent: missing required edge "PrescriptionMedication.medical_prescription"`)}
	}
	if len(pmc.mutation.MedicationIDs()) == 0 {
		return &ValidationError{Name: "medication", err: errors.New(`ent: missing required edge "PrescriptionMedication.medication"`)}
	}
	return nil
}

func (pmc *PrescriptionMedicationCreate) sqlSave(ctx context.Context) (*PrescriptionMedication, error) {
	if err := pmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pmc.mutation.id = &_node.ID
	pmc.mutation.done = true
	return _node, nil
}

func (pmc *PrescriptionMedicationCreate) createSpec() (*PrescriptionMedication, *sqlgraph.CreateSpec) {
	var (
		_node = &PrescriptionMedication{config: pmc.config}
		_spec = sqlgraph.NewCreateSpec(prescriptionmedication.Table, sqlgraph.NewFieldSpec(prescriptionmedication.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = pmc.conflict
	if id, ok := pmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pmc.mutation.Quantity(); ok {
		_spec.SetField(prescriptionmedication.FieldQuantity, field.TypeInt64, value)
		_node.Quantity = value
	}
	if nodes := pmc.mutation.MedicalPrescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prescriptionmedication.MedicalPrescriptionTable,
			Columns: []string{prescriptionmedication.MedicalPrescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicalprescription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PrescriptionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmc.mutation.MedicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prescriptionmedication.MedicationTable,
			Columns: []string{prescriptionmedication.MedicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MedicationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PrescriptionMedication.Create().
//		SetPrescriptionID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PrescriptionMedicationUpsert) {
//			SetPrescriptionID(v+v).
//		}).
//		Exec(ctx)
func (pmc *PrescriptionMedicationCreate) OnConflict(opts ...sql.ConflictOption) *PrescriptionMedicationUpsertOne {
	pmc.conflict = opts
	return &PrescriptionMedicationUpsertOne{
		create: pmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PrescriptionMedication.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmc *PrescriptionMedicationCreate) OnConflictColumns(columns ...string) *PrescriptionMedicationUpsertOne {
	pmc.conflict = append(pmc.conflict, sql.ConflictColumns(columns...))
	return &PrescriptionMedicationUpsertOne{
		create: pmc,
	}
}

type (
	// PrescriptionMedicationUpsertOne is the builder for "upsert"-ing
	//  one PrescriptionMedication node.
	PrescriptionMedicationUpsertOne struct {
		create *PrescriptionMedicationCreate
	}

	// PrescriptionMedicationUpsert is the "OnConflict" setter.
	PrescriptionMedicationUpsert struct {
		*sql.UpdateSet
	}
)

// SetPrescriptionID sets the "prescription_id" field.
func (u *PrescriptionMedicationUpsert) SetPrescriptionID(v uuid.UUID) *PrescriptionMedicationUpsert {
	u.Set(prescriptionmedication.FieldPrescriptionID, v)
	return u
}

// UpdatePrescriptionID sets the "prescription_id" field to the value that was provided on create.
func (u *PrescriptionMedicationUpsert) UpdatePrescriptionID() *PrescriptionMedicationUpsert {
	u.SetExcluded(prescriptionmedication.FieldPrescriptionID)
	return u
}

// SetMedicationID sets the "medication_id" field.
func (u *PrescriptionMedicationUpsert) SetMedicationID(v uuid.UUID) *PrescriptionMedicationUpsert {
	u.Set(prescriptionmedication.FieldMedicationID, v)
	return u
}

// UpdateMedicationID sets the "medication_id" field to the value that was provided on create.
func (u *PrescriptionMedicationUpsert) UpdateMedicationID() *PrescriptionMedicationUpsert {
	u.SetExcluded(prescriptionmedication.FieldMedicationID)
	return u
}

// SetQuantity sets the "quantity" field.
func (u *PrescriptionMedicationUpsert) SetQuantity(v int64) *PrescriptionMedicationUpsert {
	u.Set(prescriptionmedication.FieldQuantity, v)
	return u
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *PrescriptionMedicationUpsert) UpdateQuantity() *PrescriptionMedicationUpsert {
	u.SetExcluded(prescriptionmedication.FieldQuantity)
	return u
}

// AddQuantity adds v to the "quantity" field.
func (u *PrescriptionMedicationUpsert) AddQuantity(v int64) *PrescriptionMedicationUpsert {
	u.Add(prescriptionmedication.FieldQuantity, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PrescriptionMedication.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(prescriptionmedication.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PrescriptionMedicationUpsertOne) UpdateNewValues() *PrescriptionMedicationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(prescriptionmedication.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PrescriptionMedication.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PrescriptionMedicationUpsertOne) Ignore() *PrescriptionMedicationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PrescriptionMedicationUpsertOne) DoNothing() *PrescriptionMedicationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PrescriptionMedicationCreate.OnConflict
// documentation for more info.
func (u *PrescriptionMedicationUpsertOne) Update(set func(*PrescriptionMedicationUpsert)) *PrescriptionMedicationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PrescriptionMedicationUpsert{UpdateSet: update})
	}))
	return u
}

// SetPrescriptionID sets the "prescription_id" field.
func (u *PrescriptionMedicationUpsertOne) SetPrescriptionID(v uuid.UUID) *PrescriptionMedicationUpsertOne {
	return u.Update(func(s *PrescriptionMedicationUpsert) {
		s.SetPrescriptionID(v)
	})
}

// UpdatePrescriptionID sets the "prescription_id" field to the value that was provided on create.
func (u *PrescriptionMedicationUpsertOne) UpdatePrescriptionID() *PrescriptionMedicationUpsertOne {
	return u.Update(func(s *PrescriptionMedicationUpsert) {
		s.UpdatePrescriptionID()
	})
}

// SetMedicationID sets the "medication_id" field.
func (u *PrescriptionMedicationUpsertOne) SetMedicationID(v uuid.UUID) *PrescriptionMedicationUpsertOne {
	return u.Update(func(s *PrescriptionMedicationUpsert) {
		s.SetMedicationID(v)
	})
}

// UpdateMedicationID sets the "medication_id" field to the value that was provided on create.
func (u *PrescriptionMedicationUpsertOne) UpdateMedicationID() *PrescriptionMedicationUpsertOne {
	return u.Update(func(s *PrescriptionMedicationUpsert) {
		s.UpdateMedicationID()
	})
}

// SetQuantity sets the "quantity" field.
func (u *PrescriptionMedicationUpsertOne) SetQuantity(v int64) *PrescriptionMedicationUpsertOne {
	return u.Update(func(s *PrescriptionMedicationUpsert) {
		s.SetQuantity(v)
	})
}

// AddQuantity adds v to the "quantity" field.
func (u *PrescriptionMedicationUpsertOne) AddQuantity(v int64) *PrescriptionMedicationUpsertOne {
	return u.Update(func(s *PrescriptionMedicationUpsert) {
		s.AddQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *PrescriptionMedicationUpsertOne) UpdateQuantity() *PrescriptionMedicationUpsertOne {
	return u.Update(func(s *PrescriptionMedicationUpsert) {
		s.UpdateQuantity()
	})
}

// Exec executes the query.
func (u *PrescriptionMedicationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PrescriptionMedicationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PrescriptionMedicationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PrescriptionMedicationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PrescriptionMedicationUpsertOne.ID is not supported by MySQL driver. Use PrescriptionMedicationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PrescriptionMedicationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PrescriptionMedicationCreateBulk is the builder for creating many PrescriptionMedication entities in bulk.
type PrescriptionMedicationCreateBulk struct {
	config
	err      error
	builders []*PrescriptionMedicationCreate
	conflict []sql.ConflictOption
}

// Save creates the PrescriptionMedication entities in the database.
func (pmcb *PrescriptionMedicationCreateBulk) Save(ctx context.Context) ([]*PrescriptionMedication, error) {
	if pmcb.err != nil {
		return nil, pmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*PrescriptionMedication, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PrescriptionMedicationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *PrescriptionMedicationCreateBulk) SaveX(ctx context.Context) []*PrescriptionMedication {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *PrescriptionMedicationCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *PrescriptionMedicationCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PrescriptionMedication.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PrescriptionMedicationUpsert) {
//			SetPrescriptionID(v+v).
//		}).
//		Exec(ctx)
func (pmcb *PrescriptionMedicationCreateBulk) OnConflict(opts ...sql.ConflictOption) *PrescriptionMedicationUpsertBulk {
	pmcb.conflict = opts
	return &PrescriptionMedicationUpsertBulk{
		create: pmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PrescriptionMedication.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmcb *PrescriptionMedicationCreateBulk) OnConflictColumns(columns ...string) *PrescriptionMedicationUpsertBulk {
	pmcb.conflict = append(pmcb.conflict, sql.ConflictColumns(columns...))
	return &PrescriptionMedicationUpsertBulk{
		create: pmcb,
	}
}

// PrescriptionMedicationUpsertBulk is the builder for "upsert"-ing
// a bulk of PrescriptionMedication nodes.
type PrescriptionMedicationUpsertBulk struct {
	create *PrescriptionMedicationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PrescriptionMedication.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(prescriptionmedication.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PrescriptionMedicationUpsertBulk) UpdateNewValues() *PrescriptionMedicationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(prescriptionmedication.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PrescriptionMedication.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PrescriptionMedicationUpsertBulk) Ignore() *PrescriptionMedicationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PrescriptionMedicationUpsertBulk) DoNothing() *PrescriptionMedicationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PrescriptionMedicationCreateBulk.OnConflict
// documentation for more info.
func (u *PrescriptionMedicationUpsertBulk) Update(set func(*PrescriptionMedicationUpsert)) *PrescriptionMedicationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PrescriptionMedicationUpsert{UpdateSet: update})
	}))
	return u
}

// SetPrescriptionID sets the "prescription_id" field.
func (u *PrescriptionMedicationUpsertBulk) SetPrescriptionID(v uuid.UUID) *PrescriptionMedicationUpsertBulk {
	return u.Update(func(s *PrescriptionMedicationUpsert) {
		s.SetPrescriptionID(v)
	})
}

// UpdatePrescriptionID sets the "prescription_id" field to the value that was provided on create.
func (u *PrescriptionMedicationUpsertBulk) UpdatePrescriptionID() *PrescriptionMedicationUpsertBulk {
	return u.Update(func(s *PrescriptionMedicationUpsert) {
		s.UpdatePrescriptionID()
	})
}

// SetMedicationID sets the "medication_id" field.
func (u *PrescriptionMedicationUpsertBulk) SetMedicationID(v uuid.UUID) *PrescriptionMedicationUpsertBulk {
	return u.Update(func(s *PrescriptionMedicationUpsert) {
		s.SetMedicationID(v)
	})
}

// UpdateMedicationID sets the "medication_id" field to the value that was provided on create.
func (u *PrescriptionMedicationUpsertBulk) UpdateMedicationID() *PrescriptionMedicationUpsertBulk {
	return u.Update(func(s *PrescriptionMedicationUpsert) {
		s.UpdateMedicationID()
	})
}

// SetQuantity sets the "quantity" field.
func (u *PrescriptionMedicationUpsertBulk) SetQuantity(v int64) *PrescriptionMedicationUpsertBulk {
	return u.Update(func(s *PrescriptionMedicationUpsert) {
		s.SetQuantity(v)
	})
}

// AddQuantity adds v to the "quantity" field.
func (u *PrescriptionMedicationUpsertBulk) AddQuantity(v int64) *PrescriptionMedicationUpsertBulk {
	return u.Update(func(s *PrescriptionMedicationUpsert) {
		s.AddQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *PrescriptionMedicationUpsertBulk) UpdateQuantity() *PrescriptionMedicationUpsertBulk {
	return u.Update(func(s *PrescriptionMedicationUpsert) {
		s.UpdateQuantity()
	})
}

// Exec executes the query.
func (u *PrescriptionMedicationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PrescriptionMedicationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PrescriptionMedicationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PrescriptionMedicationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
